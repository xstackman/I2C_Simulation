
IIC Simulation GPIO G0.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004048  080000bc  080000bc  000100bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000174  08004104  08004104  00014104  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004278  08004278  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08004278  08004278  00014278  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004280  08004280  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004280  08004280  00014280  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004284  08004284  00014284  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08004288  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000d0  20000070  080042f8  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000140  080042f8  00020140  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000e313  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000204b  00000000  00000000  0002e3ab  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000980  00000000  00000000  000303f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000008b8  00000000  00000000  00030d78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018bef  00000000  00000000  00031630  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000c995  00000000  00000000  0004a21f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00097e90  00000000  00000000  00056bb4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000eea44  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002898  00000000  00000000  000eea98  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	; (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	; (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	; (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	20000070 	.word	0x20000070
 80000dc:	00000000 	.word	0x00000000
 80000e0:	080040ec 	.word	0x080040ec

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	; (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	; (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	; (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			; (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	20000074 	.word	0x20000074
 8000100:	080040ec 	.word	0x080040ec

08000104 <__gnu_thumb1_case_shi>:
 8000104:	b403      	push	{r0, r1}
 8000106:	4671      	mov	r1, lr
 8000108:	0849      	lsrs	r1, r1, #1
 800010a:	0040      	lsls	r0, r0, #1
 800010c:	0049      	lsls	r1, r1, #1
 800010e:	5e09      	ldrsh	r1, [r1, r0]
 8000110:	0049      	lsls	r1, r1, #1
 8000112:	448e      	add	lr, r1
 8000114:	bc03      	pop	{r0, r1}
 8000116:	4770      	bx	lr

08000118 <__udivsi3>:
 8000118:	2200      	movs	r2, #0
 800011a:	0843      	lsrs	r3, r0, #1
 800011c:	428b      	cmp	r3, r1
 800011e:	d374      	bcc.n	800020a <__udivsi3+0xf2>
 8000120:	0903      	lsrs	r3, r0, #4
 8000122:	428b      	cmp	r3, r1
 8000124:	d35f      	bcc.n	80001e6 <__udivsi3+0xce>
 8000126:	0a03      	lsrs	r3, r0, #8
 8000128:	428b      	cmp	r3, r1
 800012a:	d344      	bcc.n	80001b6 <__udivsi3+0x9e>
 800012c:	0b03      	lsrs	r3, r0, #12
 800012e:	428b      	cmp	r3, r1
 8000130:	d328      	bcc.n	8000184 <__udivsi3+0x6c>
 8000132:	0c03      	lsrs	r3, r0, #16
 8000134:	428b      	cmp	r3, r1
 8000136:	d30d      	bcc.n	8000154 <__udivsi3+0x3c>
 8000138:	22ff      	movs	r2, #255	; 0xff
 800013a:	0209      	lsls	r1, r1, #8
 800013c:	ba12      	rev	r2, r2
 800013e:	0c03      	lsrs	r3, r0, #16
 8000140:	428b      	cmp	r3, r1
 8000142:	d302      	bcc.n	800014a <__udivsi3+0x32>
 8000144:	1212      	asrs	r2, r2, #8
 8000146:	0209      	lsls	r1, r1, #8
 8000148:	d065      	beq.n	8000216 <__udivsi3+0xfe>
 800014a:	0b03      	lsrs	r3, r0, #12
 800014c:	428b      	cmp	r3, r1
 800014e:	d319      	bcc.n	8000184 <__udivsi3+0x6c>
 8000150:	e000      	b.n	8000154 <__udivsi3+0x3c>
 8000152:	0a09      	lsrs	r1, r1, #8
 8000154:	0bc3      	lsrs	r3, r0, #15
 8000156:	428b      	cmp	r3, r1
 8000158:	d301      	bcc.n	800015e <__udivsi3+0x46>
 800015a:	03cb      	lsls	r3, r1, #15
 800015c:	1ac0      	subs	r0, r0, r3
 800015e:	4152      	adcs	r2, r2
 8000160:	0b83      	lsrs	r3, r0, #14
 8000162:	428b      	cmp	r3, r1
 8000164:	d301      	bcc.n	800016a <__udivsi3+0x52>
 8000166:	038b      	lsls	r3, r1, #14
 8000168:	1ac0      	subs	r0, r0, r3
 800016a:	4152      	adcs	r2, r2
 800016c:	0b43      	lsrs	r3, r0, #13
 800016e:	428b      	cmp	r3, r1
 8000170:	d301      	bcc.n	8000176 <__udivsi3+0x5e>
 8000172:	034b      	lsls	r3, r1, #13
 8000174:	1ac0      	subs	r0, r0, r3
 8000176:	4152      	adcs	r2, r2
 8000178:	0b03      	lsrs	r3, r0, #12
 800017a:	428b      	cmp	r3, r1
 800017c:	d301      	bcc.n	8000182 <__udivsi3+0x6a>
 800017e:	030b      	lsls	r3, r1, #12
 8000180:	1ac0      	subs	r0, r0, r3
 8000182:	4152      	adcs	r2, r2
 8000184:	0ac3      	lsrs	r3, r0, #11
 8000186:	428b      	cmp	r3, r1
 8000188:	d301      	bcc.n	800018e <__udivsi3+0x76>
 800018a:	02cb      	lsls	r3, r1, #11
 800018c:	1ac0      	subs	r0, r0, r3
 800018e:	4152      	adcs	r2, r2
 8000190:	0a83      	lsrs	r3, r0, #10
 8000192:	428b      	cmp	r3, r1
 8000194:	d301      	bcc.n	800019a <__udivsi3+0x82>
 8000196:	028b      	lsls	r3, r1, #10
 8000198:	1ac0      	subs	r0, r0, r3
 800019a:	4152      	adcs	r2, r2
 800019c:	0a43      	lsrs	r3, r0, #9
 800019e:	428b      	cmp	r3, r1
 80001a0:	d301      	bcc.n	80001a6 <__udivsi3+0x8e>
 80001a2:	024b      	lsls	r3, r1, #9
 80001a4:	1ac0      	subs	r0, r0, r3
 80001a6:	4152      	adcs	r2, r2
 80001a8:	0a03      	lsrs	r3, r0, #8
 80001aa:	428b      	cmp	r3, r1
 80001ac:	d301      	bcc.n	80001b2 <__udivsi3+0x9a>
 80001ae:	020b      	lsls	r3, r1, #8
 80001b0:	1ac0      	subs	r0, r0, r3
 80001b2:	4152      	adcs	r2, r2
 80001b4:	d2cd      	bcs.n	8000152 <__udivsi3+0x3a>
 80001b6:	09c3      	lsrs	r3, r0, #7
 80001b8:	428b      	cmp	r3, r1
 80001ba:	d301      	bcc.n	80001c0 <__udivsi3+0xa8>
 80001bc:	01cb      	lsls	r3, r1, #7
 80001be:	1ac0      	subs	r0, r0, r3
 80001c0:	4152      	adcs	r2, r2
 80001c2:	0983      	lsrs	r3, r0, #6
 80001c4:	428b      	cmp	r3, r1
 80001c6:	d301      	bcc.n	80001cc <__udivsi3+0xb4>
 80001c8:	018b      	lsls	r3, r1, #6
 80001ca:	1ac0      	subs	r0, r0, r3
 80001cc:	4152      	adcs	r2, r2
 80001ce:	0943      	lsrs	r3, r0, #5
 80001d0:	428b      	cmp	r3, r1
 80001d2:	d301      	bcc.n	80001d8 <__udivsi3+0xc0>
 80001d4:	014b      	lsls	r3, r1, #5
 80001d6:	1ac0      	subs	r0, r0, r3
 80001d8:	4152      	adcs	r2, r2
 80001da:	0903      	lsrs	r3, r0, #4
 80001dc:	428b      	cmp	r3, r1
 80001de:	d301      	bcc.n	80001e4 <__udivsi3+0xcc>
 80001e0:	010b      	lsls	r3, r1, #4
 80001e2:	1ac0      	subs	r0, r0, r3
 80001e4:	4152      	adcs	r2, r2
 80001e6:	08c3      	lsrs	r3, r0, #3
 80001e8:	428b      	cmp	r3, r1
 80001ea:	d301      	bcc.n	80001f0 <__udivsi3+0xd8>
 80001ec:	00cb      	lsls	r3, r1, #3
 80001ee:	1ac0      	subs	r0, r0, r3
 80001f0:	4152      	adcs	r2, r2
 80001f2:	0883      	lsrs	r3, r0, #2
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d301      	bcc.n	80001fc <__udivsi3+0xe4>
 80001f8:	008b      	lsls	r3, r1, #2
 80001fa:	1ac0      	subs	r0, r0, r3
 80001fc:	4152      	adcs	r2, r2
 80001fe:	0843      	lsrs	r3, r0, #1
 8000200:	428b      	cmp	r3, r1
 8000202:	d301      	bcc.n	8000208 <__udivsi3+0xf0>
 8000204:	004b      	lsls	r3, r1, #1
 8000206:	1ac0      	subs	r0, r0, r3
 8000208:	4152      	adcs	r2, r2
 800020a:	1a41      	subs	r1, r0, r1
 800020c:	d200      	bcs.n	8000210 <__udivsi3+0xf8>
 800020e:	4601      	mov	r1, r0
 8000210:	4152      	adcs	r2, r2
 8000212:	4610      	mov	r0, r2
 8000214:	4770      	bx	lr
 8000216:	e7ff      	b.n	8000218 <__udivsi3+0x100>
 8000218:	b501      	push	{r0, lr}
 800021a:	2000      	movs	r0, #0
 800021c:	f000 f8f0 	bl	8000400 <__aeabi_idiv0>
 8000220:	bd02      	pop	{r1, pc}
 8000222:	46c0      	nop			; (mov r8, r8)

08000224 <__aeabi_uidivmod>:
 8000224:	2900      	cmp	r1, #0
 8000226:	d0f7      	beq.n	8000218 <__udivsi3+0x100>
 8000228:	e776      	b.n	8000118 <__udivsi3>
 800022a:	4770      	bx	lr

0800022c <__divsi3>:
 800022c:	4603      	mov	r3, r0
 800022e:	430b      	orrs	r3, r1
 8000230:	d47f      	bmi.n	8000332 <__divsi3+0x106>
 8000232:	2200      	movs	r2, #0
 8000234:	0843      	lsrs	r3, r0, #1
 8000236:	428b      	cmp	r3, r1
 8000238:	d374      	bcc.n	8000324 <__divsi3+0xf8>
 800023a:	0903      	lsrs	r3, r0, #4
 800023c:	428b      	cmp	r3, r1
 800023e:	d35f      	bcc.n	8000300 <__divsi3+0xd4>
 8000240:	0a03      	lsrs	r3, r0, #8
 8000242:	428b      	cmp	r3, r1
 8000244:	d344      	bcc.n	80002d0 <__divsi3+0xa4>
 8000246:	0b03      	lsrs	r3, r0, #12
 8000248:	428b      	cmp	r3, r1
 800024a:	d328      	bcc.n	800029e <__divsi3+0x72>
 800024c:	0c03      	lsrs	r3, r0, #16
 800024e:	428b      	cmp	r3, r1
 8000250:	d30d      	bcc.n	800026e <__divsi3+0x42>
 8000252:	22ff      	movs	r2, #255	; 0xff
 8000254:	0209      	lsls	r1, r1, #8
 8000256:	ba12      	rev	r2, r2
 8000258:	0c03      	lsrs	r3, r0, #16
 800025a:	428b      	cmp	r3, r1
 800025c:	d302      	bcc.n	8000264 <__divsi3+0x38>
 800025e:	1212      	asrs	r2, r2, #8
 8000260:	0209      	lsls	r1, r1, #8
 8000262:	d065      	beq.n	8000330 <__divsi3+0x104>
 8000264:	0b03      	lsrs	r3, r0, #12
 8000266:	428b      	cmp	r3, r1
 8000268:	d319      	bcc.n	800029e <__divsi3+0x72>
 800026a:	e000      	b.n	800026e <__divsi3+0x42>
 800026c:	0a09      	lsrs	r1, r1, #8
 800026e:	0bc3      	lsrs	r3, r0, #15
 8000270:	428b      	cmp	r3, r1
 8000272:	d301      	bcc.n	8000278 <__divsi3+0x4c>
 8000274:	03cb      	lsls	r3, r1, #15
 8000276:	1ac0      	subs	r0, r0, r3
 8000278:	4152      	adcs	r2, r2
 800027a:	0b83      	lsrs	r3, r0, #14
 800027c:	428b      	cmp	r3, r1
 800027e:	d301      	bcc.n	8000284 <__divsi3+0x58>
 8000280:	038b      	lsls	r3, r1, #14
 8000282:	1ac0      	subs	r0, r0, r3
 8000284:	4152      	adcs	r2, r2
 8000286:	0b43      	lsrs	r3, r0, #13
 8000288:	428b      	cmp	r3, r1
 800028a:	d301      	bcc.n	8000290 <__divsi3+0x64>
 800028c:	034b      	lsls	r3, r1, #13
 800028e:	1ac0      	subs	r0, r0, r3
 8000290:	4152      	adcs	r2, r2
 8000292:	0b03      	lsrs	r3, r0, #12
 8000294:	428b      	cmp	r3, r1
 8000296:	d301      	bcc.n	800029c <__divsi3+0x70>
 8000298:	030b      	lsls	r3, r1, #12
 800029a:	1ac0      	subs	r0, r0, r3
 800029c:	4152      	adcs	r2, r2
 800029e:	0ac3      	lsrs	r3, r0, #11
 80002a0:	428b      	cmp	r3, r1
 80002a2:	d301      	bcc.n	80002a8 <__divsi3+0x7c>
 80002a4:	02cb      	lsls	r3, r1, #11
 80002a6:	1ac0      	subs	r0, r0, r3
 80002a8:	4152      	adcs	r2, r2
 80002aa:	0a83      	lsrs	r3, r0, #10
 80002ac:	428b      	cmp	r3, r1
 80002ae:	d301      	bcc.n	80002b4 <__divsi3+0x88>
 80002b0:	028b      	lsls	r3, r1, #10
 80002b2:	1ac0      	subs	r0, r0, r3
 80002b4:	4152      	adcs	r2, r2
 80002b6:	0a43      	lsrs	r3, r0, #9
 80002b8:	428b      	cmp	r3, r1
 80002ba:	d301      	bcc.n	80002c0 <__divsi3+0x94>
 80002bc:	024b      	lsls	r3, r1, #9
 80002be:	1ac0      	subs	r0, r0, r3
 80002c0:	4152      	adcs	r2, r2
 80002c2:	0a03      	lsrs	r3, r0, #8
 80002c4:	428b      	cmp	r3, r1
 80002c6:	d301      	bcc.n	80002cc <__divsi3+0xa0>
 80002c8:	020b      	lsls	r3, r1, #8
 80002ca:	1ac0      	subs	r0, r0, r3
 80002cc:	4152      	adcs	r2, r2
 80002ce:	d2cd      	bcs.n	800026c <__divsi3+0x40>
 80002d0:	09c3      	lsrs	r3, r0, #7
 80002d2:	428b      	cmp	r3, r1
 80002d4:	d301      	bcc.n	80002da <__divsi3+0xae>
 80002d6:	01cb      	lsls	r3, r1, #7
 80002d8:	1ac0      	subs	r0, r0, r3
 80002da:	4152      	adcs	r2, r2
 80002dc:	0983      	lsrs	r3, r0, #6
 80002de:	428b      	cmp	r3, r1
 80002e0:	d301      	bcc.n	80002e6 <__divsi3+0xba>
 80002e2:	018b      	lsls	r3, r1, #6
 80002e4:	1ac0      	subs	r0, r0, r3
 80002e6:	4152      	adcs	r2, r2
 80002e8:	0943      	lsrs	r3, r0, #5
 80002ea:	428b      	cmp	r3, r1
 80002ec:	d301      	bcc.n	80002f2 <__divsi3+0xc6>
 80002ee:	014b      	lsls	r3, r1, #5
 80002f0:	1ac0      	subs	r0, r0, r3
 80002f2:	4152      	adcs	r2, r2
 80002f4:	0903      	lsrs	r3, r0, #4
 80002f6:	428b      	cmp	r3, r1
 80002f8:	d301      	bcc.n	80002fe <__divsi3+0xd2>
 80002fa:	010b      	lsls	r3, r1, #4
 80002fc:	1ac0      	subs	r0, r0, r3
 80002fe:	4152      	adcs	r2, r2
 8000300:	08c3      	lsrs	r3, r0, #3
 8000302:	428b      	cmp	r3, r1
 8000304:	d301      	bcc.n	800030a <__divsi3+0xde>
 8000306:	00cb      	lsls	r3, r1, #3
 8000308:	1ac0      	subs	r0, r0, r3
 800030a:	4152      	adcs	r2, r2
 800030c:	0883      	lsrs	r3, r0, #2
 800030e:	428b      	cmp	r3, r1
 8000310:	d301      	bcc.n	8000316 <__divsi3+0xea>
 8000312:	008b      	lsls	r3, r1, #2
 8000314:	1ac0      	subs	r0, r0, r3
 8000316:	4152      	adcs	r2, r2
 8000318:	0843      	lsrs	r3, r0, #1
 800031a:	428b      	cmp	r3, r1
 800031c:	d301      	bcc.n	8000322 <__divsi3+0xf6>
 800031e:	004b      	lsls	r3, r1, #1
 8000320:	1ac0      	subs	r0, r0, r3
 8000322:	4152      	adcs	r2, r2
 8000324:	1a41      	subs	r1, r0, r1
 8000326:	d200      	bcs.n	800032a <__divsi3+0xfe>
 8000328:	4601      	mov	r1, r0
 800032a:	4152      	adcs	r2, r2
 800032c:	4610      	mov	r0, r2
 800032e:	4770      	bx	lr
 8000330:	e05d      	b.n	80003ee <__divsi3+0x1c2>
 8000332:	0fca      	lsrs	r2, r1, #31
 8000334:	d000      	beq.n	8000338 <__divsi3+0x10c>
 8000336:	4249      	negs	r1, r1
 8000338:	1003      	asrs	r3, r0, #32
 800033a:	d300      	bcc.n	800033e <__divsi3+0x112>
 800033c:	4240      	negs	r0, r0
 800033e:	4053      	eors	r3, r2
 8000340:	2200      	movs	r2, #0
 8000342:	469c      	mov	ip, r3
 8000344:	0903      	lsrs	r3, r0, #4
 8000346:	428b      	cmp	r3, r1
 8000348:	d32d      	bcc.n	80003a6 <__divsi3+0x17a>
 800034a:	0a03      	lsrs	r3, r0, #8
 800034c:	428b      	cmp	r3, r1
 800034e:	d312      	bcc.n	8000376 <__divsi3+0x14a>
 8000350:	22fc      	movs	r2, #252	; 0xfc
 8000352:	0189      	lsls	r1, r1, #6
 8000354:	ba12      	rev	r2, r2
 8000356:	0a03      	lsrs	r3, r0, #8
 8000358:	428b      	cmp	r3, r1
 800035a:	d30c      	bcc.n	8000376 <__divsi3+0x14a>
 800035c:	0189      	lsls	r1, r1, #6
 800035e:	1192      	asrs	r2, r2, #6
 8000360:	428b      	cmp	r3, r1
 8000362:	d308      	bcc.n	8000376 <__divsi3+0x14a>
 8000364:	0189      	lsls	r1, r1, #6
 8000366:	1192      	asrs	r2, r2, #6
 8000368:	428b      	cmp	r3, r1
 800036a:	d304      	bcc.n	8000376 <__divsi3+0x14a>
 800036c:	0189      	lsls	r1, r1, #6
 800036e:	d03a      	beq.n	80003e6 <__divsi3+0x1ba>
 8000370:	1192      	asrs	r2, r2, #6
 8000372:	e000      	b.n	8000376 <__divsi3+0x14a>
 8000374:	0989      	lsrs	r1, r1, #6
 8000376:	09c3      	lsrs	r3, r0, #7
 8000378:	428b      	cmp	r3, r1
 800037a:	d301      	bcc.n	8000380 <__divsi3+0x154>
 800037c:	01cb      	lsls	r3, r1, #7
 800037e:	1ac0      	subs	r0, r0, r3
 8000380:	4152      	adcs	r2, r2
 8000382:	0983      	lsrs	r3, r0, #6
 8000384:	428b      	cmp	r3, r1
 8000386:	d301      	bcc.n	800038c <__divsi3+0x160>
 8000388:	018b      	lsls	r3, r1, #6
 800038a:	1ac0      	subs	r0, r0, r3
 800038c:	4152      	adcs	r2, r2
 800038e:	0943      	lsrs	r3, r0, #5
 8000390:	428b      	cmp	r3, r1
 8000392:	d301      	bcc.n	8000398 <__divsi3+0x16c>
 8000394:	014b      	lsls	r3, r1, #5
 8000396:	1ac0      	subs	r0, r0, r3
 8000398:	4152      	adcs	r2, r2
 800039a:	0903      	lsrs	r3, r0, #4
 800039c:	428b      	cmp	r3, r1
 800039e:	d301      	bcc.n	80003a4 <__divsi3+0x178>
 80003a0:	010b      	lsls	r3, r1, #4
 80003a2:	1ac0      	subs	r0, r0, r3
 80003a4:	4152      	adcs	r2, r2
 80003a6:	08c3      	lsrs	r3, r0, #3
 80003a8:	428b      	cmp	r3, r1
 80003aa:	d301      	bcc.n	80003b0 <__divsi3+0x184>
 80003ac:	00cb      	lsls	r3, r1, #3
 80003ae:	1ac0      	subs	r0, r0, r3
 80003b0:	4152      	adcs	r2, r2
 80003b2:	0883      	lsrs	r3, r0, #2
 80003b4:	428b      	cmp	r3, r1
 80003b6:	d301      	bcc.n	80003bc <__divsi3+0x190>
 80003b8:	008b      	lsls	r3, r1, #2
 80003ba:	1ac0      	subs	r0, r0, r3
 80003bc:	4152      	adcs	r2, r2
 80003be:	d2d9      	bcs.n	8000374 <__divsi3+0x148>
 80003c0:	0843      	lsrs	r3, r0, #1
 80003c2:	428b      	cmp	r3, r1
 80003c4:	d301      	bcc.n	80003ca <__divsi3+0x19e>
 80003c6:	004b      	lsls	r3, r1, #1
 80003c8:	1ac0      	subs	r0, r0, r3
 80003ca:	4152      	adcs	r2, r2
 80003cc:	1a41      	subs	r1, r0, r1
 80003ce:	d200      	bcs.n	80003d2 <__divsi3+0x1a6>
 80003d0:	4601      	mov	r1, r0
 80003d2:	4663      	mov	r3, ip
 80003d4:	4152      	adcs	r2, r2
 80003d6:	105b      	asrs	r3, r3, #1
 80003d8:	4610      	mov	r0, r2
 80003da:	d301      	bcc.n	80003e0 <__divsi3+0x1b4>
 80003dc:	4240      	negs	r0, r0
 80003de:	2b00      	cmp	r3, #0
 80003e0:	d500      	bpl.n	80003e4 <__divsi3+0x1b8>
 80003e2:	4249      	negs	r1, r1
 80003e4:	4770      	bx	lr
 80003e6:	4663      	mov	r3, ip
 80003e8:	105b      	asrs	r3, r3, #1
 80003ea:	d300      	bcc.n	80003ee <__divsi3+0x1c2>
 80003ec:	4240      	negs	r0, r0
 80003ee:	b501      	push	{r0, lr}
 80003f0:	2000      	movs	r0, #0
 80003f2:	f000 f805 	bl	8000400 <__aeabi_idiv0>
 80003f6:	bd02      	pop	{r1, pc}

080003f8 <__aeabi_idivmod>:
 80003f8:	2900      	cmp	r1, #0
 80003fa:	d0f8      	beq.n	80003ee <__divsi3+0x1c2>
 80003fc:	e716      	b.n	800022c <__divsi3>
 80003fe:	4770      	bx	lr

08000400 <__aeabi_idiv0>:
 8000400:	4770      	bx	lr
 8000402:	46c0      	nop			; (mov r8, r8)

08000404 <__aeabi_uldivmod>:
 8000404:	2b00      	cmp	r3, #0
 8000406:	d111      	bne.n	800042c <__aeabi_uldivmod+0x28>
 8000408:	2a00      	cmp	r2, #0
 800040a:	d10f      	bne.n	800042c <__aeabi_uldivmod+0x28>
 800040c:	2900      	cmp	r1, #0
 800040e:	d100      	bne.n	8000412 <__aeabi_uldivmod+0xe>
 8000410:	2800      	cmp	r0, #0
 8000412:	d002      	beq.n	800041a <__aeabi_uldivmod+0x16>
 8000414:	2100      	movs	r1, #0
 8000416:	43c9      	mvns	r1, r1
 8000418:	1c08      	adds	r0, r1, #0
 800041a:	b407      	push	{r0, r1, r2}
 800041c:	4802      	ldr	r0, [pc, #8]	; (8000428 <__aeabi_uldivmod+0x24>)
 800041e:	a102      	add	r1, pc, #8	; (adr r1, 8000428 <__aeabi_uldivmod+0x24>)
 8000420:	1840      	adds	r0, r0, r1
 8000422:	9002      	str	r0, [sp, #8]
 8000424:	bd03      	pop	{r0, r1, pc}
 8000426:	46c0      	nop			; (mov r8, r8)
 8000428:	ffffffd9 	.word	0xffffffd9
 800042c:	b403      	push	{r0, r1}
 800042e:	4668      	mov	r0, sp
 8000430:	b501      	push	{r0, lr}
 8000432:	9802      	ldr	r0, [sp, #8]
 8000434:	f000 f806 	bl	8000444 <__udivmoddi4>
 8000438:	9b01      	ldr	r3, [sp, #4]
 800043a:	469e      	mov	lr, r3
 800043c:	b002      	add	sp, #8
 800043e:	bc0c      	pop	{r2, r3}
 8000440:	4770      	bx	lr
 8000442:	46c0      	nop			; (mov r8, r8)

08000444 <__udivmoddi4>:
 8000444:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000446:	4657      	mov	r7, sl
 8000448:	464e      	mov	r6, r9
 800044a:	4645      	mov	r5, r8
 800044c:	46de      	mov	lr, fp
 800044e:	b5e0      	push	{r5, r6, r7, lr}
 8000450:	0004      	movs	r4, r0
 8000452:	000d      	movs	r5, r1
 8000454:	4692      	mov	sl, r2
 8000456:	4699      	mov	r9, r3
 8000458:	b083      	sub	sp, #12
 800045a:	428b      	cmp	r3, r1
 800045c:	d830      	bhi.n	80004c0 <__udivmoddi4+0x7c>
 800045e:	d02d      	beq.n	80004bc <__udivmoddi4+0x78>
 8000460:	4649      	mov	r1, r9
 8000462:	4650      	mov	r0, sl
 8000464:	f000 f8ba 	bl	80005dc <__clzdi2>
 8000468:	0029      	movs	r1, r5
 800046a:	0006      	movs	r6, r0
 800046c:	0020      	movs	r0, r4
 800046e:	f000 f8b5 	bl	80005dc <__clzdi2>
 8000472:	1a33      	subs	r3, r6, r0
 8000474:	4698      	mov	r8, r3
 8000476:	3b20      	subs	r3, #32
 8000478:	469b      	mov	fp, r3
 800047a:	d433      	bmi.n	80004e4 <__udivmoddi4+0xa0>
 800047c:	465a      	mov	r2, fp
 800047e:	4653      	mov	r3, sl
 8000480:	4093      	lsls	r3, r2
 8000482:	4642      	mov	r2, r8
 8000484:	001f      	movs	r7, r3
 8000486:	4653      	mov	r3, sl
 8000488:	4093      	lsls	r3, r2
 800048a:	001e      	movs	r6, r3
 800048c:	42af      	cmp	r7, r5
 800048e:	d83a      	bhi.n	8000506 <__udivmoddi4+0xc2>
 8000490:	42af      	cmp	r7, r5
 8000492:	d100      	bne.n	8000496 <__udivmoddi4+0x52>
 8000494:	e078      	b.n	8000588 <__udivmoddi4+0x144>
 8000496:	465b      	mov	r3, fp
 8000498:	1ba4      	subs	r4, r4, r6
 800049a:	41bd      	sbcs	r5, r7
 800049c:	2b00      	cmp	r3, #0
 800049e:	da00      	bge.n	80004a2 <__udivmoddi4+0x5e>
 80004a0:	e075      	b.n	800058e <__udivmoddi4+0x14a>
 80004a2:	2200      	movs	r2, #0
 80004a4:	2300      	movs	r3, #0
 80004a6:	9200      	str	r2, [sp, #0]
 80004a8:	9301      	str	r3, [sp, #4]
 80004aa:	2301      	movs	r3, #1
 80004ac:	465a      	mov	r2, fp
 80004ae:	4093      	lsls	r3, r2
 80004b0:	9301      	str	r3, [sp, #4]
 80004b2:	2301      	movs	r3, #1
 80004b4:	4642      	mov	r2, r8
 80004b6:	4093      	lsls	r3, r2
 80004b8:	9300      	str	r3, [sp, #0]
 80004ba:	e028      	b.n	800050e <__udivmoddi4+0xca>
 80004bc:	4282      	cmp	r2, r0
 80004be:	d9cf      	bls.n	8000460 <__udivmoddi4+0x1c>
 80004c0:	2200      	movs	r2, #0
 80004c2:	2300      	movs	r3, #0
 80004c4:	9200      	str	r2, [sp, #0]
 80004c6:	9301      	str	r3, [sp, #4]
 80004c8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80004ca:	2b00      	cmp	r3, #0
 80004cc:	d001      	beq.n	80004d2 <__udivmoddi4+0x8e>
 80004ce:	601c      	str	r4, [r3, #0]
 80004d0:	605d      	str	r5, [r3, #4]
 80004d2:	9800      	ldr	r0, [sp, #0]
 80004d4:	9901      	ldr	r1, [sp, #4]
 80004d6:	b003      	add	sp, #12
 80004d8:	bcf0      	pop	{r4, r5, r6, r7}
 80004da:	46bb      	mov	fp, r7
 80004dc:	46b2      	mov	sl, r6
 80004de:	46a9      	mov	r9, r5
 80004e0:	46a0      	mov	r8, r4
 80004e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80004e4:	4642      	mov	r2, r8
 80004e6:	2320      	movs	r3, #32
 80004e8:	1a9b      	subs	r3, r3, r2
 80004ea:	4652      	mov	r2, sl
 80004ec:	40da      	lsrs	r2, r3
 80004ee:	4641      	mov	r1, r8
 80004f0:	0013      	movs	r3, r2
 80004f2:	464a      	mov	r2, r9
 80004f4:	408a      	lsls	r2, r1
 80004f6:	0017      	movs	r7, r2
 80004f8:	4642      	mov	r2, r8
 80004fa:	431f      	orrs	r7, r3
 80004fc:	4653      	mov	r3, sl
 80004fe:	4093      	lsls	r3, r2
 8000500:	001e      	movs	r6, r3
 8000502:	42af      	cmp	r7, r5
 8000504:	d9c4      	bls.n	8000490 <__udivmoddi4+0x4c>
 8000506:	2200      	movs	r2, #0
 8000508:	2300      	movs	r3, #0
 800050a:	9200      	str	r2, [sp, #0]
 800050c:	9301      	str	r3, [sp, #4]
 800050e:	4643      	mov	r3, r8
 8000510:	2b00      	cmp	r3, #0
 8000512:	d0d9      	beq.n	80004c8 <__udivmoddi4+0x84>
 8000514:	07fb      	lsls	r3, r7, #31
 8000516:	0872      	lsrs	r2, r6, #1
 8000518:	431a      	orrs	r2, r3
 800051a:	4646      	mov	r6, r8
 800051c:	087b      	lsrs	r3, r7, #1
 800051e:	e00e      	b.n	800053e <__udivmoddi4+0xfa>
 8000520:	42ab      	cmp	r3, r5
 8000522:	d101      	bne.n	8000528 <__udivmoddi4+0xe4>
 8000524:	42a2      	cmp	r2, r4
 8000526:	d80c      	bhi.n	8000542 <__udivmoddi4+0xfe>
 8000528:	1aa4      	subs	r4, r4, r2
 800052a:	419d      	sbcs	r5, r3
 800052c:	2001      	movs	r0, #1
 800052e:	1924      	adds	r4, r4, r4
 8000530:	416d      	adcs	r5, r5
 8000532:	2100      	movs	r1, #0
 8000534:	3e01      	subs	r6, #1
 8000536:	1824      	adds	r4, r4, r0
 8000538:	414d      	adcs	r5, r1
 800053a:	2e00      	cmp	r6, #0
 800053c:	d006      	beq.n	800054c <__udivmoddi4+0x108>
 800053e:	42ab      	cmp	r3, r5
 8000540:	d9ee      	bls.n	8000520 <__udivmoddi4+0xdc>
 8000542:	3e01      	subs	r6, #1
 8000544:	1924      	adds	r4, r4, r4
 8000546:	416d      	adcs	r5, r5
 8000548:	2e00      	cmp	r6, #0
 800054a:	d1f8      	bne.n	800053e <__udivmoddi4+0xfa>
 800054c:	9800      	ldr	r0, [sp, #0]
 800054e:	9901      	ldr	r1, [sp, #4]
 8000550:	465b      	mov	r3, fp
 8000552:	1900      	adds	r0, r0, r4
 8000554:	4169      	adcs	r1, r5
 8000556:	2b00      	cmp	r3, #0
 8000558:	db24      	blt.n	80005a4 <__udivmoddi4+0x160>
 800055a:	002b      	movs	r3, r5
 800055c:	465a      	mov	r2, fp
 800055e:	4644      	mov	r4, r8
 8000560:	40d3      	lsrs	r3, r2
 8000562:	002a      	movs	r2, r5
 8000564:	40e2      	lsrs	r2, r4
 8000566:	001c      	movs	r4, r3
 8000568:	465b      	mov	r3, fp
 800056a:	0015      	movs	r5, r2
 800056c:	2b00      	cmp	r3, #0
 800056e:	db2a      	blt.n	80005c6 <__udivmoddi4+0x182>
 8000570:	0026      	movs	r6, r4
 8000572:	409e      	lsls	r6, r3
 8000574:	0033      	movs	r3, r6
 8000576:	0026      	movs	r6, r4
 8000578:	4647      	mov	r7, r8
 800057a:	40be      	lsls	r6, r7
 800057c:	0032      	movs	r2, r6
 800057e:	1a80      	subs	r0, r0, r2
 8000580:	4199      	sbcs	r1, r3
 8000582:	9000      	str	r0, [sp, #0]
 8000584:	9101      	str	r1, [sp, #4]
 8000586:	e79f      	b.n	80004c8 <__udivmoddi4+0x84>
 8000588:	42a3      	cmp	r3, r4
 800058a:	d8bc      	bhi.n	8000506 <__udivmoddi4+0xc2>
 800058c:	e783      	b.n	8000496 <__udivmoddi4+0x52>
 800058e:	4642      	mov	r2, r8
 8000590:	2320      	movs	r3, #32
 8000592:	2100      	movs	r1, #0
 8000594:	1a9b      	subs	r3, r3, r2
 8000596:	2200      	movs	r2, #0
 8000598:	9100      	str	r1, [sp, #0]
 800059a:	9201      	str	r2, [sp, #4]
 800059c:	2201      	movs	r2, #1
 800059e:	40da      	lsrs	r2, r3
 80005a0:	9201      	str	r2, [sp, #4]
 80005a2:	e786      	b.n	80004b2 <__udivmoddi4+0x6e>
 80005a4:	4642      	mov	r2, r8
 80005a6:	2320      	movs	r3, #32
 80005a8:	1a9b      	subs	r3, r3, r2
 80005aa:	002a      	movs	r2, r5
 80005ac:	4646      	mov	r6, r8
 80005ae:	409a      	lsls	r2, r3
 80005b0:	0023      	movs	r3, r4
 80005b2:	40f3      	lsrs	r3, r6
 80005b4:	4644      	mov	r4, r8
 80005b6:	4313      	orrs	r3, r2
 80005b8:	002a      	movs	r2, r5
 80005ba:	40e2      	lsrs	r2, r4
 80005bc:	001c      	movs	r4, r3
 80005be:	465b      	mov	r3, fp
 80005c0:	0015      	movs	r5, r2
 80005c2:	2b00      	cmp	r3, #0
 80005c4:	dad4      	bge.n	8000570 <__udivmoddi4+0x12c>
 80005c6:	4642      	mov	r2, r8
 80005c8:	002f      	movs	r7, r5
 80005ca:	2320      	movs	r3, #32
 80005cc:	0026      	movs	r6, r4
 80005ce:	4097      	lsls	r7, r2
 80005d0:	1a9b      	subs	r3, r3, r2
 80005d2:	40de      	lsrs	r6, r3
 80005d4:	003b      	movs	r3, r7
 80005d6:	4333      	orrs	r3, r6
 80005d8:	e7cd      	b.n	8000576 <__udivmoddi4+0x132>
 80005da:	46c0      	nop			; (mov r8, r8)

080005dc <__clzdi2>:
 80005dc:	b510      	push	{r4, lr}
 80005de:	2900      	cmp	r1, #0
 80005e0:	d103      	bne.n	80005ea <__clzdi2+0xe>
 80005e2:	f000 f807 	bl	80005f4 <__clzsi2>
 80005e6:	3020      	adds	r0, #32
 80005e8:	e002      	b.n	80005f0 <__clzdi2+0x14>
 80005ea:	1c08      	adds	r0, r1, #0
 80005ec:	f000 f802 	bl	80005f4 <__clzsi2>
 80005f0:	bd10      	pop	{r4, pc}
 80005f2:	46c0      	nop			; (mov r8, r8)

080005f4 <__clzsi2>:
 80005f4:	211c      	movs	r1, #28
 80005f6:	2301      	movs	r3, #1
 80005f8:	041b      	lsls	r3, r3, #16
 80005fa:	4298      	cmp	r0, r3
 80005fc:	d301      	bcc.n	8000602 <__clzsi2+0xe>
 80005fe:	0c00      	lsrs	r0, r0, #16
 8000600:	3910      	subs	r1, #16
 8000602:	0a1b      	lsrs	r3, r3, #8
 8000604:	4298      	cmp	r0, r3
 8000606:	d301      	bcc.n	800060c <__clzsi2+0x18>
 8000608:	0a00      	lsrs	r0, r0, #8
 800060a:	3908      	subs	r1, #8
 800060c:	091b      	lsrs	r3, r3, #4
 800060e:	4298      	cmp	r0, r3
 8000610:	d301      	bcc.n	8000616 <__clzsi2+0x22>
 8000612:	0900      	lsrs	r0, r0, #4
 8000614:	3904      	subs	r1, #4
 8000616:	a202      	add	r2, pc, #8	; (adr r2, 8000620 <__clzsi2+0x2c>)
 8000618:	5c10      	ldrb	r0, [r2, r0]
 800061a:	1840      	adds	r0, r0, r1
 800061c:	4770      	bx	lr
 800061e:	46c0      	nop			; (mov r8, r8)
 8000620:	02020304 	.word	0x02020304
 8000624:	01010101 	.word	0x01010101
	...

08000630 <SCL_Delay>:
 */

#include "IIC.h"
#include "stm32g0xx_hal.h"

void SCL_Delay(uint8_t t) {
 8000630:	b580      	push	{r7, lr}
 8000632:	b084      	sub	sp, #16
 8000634:	af00      	add	r7, sp, #0
 8000636:	0002      	movs	r2, r0
 8000638:	1dfb      	adds	r3, r7, #7
 800063a:	701a      	strb	r2, [r3, #0]
	/* counter reset to 0x00, TOF is cleared*/
	unsigned int i;
	for (i = 0; i < 30; i++) {
 800063c:	2300      	movs	r3, #0
 800063e:	60fb      	str	r3, [r7, #12]
 8000640:	e003      	b.n	800064a <SCL_Delay+0x1a>
		asm("NOP");
 8000642:	46c0      	nop			; (mov r8, r8)
	for (i = 0; i < 30; i++) {
 8000644:	68fb      	ldr	r3, [r7, #12]
 8000646:	3301      	adds	r3, #1
 8000648:	60fb      	str	r3, [r7, #12]
 800064a:	68fb      	ldr	r3, [r7, #12]
 800064c:	2b1d      	cmp	r3, #29
 800064e:	d9f8      	bls.n	8000642 <SCL_Delay+0x12>
	}
}
 8000650:	46c0      	nop			; (mov r8, r8)
 8000652:	46c0      	nop			; (mov r8, r8)
 8000654:	46bd      	mov	sp, r7
 8000656:	b004      	add	sp, #16
 8000658:	bd80      	pop	{r7, pc}
	...

0800065c <IIC_Start>:

	IIC_SCL(1);
	IIC_SDA(1);
}
// produce IIC Start signal
void IIC_Start(void) {
 800065c:	b580      	push	{r7, lr}
 800065e:	af00      	add	r7, sp, #0

	SDA_OUT();     //sda Line out
 8000660:	4b10      	ldr	r3, [pc, #64]	; (80006a4 <IIC_Start+0x48>)
 8000662:	681a      	ldr	r2, [r3, #0]
 8000664:	4b0f      	ldr	r3, [pc, #60]	; (80006a4 <IIC_Start+0x48>)
 8000666:	4910      	ldr	r1, [pc, #64]	; (80006a8 <IIC_Start+0x4c>)
 8000668:	400a      	ands	r2, r1
 800066a:	601a      	str	r2, [r3, #0]
 800066c:	4b0d      	ldr	r3, [pc, #52]	; (80006a4 <IIC_Start+0x48>)
 800066e:	681a      	ldr	r2, [r3, #0]
 8000670:	4b0c      	ldr	r3, [pc, #48]	; (80006a4 <IIC_Start+0x48>)
 8000672:	2180      	movs	r1, #128	; 0x80
 8000674:	01c9      	lsls	r1, r1, #7
 8000676:	430a      	orrs	r2, r1
 8000678:	601a      	str	r2, [r3, #0]
	IIC_SDA(1);
 800067a:	2001      	movs	r0, #1
 800067c:	f000 f980 	bl	8000980 <IIC_SDA>
	IIC_SCL(1);
 8000680:	2001      	movs	r0, #1
 8000682:	f000 f95b 	bl	800093c <IIC_SCL>
	SCL_Delay(4);
 8000686:	2004      	movs	r0, #4
 8000688:	f7ff ffd2 	bl	8000630 <SCL_Delay>
	IIC_SDA(0);     //START:when CLK is high,DATA change form high to low
 800068c:	2000      	movs	r0, #0
 800068e:	f000 f977 	bl	8000980 <IIC_SDA>
	SCL_Delay(4);
 8000692:	2004      	movs	r0, #4
 8000694:	f7ff ffcc 	bl	8000630 <SCL_Delay>
	IIC_SCL(0);     // Hold on I2C Bus , Ready to send or receive data
 8000698:	2000      	movs	r0, #0
 800069a:	f000 f94f 	bl	800093c <IIC_SCL>
}
 800069e:	46c0      	nop			; (mov r8, r8)
 80006a0:	46bd      	mov	sp, r7
 80006a2:	bd80      	pop	{r7, pc}
 80006a4:	50000800 	.word	0x50000800
 80006a8:	ffff7fff 	.word	0xffff7fff

080006ac <IIC_Stop>:
// produce IIC Stop signal
void IIC_Stop(void) {
 80006ac:	b580      	push	{r7, lr}
 80006ae:	af00      	add	r7, sp, #0

	SDA_OUT();     //sda Line out
 80006b0:	4b10      	ldr	r3, [pc, #64]	; (80006f4 <IIC_Stop+0x48>)
 80006b2:	681a      	ldr	r2, [r3, #0]
 80006b4:	4b0f      	ldr	r3, [pc, #60]	; (80006f4 <IIC_Stop+0x48>)
 80006b6:	4910      	ldr	r1, [pc, #64]	; (80006f8 <IIC_Stop+0x4c>)
 80006b8:	400a      	ands	r2, r1
 80006ba:	601a      	str	r2, [r3, #0]
 80006bc:	4b0d      	ldr	r3, [pc, #52]	; (80006f4 <IIC_Stop+0x48>)
 80006be:	681a      	ldr	r2, [r3, #0]
 80006c0:	4b0c      	ldr	r3, [pc, #48]	; (80006f4 <IIC_Stop+0x48>)
 80006c2:	2180      	movs	r1, #128	; 0x80
 80006c4:	01c9      	lsls	r1, r1, #7
 80006c6:	430a      	orrs	r2, r1
 80006c8:	601a      	str	r2, [r3, #0]
	IIC_SCL(0);
 80006ca:	2000      	movs	r0, #0
 80006cc:	f000 f936 	bl	800093c <IIC_SCL>
	IIC_SDA(0);     //STOP:when CLK is high DATA change form low to high
 80006d0:	2000      	movs	r0, #0
 80006d2:	f000 f955 	bl	8000980 <IIC_SDA>
	SCL_Delay(4);
 80006d6:	2004      	movs	r0, #4
 80006d8:	f7ff ffaa 	bl	8000630 <SCL_Delay>
	IIC_SCL(1);
 80006dc:	2001      	movs	r0, #1
 80006de:	f000 f92d 	bl	800093c <IIC_SCL>
	IIC_SDA(1);     // send out I2C Bus end signal
 80006e2:	2001      	movs	r0, #1
 80006e4:	f000 f94c 	bl	8000980 <IIC_SDA>
	SCL_Delay(4);
 80006e8:	2004      	movs	r0, #4
 80006ea:	f7ff ffa1 	bl	8000630 <SCL_Delay>
}
 80006ee:	46c0      	nop			; (mov r8, r8)
 80006f0:	46bd      	mov	sp, r7
 80006f2:	bd80      	pop	{r7, pc}
 80006f4:	50000800 	.word	0x50000800
 80006f8:	ffff7fff 	.word	0xffff7fff

080006fc <IIC_Wait_Ack>:
// Waiting for the answer signal to arrive
// Return value ：1, Failed to receive response
//        0, Received response successfully
uint8_t IIC_Wait_Ack(void) {
 80006fc:	b580      	push	{r7, lr}
 80006fe:	b082      	sub	sp, #8
 8000700:	af00      	add	r7, sp, #0

	uint8_t ucErrTime = 0;
 8000702:	1dfb      	adds	r3, r7, #7
 8000704:	2200      	movs	r2, #0
 8000706:	701a      	strb	r2, [r3, #0]
	SDA_IN();      //SDA Set to input
 8000708:	4b15      	ldr	r3, [pc, #84]	; (8000760 <IIC_Wait_Ack+0x64>)
 800070a:	681a      	ldr	r2, [r3, #0]
 800070c:	4b14      	ldr	r3, [pc, #80]	; (8000760 <IIC_Wait_Ack+0x64>)
 800070e:	4915      	ldr	r1, [pc, #84]	; (8000764 <IIC_Wait_Ack+0x68>)
 8000710:	400a      	ands	r2, r1
 8000712:	601a      	str	r2, [r3, #0]
	IIC_SDA(1);
 8000714:	2001      	movs	r0, #1
 8000716:	f000 f933 	bl	8000980 <IIC_SDA>
	SCL_Delay(1);
 800071a:	2001      	movs	r0, #1
 800071c:	f7ff ff88 	bl	8000630 <SCL_Delay>
	IIC_SCL(1);
 8000720:	2001      	movs	r0, #1
 8000722:	f000 f90b 	bl	800093c <IIC_SCL>
	SCL_Delay(1);
 8000726:	2001      	movs	r0, #1
 8000728:	f7ff ff82 	bl	8000630 <SCL_Delay>
	while (READ_SDA()) {
 800072c:	e00c      	b.n	8000748 <IIC_Wait_Ack+0x4c>

		ucErrTime++;
 800072e:	1dfb      	adds	r3, r7, #7
 8000730:	781a      	ldrb	r2, [r3, #0]
 8000732:	1dfb      	adds	r3, r7, #7
 8000734:	3201      	adds	r2, #1
 8000736:	701a      	strb	r2, [r3, #0]
		if (ucErrTime > 250) {
 8000738:	1dfb      	adds	r3, r7, #7
 800073a:	781b      	ldrb	r3, [r3, #0]
 800073c:	2bfa      	cmp	r3, #250	; 0xfa
 800073e:	d903      	bls.n	8000748 <IIC_Wait_Ack+0x4c>

			IIC_Stop();
 8000740:	f7ff ffb4 	bl	80006ac <IIC_Stop>
			return 1;
 8000744:	2301      	movs	r3, #1
 8000746:	e007      	b.n	8000758 <IIC_Wait_Ack+0x5c>
	while (READ_SDA()) {
 8000748:	f000 f938 	bl	80009bc <READ_SDA>
 800074c:	1e03      	subs	r3, r0, #0
 800074e:	d1ee      	bne.n	800072e <IIC_Wait_Ack+0x32>
		}
	}
	IIC_SCL(0);      // Clock output 0
 8000750:	2000      	movs	r0, #0
 8000752:	f000 f8f3 	bl	800093c <IIC_SCL>
	return 0;
 8000756:	2300      	movs	r3, #0
}
 8000758:	0018      	movs	r0, r3
 800075a:	46bd      	mov	sp, r7
 800075c:	b002      	add	sp, #8
 800075e:	bd80      	pop	{r7, pc}
 8000760:	50000800 	.word	0x50000800
 8000764:	ffff3fff 	.word	0xffff3fff

08000768 <IIC_Ack>:
// produce ACK The reply
void IIC_Ack(void) {
 8000768:	b580      	push	{r7, lr}
 800076a:	af00      	add	r7, sp, #0

	IIC_SCL(0);
 800076c:	2000      	movs	r0, #0
 800076e:	f000 f8e5 	bl	800093c <IIC_SCL>
	SDA_OUT();
 8000772:	4b0f      	ldr	r3, [pc, #60]	; (80007b0 <IIC_Ack+0x48>)
 8000774:	681a      	ldr	r2, [r3, #0]
 8000776:	4b0e      	ldr	r3, [pc, #56]	; (80007b0 <IIC_Ack+0x48>)
 8000778:	490e      	ldr	r1, [pc, #56]	; (80007b4 <IIC_Ack+0x4c>)
 800077a:	400a      	ands	r2, r1
 800077c:	601a      	str	r2, [r3, #0]
 800077e:	4b0c      	ldr	r3, [pc, #48]	; (80007b0 <IIC_Ack+0x48>)
 8000780:	681a      	ldr	r2, [r3, #0]
 8000782:	4b0b      	ldr	r3, [pc, #44]	; (80007b0 <IIC_Ack+0x48>)
 8000784:	2180      	movs	r1, #128	; 0x80
 8000786:	01c9      	lsls	r1, r1, #7
 8000788:	430a      	orrs	r2, r1
 800078a:	601a      	str	r2, [r3, #0]
	IIC_SDA(0);
 800078c:	2000      	movs	r0, #0
 800078e:	f000 f8f7 	bl	8000980 <IIC_SDA>
	SCL_Delay(2);
 8000792:	2002      	movs	r0, #2
 8000794:	f7ff ff4c 	bl	8000630 <SCL_Delay>
	IIC_SCL(1);
 8000798:	2001      	movs	r0, #1
 800079a:	f000 f8cf 	bl	800093c <IIC_SCL>
	SCL_Delay(2);
 800079e:	2002      	movs	r0, #2
 80007a0:	f7ff ff46 	bl	8000630 <SCL_Delay>
	IIC_SCL(0);
 80007a4:	2000      	movs	r0, #0
 80007a6:	f000 f8c9 	bl	800093c <IIC_SCL>
}
 80007aa:	46c0      	nop			; (mov r8, r8)
 80007ac:	46bd      	mov	sp, r7
 80007ae:	bd80      	pop	{r7, pc}
 80007b0:	50000800 	.word	0x50000800
 80007b4:	ffff7fff 	.word	0xffff7fff

080007b8 <IIC_NAck>:
// Do not produce ACK The reply
void IIC_NAck(void) {
 80007b8:	b580      	push	{r7, lr}
 80007ba:	af00      	add	r7, sp, #0

	IIC_SCL(0);
 80007bc:	2000      	movs	r0, #0
 80007be:	f000 f8bd 	bl	800093c <IIC_SCL>
	SDA_OUT();
 80007c2:	4b0f      	ldr	r3, [pc, #60]	; (8000800 <IIC_NAck+0x48>)
 80007c4:	681a      	ldr	r2, [r3, #0]
 80007c6:	4b0e      	ldr	r3, [pc, #56]	; (8000800 <IIC_NAck+0x48>)
 80007c8:	490e      	ldr	r1, [pc, #56]	; (8000804 <IIC_NAck+0x4c>)
 80007ca:	400a      	ands	r2, r1
 80007cc:	601a      	str	r2, [r3, #0]
 80007ce:	4b0c      	ldr	r3, [pc, #48]	; (8000800 <IIC_NAck+0x48>)
 80007d0:	681a      	ldr	r2, [r3, #0]
 80007d2:	4b0b      	ldr	r3, [pc, #44]	; (8000800 <IIC_NAck+0x48>)
 80007d4:	2180      	movs	r1, #128	; 0x80
 80007d6:	01c9      	lsls	r1, r1, #7
 80007d8:	430a      	orrs	r2, r1
 80007da:	601a      	str	r2, [r3, #0]
	IIC_SDA(1);
 80007dc:	2001      	movs	r0, #1
 80007de:	f000 f8cf 	bl	8000980 <IIC_SDA>
	SCL_Delay(2);
 80007e2:	2002      	movs	r0, #2
 80007e4:	f7ff ff24 	bl	8000630 <SCL_Delay>
	IIC_SCL(1);
 80007e8:	2001      	movs	r0, #1
 80007ea:	f000 f8a7 	bl	800093c <IIC_SCL>
	SCL_Delay(2);
 80007ee:	2002      	movs	r0, #2
 80007f0:	f7ff ff1e 	bl	8000630 <SCL_Delay>
	IIC_SCL(0);
 80007f4:	2000      	movs	r0, #0
 80007f6:	f000 f8a1 	bl	800093c <IIC_SCL>
}
 80007fa:	46c0      	nop			; (mov r8, r8)
 80007fc:	46bd      	mov	sp, r7
 80007fe:	bd80      	pop	{r7, pc}
 8000800:	50000800 	.word	0x50000800
 8000804:	ffff7fff 	.word	0xffff7fff

08000808 <IIC_Send_Byte>:
//IIC Send a byte
// Return whether the slave has a response
//1, There's a response
//0, No response
void IIC_Send_Byte(uint8_t txd) {
 8000808:	b580      	push	{r7, lr}
 800080a:	b084      	sub	sp, #16
 800080c:	af00      	add	r7, sp, #0
 800080e:	0002      	movs	r2, r0
 8000810:	1dfb      	adds	r3, r7, #7
 8000812:	701a      	strb	r2, [r3, #0]

	uint8_t t;
	SDA_OUT();
 8000814:	4b1f      	ldr	r3, [pc, #124]	; (8000894 <IIC_Send_Byte+0x8c>)
 8000816:	681a      	ldr	r2, [r3, #0]
 8000818:	4b1e      	ldr	r3, [pc, #120]	; (8000894 <IIC_Send_Byte+0x8c>)
 800081a:	491f      	ldr	r1, [pc, #124]	; (8000898 <IIC_Send_Byte+0x90>)
 800081c:	400a      	ands	r2, r1
 800081e:	601a      	str	r2, [r3, #0]
 8000820:	4b1c      	ldr	r3, [pc, #112]	; (8000894 <IIC_Send_Byte+0x8c>)
 8000822:	681a      	ldr	r2, [r3, #0]
 8000824:	4b1b      	ldr	r3, [pc, #108]	; (8000894 <IIC_Send_Byte+0x8c>)
 8000826:	2180      	movs	r1, #128	; 0x80
 8000828:	01c9      	lsls	r1, r1, #7
 800082a:	430a      	orrs	r2, r1
 800082c:	601a      	str	r2, [r3, #0]
	IIC_SCL(0);      // Pull down the clock and start data transmission
 800082e:	2000      	movs	r0, #0
 8000830:	f000 f884 	bl	800093c <IIC_SCL>
	for (t = 0; t < 8; t++) {
 8000834:	230f      	movs	r3, #15
 8000836:	18fb      	adds	r3, r7, r3
 8000838:	2200      	movs	r2, #0
 800083a:	701a      	strb	r2, [r3, #0]
 800083c:	e020      	b.n	8000880 <IIC_Send_Byte+0x78>

		IIC_SDA((txd & 0x80) >> 7);
 800083e:	1dfb      	adds	r3, r7, #7
 8000840:	781b      	ldrb	r3, [r3, #0]
 8000842:	09db      	lsrs	r3, r3, #7
 8000844:	b2db      	uxtb	r3, r3
 8000846:	0018      	movs	r0, r3
 8000848:	f000 f89a 	bl	8000980 <IIC_SDA>
		txd <<= 1;
 800084c:	1dfa      	adds	r2, r7, #7
 800084e:	1dfb      	adds	r3, r7, #7
 8000850:	781b      	ldrb	r3, [r3, #0]
 8000852:	18db      	adds	r3, r3, r3
 8000854:	7013      	strb	r3, [r2, #0]
		SCL_Delay(2);   // Yes TEA5767 All three delays are necessary
 8000856:	2002      	movs	r0, #2
 8000858:	f7ff feea 	bl	8000630 <SCL_Delay>
		IIC_SCL(1);
 800085c:	2001      	movs	r0, #1
 800085e:	f000 f86d 	bl	800093c <IIC_SCL>
		SCL_Delay(2);
 8000862:	2002      	movs	r0, #2
 8000864:	f7ff fee4 	bl	8000630 <SCL_Delay>
		IIC_SCL(0);
 8000868:	2000      	movs	r0, #0
 800086a:	f000 f867 	bl	800093c <IIC_SCL>
		SCL_Delay(2);
 800086e:	2002      	movs	r0, #2
 8000870:	f7ff fede 	bl	8000630 <SCL_Delay>
	for (t = 0; t < 8; t++) {
 8000874:	210f      	movs	r1, #15
 8000876:	187b      	adds	r3, r7, r1
 8000878:	781a      	ldrb	r2, [r3, #0]
 800087a:	187b      	adds	r3, r7, r1
 800087c:	3201      	adds	r2, #1
 800087e:	701a      	strb	r2, [r3, #0]
 8000880:	230f      	movs	r3, #15
 8000882:	18fb      	adds	r3, r7, r3
 8000884:	781b      	ldrb	r3, [r3, #0]
 8000886:	2b07      	cmp	r3, #7
 8000888:	d9d9      	bls.n	800083e <IIC_Send_Byte+0x36>
	}
}
 800088a:	46c0      	nop			; (mov r8, r8)
 800088c:	46c0      	nop			; (mov r8, r8)
 800088e:	46bd      	mov	sp, r7
 8000890:	b004      	add	sp, #16
 8000892:	bd80      	pop	{r7, pc}
 8000894:	50000800 	.word	0x50000800
 8000898:	ffff7fff 	.word	0xffff7fff

0800089c <IIC_Read_Byte>:
// read 1 Bytes ,ack=1 when , send out ACK,ack=0, send out nACK
uint8_t IIC_Read_Byte(unsigned char ack) {
 800089c:	b590      	push	{r4, r7, lr}
 800089e:	b085      	sub	sp, #20
 80008a0:	af00      	add	r7, sp, #0
 80008a2:	0002      	movs	r2, r0
 80008a4:	1dfb      	adds	r3, r7, #7
 80008a6:	701a      	strb	r2, [r3, #0]

	unsigned char i, receive = 0;
 80008a8:	230e      	movs	r3, #14
 80008aa:	18fb      	adds	r3, r7, r3
 80008ac:	2200      	movs	r2, #0
 80008ae:	701a      	strb	r2, [r3, #0]
	SDA_IN();   //SDA Set to input
 80008b0:	4b20      	ldr	r3, [pc, #128]	; (8000934 <IIC_Read_Byte+0x98>)
 80008b2:	681a      	ldr	r2, [r3, #0]
 80008b4:	4b1f      	ldr	r3, [pc, #124]	; (8000934 <IIC_Read_Byte+0x98>)
 80008b6:	4920      	ldr	r1, [pc, #128]	; (8000938 <IIC_Read_Byte+0x9c>)
 80008b8:	400a      	ands	r2, r1
 80008ba:	601a      	str	r2, [r3, #0]
	for (i = 0; i < 8; i++) {
 80008bc:	230f      	movs	r3, #15
 80008be:	18fb      	adds	r3, r7, r3
 80008c0:	2200      	movs	r2, #0
 80008c2:	701a      	strb	r2, [r3, #0]
 80008c4:	e020      	b.n	8000908 <IIC_Read_Byte+0x6c>

		IIC_SCL(0);
 80008c6:	2000      	movs	r0, #0
 80008c8:	f000 f838 	bl	800093c <IIC_SCL>
		SCL_Delay(2);
 80008cc:	2002      	movs	r0, #2
 80008ce:	f7ff feaf 	bl	8000630 <SCL_Delay>
		IIC_SCL(1);
 80008d2:	2001      	movs	r0, #1
 80008d4:	f000 f832 	bl	800093c <IIC_SCL>
		receive <<= 1;
 80008d8:	240e      	movs	r4, #14
 80008da:	193a      	adds	r2, r7, r4
 80008dc:	193b      	adds	r3, r7, r4
 80008de:	781b      	ldrb	r3, [r3, #0]
 80008e0:	18db      	adds	r3, r3, r3
 80008e2:	7013      	strb	r3, [r2, #0]
		if (READ_SDA())
 80008e4:	f000 f86a 	bl	80009bc <READ_SDA>
 80008e8:	1e03      	subs	r3, r0, #0
 80008ea:	d004      	beq.n	80008f6 <IIC_Read_Byte+0x5a>
			receive++;
 80008ec:	193b      	adds	r3, r7, r4
 80008ee:	781a      	ldrb	r2, [r3, #0]
 80008f0:	193b      	adds	r3, r7, r4
 80008f2:	3201      	adds	r2, #1
 80008f4:	701a      	strb	r2, [r3, #0]
		SCL_Delay(1);
 80008f6:	2001      	movs	r0, #1
 80008f8:	f7ff fe9a 	bl	8000630 <SCL_Delay>
	for (i = 0; i < 8; i++) {
 80008fc:	210f      	movs	r1, #15
 80008fe:	187b      	adds	r3, r7, r1
 8000900:	781a      	ldrb	r2, [r3, #0]
 8000902:	187b      	adds	r3, r7, r1
 8000904:	3201      	adds	r2, #1
 8000906:	701a      	strb	r2, [r3, #0]
 8000908:	230f      	movs	r3, #15
 800090a:	18fb      	adds	r3, r7, r3
 800090c:	781b      	ldrb	r3, [r3, #0]
 800090e:	2b07      	cmp	r3, #7
 8000910:	d9d9      	bls.n	80008c6 <IIC_Read_Byte+0x2a>
	}
	if (!ack)
 8000912:	1dfb      	adds	r3, r7, #7
 8000914:	781b      	ldrb	r3, [r3, #0]
 8000916:	2b00      	cmp	r3, #0
 8000918:	d102      	bne.n	8000920 <IIC_Read_Byte+0x84>
		IIC_NAck();   // send out nACK
 800091a:	f7ff ff4d 	bl	80007b8 <IIC_NAck>
 800091e:	e001      	b.n	8000924 <IIC_Read_Byte+0x88>
	else
		IIC_Ack(); // send out ACK
 8000920:	f7ff ff22 	bl	8000768 <IIC_Ack>
	return receive;
 8000924:	230e      	movs	r3, #14
 8000926:	18fb      	adds	r3, r7, r3
 8000928:	781b      	ldrb	r3, [r3, #0]
}
 800092a:	0018      	movs	r0, r3
 800092c:	46bd      	mov	sp, r7
 800092e:	b005      	add	sp, #20
 8000930:	bd90      	pop	{r4, r7, pc}
 8000932:	46c0      	nop			; (mov r8, r8)
 8000934:	50000800 	.word	0x50000800
 8000938:	ffff3fff 	.word	0xffff3fff

0800093c <IIC_SCL>:

void IIC_SCL(uint8_t val) {
 800093c:	b580      	push	{r7, lr}
 800093e:	b082      	sub	sp, #8
 8000940:	af00      	add	r7, sp, #0
 8000942:	0002      	movs	r2, r0
 8000944:	1dfb      	adds	r3, r7, #7
 8000946:	701a      	strb	r2, [r3, #0]
	if (val) {
 8000948:	1dfb      	adds	r3, r7, #7
 800094a:	781b      	ldrb	r3, [r3, #0]
 800094c:	2b00      	cmp	r3, #0
 800094e:	d009      	beq.n	8000964 <IIC_SCL+0x28>
		GPIOA->ODR |= (1 << 9);
 8000950:	23a0      	movs	r3, #160	; 0xa0
 8000952:	05db      	lsls	r3, r3, #23
 8000954:	695a      	ldr	r2, [r3, #20]
 8000956:	23a0      	movs	r3, #160	; 0xa0
 8000958:	05db      	lsls	r3, r3, #23
 800095a:	2180      	movs	r1, #128	; 0x80
 800095c:	0089      	lsls	r1, r1, #2
 800095e:	430a      	orrs	r2, r1
 8000960:	615a      	str	r2, [r3, #20]
	} else {
		GPIOA->ODR &= ~(1 << 9);
	}

}
 8000962:	e007      	b.n	8000974 <IIC_SCL+0x38>
		GPIOA->ODR &= ~(1 << 9);
 8000964:	23a0      	movs	r3, #160	; 0xa0
 8000966:	05db      	lsls	r3, r3, #23
 8000968:	695a      	ldr	r2, [r3, #20]
 800096a:	23a0      	movs	r3, #160	; 0xa0
 800096c:	05db      	lsls	r3, r3, #23
 800096e:	4903      	ldr	r1, [pc, #12]	; (800097c <IIC_SCL+0x40>)
 8000970:	400a      	ands	r2, r1
 8000972:	615a      	str	r2, [r3, #20]
}
 8000974:	46c0      	nop			; (mov r8, r8)
 8000976:	46bd      	mov	sp, r7
 8000978:	b002      	add	sp, #8
 800097a:	bd80      	pop	{r7, pc}
 800097c:	fffffdff 	.word	0xfffffdff

08000980 <IIC_SDA>:
void IIC_SDA(uint8_t val) {
 8000980:	b580      	push	{r7, lr}
 8000982:	b082      	sub	sp, #8
 8000984:	af00      	add	r7, sp, #0
 8000986:	0002      	movs	r2, r0
 8000988:	1dfb      	adds	r3, r7, #7
 800098a:	701a      	strb	r2, [r3, #0]
	if (val) {
 800098c:	1dfb      	adds	r3, r7, #7
 800098e:	781b      	ldrb	r3, [r3, #0]
 8000990:	2b00      	cmp	r3, #0
 8000992:	d006      	beq.n	80009a2 <IIC_SDA+0x22>
		GPIOC->ODR |= (1 << 7);
 8000994:	4b08      	ldr	r3, [pc, #32]	; (80009b8 <IIC_SDA+0x38>)
 8000996:	695a      	ldr	r2, [r3, #20]
 8000998:	4b07      	ldr	r3, [pc, #28]	; (80009b8 <IIC_SDA+0x38>)
 800099a:	2180      	movs	r1, #128	; 0x80
 800099c:	430a      	orrs	r2, r1
 800099e:	615a      	str	r2, [r3, #20]
	} else {
		GPIOC->ODR &= ~(1 << 7);
	}
}
 80009a0:	e005      	b.n	80009ae <IIC_SDA+0x2e>
		GPIOC->ODR &= ~(1 << 7);
 80009a2:	4b05      	ldr	r3, [pc, #20]	; (80009b8 <IIC_SDA+0x38>)
 80009a4:	695a      	ldr	r2, [r3, #20]
 80009a6:	4b04      	ldr	r3, [pc, #16]	; (80009b8 <IIC_SDA+0x38>)
 80009a8:	2180      	movs	r1, #128	; 0x80
 80009aa:	438a      	bics	r2, r1
 80009ac:	615a      	str	r2, [r3, #20]
}
 80009ae:	46c0      	nop			; (mov r8, r8)
 80009b0:	46bd      	mov	sp, r7
 80009b2:	b002      	add	sp, #8
 80009b4:	bd80      	pop	{r7, pc}
 80009b6:	46c0      	nop			; (mov r8, r8)
 80009b8:	50000800 	.word	0x50000800

080009bc <READ_SDA>:
uint8_t READ_SDA() {
 80009bc:	b580      	push	{r7, lr}
 80009be:	af00      	add	r7, sp, #0

	return ((uint8_t) ((GPIOC->IDR >> 7) & 1));
 80009c0:	4b04      	ldr	r3, [pc, #16]	; (80009d4 <READ_SDA+0x18>)
 80009c2:	691b      	ldr	r3, [r3, #16]
 80009c4:	09db      	lsrs	r3, r3, #7
 80009c6:	b2db      	uxtb	r3, r3
 80009c8:	2201      	movs	r2, #1
 80009ca:	4013      	ands	r3, r2
 80009cc:	b2db      	uxtb	r3, r3
}
 80009ce:	0018      	movs	r0, r3
 80009d0:	46bd      	mov	sp, r7
 80009d2:	bd80      	pop	{r7, pc}
 80009d4:	50000800 	.word	0x50000800

080009d8 <IIC_Read_One_Byte>:
	IIC_Wait_Ack();  	//7
	IIC_Stop();  	// Create a stop condition  	8
	HAL_Delay(10);
}

void IIC_Read_One_Byte(uint8_t daddr, uint8_t addr, uint8_t *data) {
 80009d8:	b580      	push	{r7, lr}
 80009da:	b082      	sub	sp, #8
 80009dc:	af00      	add	r7, sp, #0
 80009de:	603a      	str	r2, [r7, #0]
 80009e0:	1dfb      	adds	r3, r7, #7
 80009e2:	1c02      	adds	r2, r0, #0
 80009e4:	701a      	strb	r2, [r3, #0]
 80009e6:	1dbb      	adds	r3, r7, #6
 80009e8:	1c0a      	adds	r2, r1, #0
 80009ea:	701a      	strb	r2, [r3, #0]
	IIC_Start();  //1
 80009ec:	f7ff fe36 	bl	800065c <IIC_Start>

	IIC_Send_Byte(daddr);	   // Send write command 	2
 80009f0:	1dfb      	adds	r3, r7, #7
 80009f2:	781b      	ldrb	r3, [r3, #0]
 80009f4:	0018      	movs	r0, r3
 80009f6:	f7ff ff07 	bl	8000808 <IIC_Send_Byte>
	IIC_Wait_Ack();	   //3
 80009fa:	f7ff fe7f 	bl	80006fc <IIC_Wait_Ack>
	IIC_Send_Byte(addr);	   // Sending address 	4
 80009fe:	1dbb      	adds	r3, r7, #6
 8000a00:	781b      	ldrb	r3, [r3, #0]
 8000a02:	0018      	movs	r0, r3
 8000a04:	f7ff ff00 	bl	8000808 <IIC_Send_Byte>
	IIC_Wait_Ack();		 //5
 8000a08:	f7ff fe78 	bl	80006fc <IIC_Wait_Ack>
	IIC_Start();  	 	//6
 8000a0c:	f7ff fe26 	bl	800065c <IIC_Start>
	IIC_Send_Byte(daddr | 0X01);  	 	// Enter receive mode 		7
 8000a10:	1dfb      	adds	r3, r7, #7
 8000a12:	781b      	ldrb	r3, [r3, #0]
 8000a14:	2201      	movs	r2, #1
 8000a16:	4313      	orrs	r3, r2
 8000a18:	b2db      	uxtb	r3, r3
 8000a1a:	0018      	movs	r0, r3
 8000a1c:	f7ff fef4 	bl	8000808 <IIC_Send_Byte>
	IIC_Wait_Ack();	// 8
 8000a20:	f7ff fe6c 	bl	80006fc <IIC_Wait_Ack>
	*data = IIC_Read_Byte(0);		   //9 10
 8000a24:	2000      	movs	r0, #0
 8000a26:	f7ff ff39 	bl	800089c <IIC_Read_Byte>
 8000a2a:	0003      	movs	r3, r0
 8000a2c:	001a      	movs	r2, r3
 8000a2e:	683b      	ldr	r3, [r7, #0]
 8000a30:	701a      	strb	r2, [r3, #0]
	IIC_Stop();		   // Create a stop condition 	    //11
 8000a32:	f7ff fe3b 	bl	80006ac <IIC_Stop>
}
 8000a36:	46c0      	nop			; (mov r8, r8)
 8000a38:	46bd      	mov	sp, r7
 8000a3a:	b002      	add	sp, #8
 8000a3c:	bd80      	pop	{r7, pc}
	...

08000a40 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8000a40:	b580      	push	{r7, lr}
 8000a42:	b082      	sub	sp, #8
 8000a44:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000a46:	f000 faab 	bl	8000fa0 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8000a4a:	f000 f82f 	bl	8000aac <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8000a4e:	f000 f8c3 	bl	8000bd8 <MX_GPIO_Init>
	MX_USART2_UART_Init();
 8000a52:	f000 f873 	bl	8000b3c <MX_USART2_UART_Init>
	/* USER CODE BEGIN 2 */
	//IIC_Init();
	printf("[i] Init I2C \n");
 8000a56:	4b13      	ldr	r3, [pc, #76]	; (8000aa4 <main+0x64>)
 8000a58:	0018      	movs	r0, r3
 8000a5a:	f002 fbb9 	bl	80031d0 <puts>

	uint8_t value = 0;
 8000a5e:	1dfb      	adds	r3, r7, #7
 8000a60:	2200      	movs	r2, #0
 8000a62:	701a      	strb	r2, [r3, #0]
	IIC_Read_One_Byte(I2C_ADDRESS, 0x75, &value);
 8000a64:	1dfb      	adds	r3, r7, #7
 8000a66:	001a      	movs	r2, r3
 8000a68:	2175      	movs	r1, #117	; 0x75
 8000a6a:	20d0      	movs	r0, #208	; 0xd0
 8000a6c:	f7ff ffb4 	bl	80009d8 <IIC_Read_One_Byte>
	if (value == 0x68) {
 8000a70:	1dfb      	adds	r3, r7, #7
 8000a72:	781b      	ldrb	r3, [r3, #0]
 8000a74:	2b68      	cmp	r3, #104	; 0x68
 8000a76:	d107      	bne.n	8000a88 <main+0x48>
		printf(
 8000a78:	1dfb      	adds	r3, r7, #7
 8000a7a:	781b      	ldrb	r3, [r3, #0]
 8000a7c:	001a      	movs	r2, r3
 8000a7e:	4b0a      	ldr	r3, [pc, #40]	; (8000aa8 <main+0x68>)
 8000a80:	21d0      	movs	r1, #208	; 0xd0
 8000a82:	0018      	movs	r0, r3
 8000a84:	f002 fb18 	bl	80030b8 <iprintf>
	/* USER CODE END 2 */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {
		GPIOA->ODR ^= 1 << 5;
 8000a88:	23a0      	movs	r3, #160	; 0xa0
 8000a8a:	05db      	lsls	r3, r3, #23
 8000a8c:	695a      	ldr	r2, [r3, #20]
 8000a8e:	23a0      	movs	r3, #160	; 0xa0
 8000a90:	05db      	lsls	r3, r3, #23
 8000a92:	2120      	movs	r1, #32
 8000a94:	404a      	eors	r2, r1
 8000a96:	615a      	str	r2, [r3, #20]
		HAL_Delay(500);
 8000a98:	23fa      	movs	r3, #250	; 0xfa
 8000a9a:	005b      	lsls	r3, r3, #1
 8000a9c:	0018      	movs	r0, r3
 8000a9e:	f000 fb05 	bl	80010ac <HAL_Delay>
		GPIOA->ODR ^= 1 << 5;
 8000aa2:	e7f1      	b.n	8000a88 <main+0x48>
 8000aa4:	08004104 	.word	0x08004104
 8000aa8:	08004114 	.word	0x08004114

08000aac <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8000aac:	b590      	push	{r4, r7, lr}
 8000aae:	b093      	sub	sp, #76	; 0x4c
 8000ab0:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8000ab2:	2410      	movs	r4, #16
 8000ab4:	193b      	adds	r3, r7, r4
 8000ab6:	0018      	movs	r0, r3
 8000ab8:	2338      	movs	r3, #56	; 0x38
 8000aba:	001a      	movs	r2, r3
 8000abc:	2100      	movs	r1, #0
 8000abe:	f002 faf3 	bl	80030a8 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8000ac2:	003b      	movs	r3, r7
 8000ac4:	0018      	movs	r0, r3
 8000ac6:	2310      	movs	r3, #16
 8000ac8:	001a      	movs	r2, r3
 8000aca:	2100      	movs	r1, #0
 8000acc:	f002 faec 	bl	80030a8 <memset>

	/** Configure the main internal regulator output voltage
	 */
	HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000ad0:	2380      	movs	r3, #128	; 0x80
 8000ad2:	009b      	lsls	r3, r3, #2
 8000ad4:	0018      	movs	r0, r3
 8000ad6:	f000 fd43 	bl	8001560 <HAL_PWREx_ControlVoltageScaling>

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000ada:	193b      	adds	r3, r7, r4
 8000adc:	2202      	movs	r2, #2
 8000ade:	601a      	str	r2, [r3, #0]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000ae0:	193b      	adds	r3, r7, r4
 8000ae2:	2280      	movs	r2, #128	; 0x80
 8000ae4:	0052      	lsls	r2, r2, #1
 8000ae6:	60da      	str	r2, [r3, #12]
	RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 8000ae8:	193b      	adds	r3, r7, r4
 8000aea:	2200      	movs	r2, #0
 8000aec:	611a      	str	r2, [r3, #16]
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000aee:	193b      	adds	r3, r7, r4
 8000af0:	2240      	movs	r2, #64	; 0x40
 8000af2:	615a      	str	r2, [r3, #20]
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000af4:	193b      	adds	r3, r7, r4
 8000af6:	2200      	movs	r2, #0
 8000af8:	61da      	str	r2, [r3, #28]
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8000afa:	193b      	adds	r3, r7, r4
 8000afc:	0018      	movs	r0, r3
 8000afe:	f000 fd7b 	bl	80015f8 <HAL_RCC_OscConfig>
 8000b02:	1e03      	subs	r3, r0, #0
 8000b04:	d001      	beq.n	8000b0a <SystemClock_Config+0x5e>
		Error_Handler();
 8000b06:	f000 f8df 	bl	8000cc8 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8000b0a:	003b      	movs	r3, r7
 8000b0c:	2207      	movs	r2, #7
 8000b0e:	601a      	str	r2, [r3, #0]
			| RCC_CLOCKTYPE_PCLK1;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000b10:	003b      	movs	r3, r7
 8000b12:	2200      	movs	r2, #0
 8000b14:	605a      	str	r2, [r3, #4]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000b16:	003b      	movs	r3, r7
 8000b18:	2200      	movs	r2, #0
 8000b1a:	609a      	str	r2, [r3, #8]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000b1c:	003b      	movs	r3, r7
 8000b1e:	2200      	movs	r2, #0
 8000b20:	60da      	str	r2, [r3, #12]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK) {
 8000b22:	003b      	movs	r3, r7
 8000b24:	2100      	movs	r1, #0
 8000b26:	0018      	movs	r0, r3
 8000b28:	f001 f880 	bl	8001c2c <HAL_RCC_ClockConfig>
 8000b2c:	1e03      	subs	r3, r0, #0
 8000b2e:	d001      	beq.n	8000b34 <SystemClock_Config+0x88>
		Error_Handler();
 8000b30:	f000 f8ca 	bl	8000cc8 <Error_Handler>
	}
}
 8000b34:	46c0      	nop			; (mov r8, r8)
 8000b36:	46bd      	mov	sp, r7
 8000b38:	b013      	add	sp, #76	; 0x4c
 8000b3a:	bd90      	pop	{r4, r7, pc}

08000b3c <MX_USART2_UART_Init>:
/**
 * @brief USART2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART2_UART_Init(void) {
 8000b3c:	b580      	push	{r7, lr}
 8000b3e:	af00      	add	r7, sp, #0
	/* USER CODE END USART2_Init 0 */

	/* USER CODE BEGIN USART2_Init 1 */

	/* USER CODE END USART2_Init 1 */
	huart2.Instance = USART2;
 8000b40:	4b23      	ldr	r3, [pc, #140]	; (8000bd0 <MX_USART2_UART_Init+0x94>)
 8000b42:	4a24      	ldr	r2, [pc, #144]	; (8000bd4 <MX_USART2_UART_Init+0x98>)
 8000b44:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 115200;
 8000b46:	4b22      	ldr	r3, [pc, #136]	; (8000bd0 <MX_USART2_UART_Init+0x94>)
 8000b48:	22e1      	movs	r2, #225	; 0xe1
 8000b4a:	0252      	lsls	r2, r2, #9
 8000b4c:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000b4e:	4b20      	ldr	r3, [pc, #128]	; (8000bd0 <MX_USART2_UART_Init+0x94>)
 8000b50:	2200      	movs	r2, #0
 8000b52:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 8000b54:	4b1e      	ldr	r3, [pc, #120]	; (8000bd0 <MX_USART2_UART_Init+0x94>)
 8000b56:	2200      	movs	r2, #0
 8000b58:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 8000b5a:	4b1d      	ldr	r3, [pc, #116]	; (8000bd0 <MX_USART2_UART_Init+0x94>)
 8000b5c:	2200      	movs	r2, #0
 8000b5e:	611a      	str	r2, [r3, #16]
	huart2.Init.Mode = UART_MODE_TX_RX;
 8000b60:	4b1b      	ldr	r3, [pc, #108]	; (8000bd0 <MX_USART2_UART_Init+0x94>)
 8000b62:	220c      	movs	r2, #12
 8000b64:	615a      	str	r2, [r3, #20]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b66:	4b1a      	ldr	r3, [pc, #104]	; (8000bd0 <MX_USART2_UART_Init+0x94>)
 8000b68:	2200      	movs	r2, #0
 8000b6a:	619a      	str	r2, [r3, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b6c:	4b18      	ldr	r3, [pc, #96]	; (8000bd0 <MX_USART2_UART_Init+0x94>)
 8000b6e:	2200      	movs	r2, #0
 8000b70:	61da      	str	r2, [r3, #28]
	huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000b72:	4b17      	ldr	r3, [pc, #92]	; (8000bd0 <MX_USART2_UART_Init+0x94>)
 8000b74:	2200      	movs	r2, #0
 8000b76:	621a      	str	r2, [r3, #32]
	huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000b78:	4b15      	ldr	r3, [pc, #84]	; (8000bd0 <MX_USART2_UART_Init+0x94>)
 8000b7a:	2200      	movs	r2, #0
 8000b7c:	625a      	str	r2, [r3, #36]	; 0x24
	huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000b7e:	4b14      	ldr	r3, [pc, #80]	; (8000bd0 <MX_USART2_UART_Init+0x94>)
 8000b80:	2200      	movs	r2, #0
 8000b82:	629a      	str	r2, [r3, #40]	; 0x28
	if (HAL_UART_Init(&huart2) != HAL_OK) {
 8000b84:	4b12      	ldr	r3, [pc, #72]	; (8000bd0 <MX_USART2_UART_Init+0x94>)
 8000b86:	0018      	movs	r0, r3
 8000b88:	f001 fbb2 	bl	80022f0 <HAL_UART_Init>
 8000b8c:	1e03      	subs	r3, r0, #0
 8000b8e:	d001      	beq.n	8000b94 <MX_USART2_UART_Init+0x58>
		Error_Handler();
 8000b90:	f000 f89a 	bl	8000cc8 <Error_Handler>
	}
	if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8)
 8000b94:	4b0e      	ldr	r3, [pc, #56]	; (8000bd0 <MX_USART2_UART_Init+0x94>)
 8000b96:	2100      	movs	r1, #0
 8000b98:	0018      	movs	r0, r3
 8000b9a:	f002 f97b 	bl	8002e94 <HAL_UARTEx_SetTxFifoThreshold>
 8000b9e:	1e03      	subs	r3, r0, #0
 8000ba0:	d001      	beq.n	8000ba6 <MX_USART2_UART_Init+0x6a>
			!= HAL_OK) {
		Error_Handler();
 8000ba2:	f000 f891 	bl	8000cc8 <Error_Handler>
	}
	if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8)
 8000ba6:	4b0a      	ldr	r3, [pc, #40]	; (8000bd0 <MX_USART2_UART_Init+0x94>)
 8000ba8:	2100      	movs	r1, #0
 8000baa:	0018      	movs	r0, r3
 8000bac:	f002 f9b2 	bl	8002f14 <HAL_UARTEx_SetRxFifoThreshold>
 8000bb0:	1e03      	subs	r3, r0, #0
 8000bb2:	d001      	beq.n	8000bb8 <MX_USART2_UART_Init+0x7c>
			!= HAL_OK) {
		Error_Handler();
 8000bb4:	f000 f888 	bl	8000cc8 <Error_Handler>
	}
	if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK) {
 8000bb8:	4b05      	ldr	r3, [pc, #20]	; (8000bd0 <MX_USART2_UART_Init+0x94>)
 8000bba:	0018      	movs	r0, r3
 8000bbc:	f002 f930 	bl	8002e20 <HAL_UARTEx_DisableFifoMode>
 8000bc0:	1e03      	subs	r3, r0, #0
 8000bc2:	d001      	beq.n	8000bc8 <MX_USART2_UART_Init+0x8c>
		Error_Handler();
 8000bc4:	f000 f880 	bl	8000cc8 <Error_Handler>
	}
	/* USER CODE BEGIN USART2_Init 2 */

	/* USER CODE END USART2_Init 2 */

}
 8000bc8:	46c0      	nop			; (mov r8, r8)
 8000bca:	46bd      	mov	sp, r7
 8000bcc:	bd80      	pop	{r7, pc}
 8000bce:	46c0      	nop			; (mov r8, r8)
 8000bd0:	20000098 	.word	0x20000098
 8000bd4:	40004400 	.word	0x40004400

08000bd8 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8000bd8:	b590      	push	{r4, r7, lr}
 8000bda:	b089      	sub	sp, #36	; 0x24
 8000bdc:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8000bde:	240c      	movs	r4, #12
 8000be0:	193b      	adds	r3, r7, r4
 8000be2:	0018      	movs	r0, r3
 8000be4:	2314      	movs	r3, #20
 8000be6:	001a      	movs	r2, r3
 8000be8:	2100      	movs	r1, #0
 8000bea:	f002 fa5d 	bl	80030a8 <memset>

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8000bee:	4b2c      	ldr	r3, [pc, #176]	; (8000ca0 <MX_GPIO_Init+0xc8>)
 8000bf0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000bf2:	4b2b      	ldr	r3, [pc, #172]	; (8000ca0 <MX_GPIO_Init+0xc8>)
 8000bf4:	2104      	movs	r1, #4
 8000bf6:	430a      	orrs	r2, r1
 8000bf8:	635a      	str	r2, [r3, #52]	; 0x34
 8000bfa:	4b29      	ldr	r3, [pc, #164]	; (8000ca0 <MX_GPIO_Init+0xc8>)
 8000bfc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000bfe:	2204      	movs	r2, #4
 8000c00:	4013      	ands	r3, r2
 8000c02:	60bb      	str	r3, [r7, #8]
 8000c04:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOF_CLK_ENABLE();
 8000c06:	4b26      	ldr	r3, [pc, #152]	; (8000ca0 <MX_GPIO_Init+0xc8>)
 8000c08:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000c0a:	4b25      	ldr	r3, [pc, #148]	; (8000ca0 <MX_GPIO_Init+0xc8>)
 8000c0c:	2120      	movs	r1, #32
 8000c0e:	430a      	orrs	r2, r1
 8000c10:	635a      	str	r2, [r3, #52]	; 0x34
 8000c12:	4b23      	ldr	r3, [pc, #140]	; (8000ca0 <MX_GPIO_Init+0xc8>)
 8000c14:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000c16:	2220      	movs	r2, #32
 8000c18:	4013      	ands	r3, r2
 8000c1a:	607b      	str	r3, [r7, #4]
 8000c1c:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8000c1e:	4b20      	ldr	r3, [pc, #128]	; (8000ca0 <MX_GPIO_Init+0xc8>)
 8000c20:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000c22:	4b1f      	ldr	r3, [pc, #124]	; (8000ca0 <MX_GPIO_Init+0xc8>)
 8000c24:	2101      	movs	r1, #1
 8000c26:	430a      	orrs	r2, r1
 8000c28:	635a      	str	r2, [r3, #52]	; 0x34
 8000c2a:	4b1d      	ldr	r3, [pc, #116]	; (8000ca0 <MX_GPIO_Init+0xc8>)
 8000c2c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000c2e:	2201      	movs	r2, #1
 8000c30:	4013      	ands	r3, r2
 8000c32:	603b      	str	r3, [r7, #0]
 8000c34:	683b      	ldr	r3, [r7, #0]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOA, LED_GREEN_Pin | GPIO_PIN_7 | GPIO_PIN_9,
 8000c36:	23a8      	movs	r3, #168	; 0xa8
 8000c38:	0099      	lsls	r1, r3, #2
 8000c3a:	23a0      	movs	r3, #160	; 0xa0
 8000c3c:	05db      	lsls	r3, r3, #23
 8000c3e:	2200      	movs	r2, #0
 8000c40:	0018      	movs	r0, r3
 8000c42:	f000 fc6f 	bl	8001524 <HAL_GPIO_WritePin>
			GPIO_PIN_RESET);

	/*Configure GPIO pin : LED_GREEN_Pin */
	GPIO_InitStruct.Pin = LED_GREEN_Pin;
 8000c46:	193b      	adds	r3, r7, r4
 8000c48:	2220      	movs	r2, #32
 8000c4a:	601a      	str	r2, [r3, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c4c:	193b      	adds	r3, r7, r4
 8000c4e:	2201      	movs	r2, #1
 8000c50:	605a      	str	r2, [r3, #4]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c52:	193b      	adds	r3, r7, r4
 8000c54:	2200      	movs	r2, #0
 8000c56:	609a      	str	r2, [r3, #8]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000c58:	193b      	adds	r3, r7, r4
 8000c5a:	2202      	movs	r2, #2
 8000c5c:	60da      	str	r2, [r3, #12]
	HAL_GPIO_Init(LED_GREEN_GPIO_Port, &GPIO_InitStruct);
 8000c5e:	193a      	adds	r2, r7, r4
 8000c60:	23a0      	movs	r3, #160	; 0xa0
 8000c62:	05db      	lsls	r3, r3, #23
 8000c64:	0011      	movs	r1, r2
 8000c66:	0018      	movs	r0, r3
 8000c68:	f000 faf8 	bl	800125c <HAL_GPIO_Init>

	/*Configure GPIO pins : PA7 PA9 */
	GPIO_InitStruct.Pin = GPIO_PIN_7 | GPIO_PIN_9;
 8000c6c:	0021      	movs	r1, r4
 8000c6e:	187b      	adds	r3, r7, r1
 8000c70:	22a0      	movs	r2, #160	; 0xa0
 8000c72:	0092      	lsls	r2, r2, #2
 8000c74:	601a      	str	r2, [r3, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c76:	187b      	adds	r3, r7, r1
 8000c78:	2201      	movs	r2, #1
 8000c7a:	605a      	str	r2, [r3, #4]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c7c:	187b      	adds	r3, r7, r1
 8000c7e:	2200      	movs	r2, #0
 8000c80:	609a      	str	r2, [r3, #8]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c82:	187b      	adds	r3, r7, r1
 8000c84:	2203      	movs	r2, #3
 8000c86:	60da      	str	r2, [r3, #12]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c88:	187a      	adds	r2, r7, r1
 8000c8a:	23a0      	movs	r3, #160	; 0xa0
 8000c8c:	05db      	lsls	r3, r3, #23
 8000c8e:	0011      	movs	r1, r2
 8000c90:	0018      	movs	r0, r3
 8000c92:	f000 fae3 	bl	800125c <HAL_GPIO_Init>

}
 8000c96:	46c0      	nop			; (mov r8, r8)
 8000c98:	46bd      	mov	sp, r7
 8000c9a:	b009      	add	sp, #36	; 0x24
 8000c9c:	bd90      	pop	{r4, r7, pc}
 8000c9e:	46c0      	nop			; (mov r8, r8)
 8000ca0:	40021000 	.word	0x40021000

08000ca4 <__io_putchar>:
 set to 'Yes') calls __io_putchar() */
int __io_putchar(int ch)
#else
int fputc(int ch, FILE *f)
#endif /* __GNUC__ */
{
 8000ca4:	b580      	push	{r7, lr}
 8000ca6:	b082      	sub	sp, #8
 8000ca8:	af00      	add	r7, sp, #0
 8000caa:	6078      	str	r0, [r7, #4]
	/* Place your implementation of fputc here */
	/* e.g. write a character to the UART3 and Loop until the end of transmission */
	HAL_UART_Transmit(&huart2, (uint8_t*) &ch, 1, HAL_MAX_DELAY);
 8000cac:	2301      	movs	r3, #1
 8000cae:	425b      	negs	r3, r3
 8000cb0:	1d39      	adds	r1, r7, #4
 8000cb2:	4804      	ldr	r0, [pc, #16]	; (8000cc4 <__io_putchar+0x20>)
 8000cb4:	2201      	movs	r2, #1
 8000cb6:	f001 fb71 	bl	800239c <HAL_UART_Transmit>

	return ch;
 8000cba:	687b      	ldr	r3, [r7, #4]
}
 8000cbc:	0018      	movs	r0, r3
 8000cbe:	46bd      	mov	sp, r7
 8000cc0:	b002      	add	sp, #8
 8000cc2:	bd80      	pop	{r7, pc}
 8000cc4:	20000098 	.word	0x20000098

08000cc8 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8000cc8:	b580      	push	{r7, lr}
 8000cca:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ccc:	b672      	cpsid	i
}
 8000cce:	46c0      	nop			; (mov r8, r8)
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8000cd0:	e7fe      	b.n	8000cd0 <Error_Handler+0x8>
	...

08000cd4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000cd4:	b580      	push	{r7, lr}
 8000cd6:	b082      	sub	sp, #8
 8000cd8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000cda:	4b0f      	ldr	r3, [pc, #60]	; (8000d18 <HAL_MspInit+0x44>)
 8000cdc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000cde:	4b0e      	ldr	r3, [pc, #56]	; (8000d18 <HAL_MspInit+0x44>)
 8000ce0:	2101      	movs	r1, #1
 8000ce2:	430a      	orrs	r2, r1
 8000ce4:	641a      	str	r2, [r3, #64]	; 0x40
 8000ce6:	4b0c      	ldr	r3, [pc, #48]	; (8000d18 <HAL_MspInit+0x44>)
 8000ce8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cea:	2201      	movs	r2, #1
 8000cec:	4013      	ands	r3, r2
 8000cee:	607b      	str	r3, [r7, #4]
 8000cf0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000cf2:	4b09      	ldr	r3, [pc, #36]	; (8000d18 <HAL_MspInit+0x44>)
 8000cf4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000cf6:	4b08      	ldr	r3, [pc, #32]	; (8000d18 <HAL_MspInit+0x44>)
 8000cf8:	2180      	movs	r1, #128	; 0x80
 8000cfa:	0549      	lsls	r1, r1, #21
 8000cfc:	430a      	orrs	r2, r1
 8000cfe:	63da      	str	r2, [r3, #60]	; 0x3c
 8000d00:	4b05      	ldr	r3, [pc, #20]	; (8000d18 <HAL_MspInit+0x44>)
 8000d02:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000d04:	2380      	movs	r3, #128	; 0x80
 8000d06:	055b      	lsls	r3, r3, #21
 8000d08:	4013      	ands	r3, r2
 8000d0a:	603b      	str	r3, [r7, #0]
 8000d0c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d0e:	46c0      	nop			; (mov r8, r8)
 8000d10:	46bd      	mov	sp, r7
 8000d12:	b002      	add	sp, #8
 8000d14:	bd80      	pop	{r7, pc}
 8000d16:	46c0      	nop			; (mov r8, r8)
 8000d18:	40021000 	.word	0x40021000

08000d1c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000d1c:	b590      	push	{r4, r7, lr}
 8000d1e:	b097      	sub	sp, #92	; 0x5c
 8000d20:	af00      	add	r7, sp, #0
 8000d22:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d24:	2344      	movs	r3, #68	; 0x44
 8000d26:	18fb      	adds	r3, r7, r3
 8000d28:	0018      	movs	r0, r3
 8000d2a:	2314      	movs	r3, #20
 8000d2c:	001a      	movs	r2, r3
 8000d2e:	2100      	movs	r1, #0
 8000d30:	f002 f9ba 	bl	80030a8 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000d34:	2410      	movs	r4, #16
 8000d36:	193b      	adds	r3, r7, r4
 8000d38:	0018      	movs	r0, r3
 8000d3a:	2334      	movs	r3, #52	; 0x34
 8000d3c:	001a      	movs	r2, r3
 8000d3e:	2100      	movs	r1, #0
 8000d40:	f002 f9b2 	bl	80030a8 <memset>
  if(huart->Instance==USART2)
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	681b      	ldr	r3, [r3, #0]
 8000d48:	4a22      	ldr	r2, [pc, #136]	; (8000dd4 <HAL_UART_MspInit+0xb8>)
 8000d4a:	4293      	cmp	r3, r2
 8000d4c:	d13e      	bne.n	8000dcc <HAL_UART_MspInit+0xb0>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000d4e:	193b      	adds	r3, r7, r4
 8000d50:	2202      	movs	r2, #2
 8000d52:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000d54:	193b      	adds	r3, r7, r4
 8000d56:	2200      	movs	r2, #0
 8000d58:	609a      	str	r2, [r3, #8]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000d5a:	193b      	adds	r3, r7, r4
 8000d5c:	0018      	movs	r0, r3
 8000d5e:	f001 f90f 	bl	8001f80 <HAL_RCCEx_PeriphCLKConfig>
 8000d62:	1e03      	subs	r3, r0, #0
 8000d64:	d001      	beq.n	8000d6a <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8000d66:	f7ff ffaf 	bl	8000cc8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000d6a:	4b1b      	ldr	r3, [pc, #108]	; (8000dd8 <HAL_UART_MspInit+0xbc>)
 8000d6c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000d6e:	4b1a      	ldr	r3, [pc, #104]	; (8000dd8 <HAL_UART_MspInit+0xbc>)
 8000d70:	2180      	movs	r1, #128	; 0x80
 8000d72:	0289      	lsls	r1, r1, #10
 8000d74:	430a      	orrs	r2, r1
 8000d76:	63da      	str	r2, [r3, #60]	; 0x3c
 8000d78:	4b17      	ldr	r3, [pc, #92]	; (8000dd8 <HAL_UART_MspInit+0xbc>)
 8000d7a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000d7c:	2380      	movs	r3, #128	; 0x80
 8000d7e:	029b      	lsls	r3, r3, #10
 8000d80:	4013      	ands	r3, r2
 8000d82:	60fb      	str	r3, [r7, #12]
 8000d84:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d86:	4b14      	ldr	r3, [pc, #80]	; (8000dd8 <HAL_UART_MspInit+0xbc>)
 8000d88:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000d8a:	4b13      	ldr	r3, [pc, #76]	; (8000dd8 <HAL_UART_MspInit+0xbc>)
 8000d8c:	2101      	movs	r1, #1
 8000d8e:	430a      	orrs	r2, r1
 8000d90:	635a      	str	r2, [r3, #52]	; 0x34
 8000d92:	4b11      	ldr	r3, [pc, #68]	; (8000dd8 <HAL_UART_MspInit+0xbc>)
 8000d94:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000d96:	2201      	movs	r2, #1
 8000d98:	4013      	ands	r3, r2
 8000d9a:	60bb      	str	r3, [r7, #8]
 8000d9c:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART2_TX_Pin|USART2_RX_Pin;
 8000d9e:	2144      	movs	r1, #68	; 0x44
 8000da0:	187b      	adds	r3, r7, r1
 8000da2:	220c      	movs	r2, #12
 8000da4:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000da6:	187b      	adds	r3, r7, r1
 8000da8:	2202      	movs	r2, #2
 8000daa:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000dac:	187b      	adds	r3, r7, r1
 8000dae:	2201      	movs	r2, #1
 8000db0:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000db2:	187b      	adds	r3, r7, r1
 8000db4:	2200      	movs	r2, #0
 8000db6:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8000db8:	187b      	adds	r3, r7, r1
 8000dba:	2201      	movs	r2, #1
 8000dbc:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000dbe:	187a      	adds	r2, r7, r1
 8000dc0:	23a0      	movs	r3, #160	; 0xa0
 8000dc2:	05db      	lsls	r3, r3, #23
 8000dc4:	0011      	movs	r1, r2
 8000dc6:	0018      	movs	r0, r3
 8000dc8:	f000 fa48 	bl	800125c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000dcc:	46c0      	nop			; (mov r8, r8)
 8000dce:	46bd      	mov	sp, r7
 8000dd0:	b017      	add	sp, #92	; 0x5c
 8000dd2:	bd90      	pop	{r4, r7, pc}
 8000dd4:	40004400 	.word	0x40004400
 8000dd8:	40021000 	.word	0x40021000

08000ddc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ddc:	b580      	push	{r7, lr}
 8000dde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000de0:	e7fe      	b.n	8000de0 <NMI_Handler+0x4>

08000de2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000de2:	b580      	push	{r7, lr}
 8000de4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000de6:	e7fe      	b.n	8000de6 <HardFault_Handler+0x4>

08000de8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000de8:	b580      	push	{r7, lr}
 8000dea:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000dec:	46c0      	nop			; (mov r8, r8)
 8000dee:	46bd      	mov	sp, r7
 8000df0:	bd80      	pop	{r7, pc}

08000df2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000df2:	b580      	push	{r7, lr}
 8000df4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000df6:	46c0      	nop			; (mov r8, r8)
 8000df8:	46bd      	mov	sp, r7
 8000dfa:	bd80      	pop	{r7, pc}

08000dfc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000dfc:	b580      	push	{r7, lr}
 8000dfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000e00:	f000 f938 	bl	8001074 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000e04:	46c0      	nop			; (mov r8, r8)
 8000e06:	46bd      	mov	sp, r7
 8000e08:	bd80      	pop	{r7, pc}

08000e0a <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000e0a:	b580      	push	{r7, lr}
 8000e0c:	b086      	sub	sp, #24
 8000e0e:	af00      	add	r7, sp, #0
 8000e10:	60f8      	str	r0, [r7, #12]
 8000e12:	60b9      	str	r1, [r7, #8]
 8000e14:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e16:	2300      	movs	r3, #0
 8000e18:	617b      	str	r3, [r7, #20]
 8000e1a:	e00a      	b.n	8000e32 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000e1c:	e000      	b.n	8000e20 <_read+0x16>
 8000e1e:	bf00      	nop
 8000e20:	0001      	movs	r1, r0
 8000e22:	68bb      	ldr	r3, [r7, #8]
 8000e24:	1c5a      	adds	r2, r3, #1
 8000e26:	60ba      	str	r2, [r7, #8]
 8000e28:	b2ca      	uxtb	r2, r1
 8000e2a:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e2c:	697b      	ldr	r3, [r7, #20]
 8000e2e:	3301      	adds	r3, #1
 8000e30:	617b      	str	r3, [r7, #20]
 8000e32:	697a      	ldr	r2, [r7, #20]
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	429a      	cmp	r2, r3
 8000e38:	dbf0      	blt.n	8000e1c <_read+0x12>
	}

return len;
 8000e3a:	687b      	ldr	r3, [r7, #4]
}
 8000e3c:	0018      	movs	r0, r3
 8000e3e:	46bd      	mov	sp, r7
 8000e40:	b006      	add	sp, #24
 8000e42:	bd80      	pop	{r7, pc}

08000e44 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000e44:	b580      	push	{r7, lr}
 8000e46:	b086      	sub	sp, #24
 8000e48:	af00      	add	r7, sp, #0
 8000e4a:	60f8      	str	r0, [r7, #12]
 8000e4c:	60b9      	str	r1, [r7, #8]
 8000e4e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e50:	2300      	movs	r3, #0
 8000e52:	617b      	str	r3, [r7, #20]
 8000e54:	e009      	b.n	8000e6a <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000e56:	68bb      	ldr	r3, [r7, #8]
 8000e58:	1c5a      	adds	r2, r3, #1
 8000e5a:	60ba      	str	r2, [r7, #8]
 8000e5c:	781b      	ldrb	r3, [r3, #0]
 8000e5e:	0018      	movs	r0, r3
 8000e60:	f7ff ff20 	bl	8000ca4 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e64:	697b      	ldr	r3, [r7, #20]
 8000e66:	3301      	adds	r3, #1
 8000e68:	617b      	str	r3, [r7, #20]
 8000e6a:	697a      	ldr	r2, [r7, #20]
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	429a      	cmp	r2, r3
 8000e70:	dbf1      	blt.n	8000e56 <_write+0x12>
	}
	return len;
 8000e72:	687b      	ldr	r3, [r7, #4]
}
 8000e74:	0018      	movs	r0, r3
 8000e76:	46bd      	mov	sp, r7
 8000e78:	b006      	add	sp, #24
 8000e7a:	bd80      	pop	{r7, pc}

08000e7c <_close>:

int _close(int file)
{
 8000e7c:	b580      	push	{r7, lr}
 8000e7e:	b082      	sub	sp, #8
 8000e80:	af00      	add	r7, sp, #0
 8000e82:	6078      	str	r0, [r7, #4]
	return -1;
 8000e84:	2301      	movs	r3, #1
 8000e86:	425b      	negs	r3, r3
}
 8000e88:	0018      	movs	r0, r3
 8000e8a:	46bd      	mov	sp, r7
 8000e8c:	b002      	add	sp, #8
 8000e8e:	bd80      	pop	{r7, pc}

08000e90 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000e90:	b580      	push	{r7, lr}
 8000e92:	b082      	sub	sp, #8
 8000e94:	af00      	add	r7, sp, #0
 8000e96:	6078      	str	r0, [r7, #4]
 8000e98:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000e9a:	683b      	ldr	r3, [r7, #0]
 8000e9c:	2280      	movs	r2, #128	; 0x80
 8000e9e:	0192      	lsls	r2, r2, #6
 8000ea0:	605a      	str	r2, [r3, #4]
	return 0;
 8000ea2:	2300      	movs	r3, #0
}
 8000ea4:	0018      	movs	r0, r3
 8000ea6:	46bd      	mov	sp, r7
 8000ea8:	b002      	add	sp, #8
 8000eaa:	bd80      	pop	{r7, pc}

08000eac <_isatty>:

int _isatty(int file)
{
 8000eac:	b580      	push	{r7, lr}
 8000eae:	b082      	sub	sp, #8
 8000eb0:	af00      	add	r7, sp, #0
 8000eb2:	6078      	str	r0, [r7, #4]
	return 1;
 8000eb4:	2301      	movs	r3, #1
}
 8000eb6:	0018      	movs	r0, r3
 8000eb8:	46bd      	mov	sp, r7
 8000eba:	b002      	add	sp, #8
 8000ebc:	bd80      	pop	{r7, pc}

08000ebe <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000ebe:	b580      	push	{r7, lr}
 8000ec0:	b084      	sub	sp, #16
 8000ec2:	af00      	add	r7, sp, #0
 8000ec4:	60f8      	str	r0, [r7, #12]
 8000ec6:	60b9      	str	r1, [r7, #8]
 8000ec8:	607a      	str	r2, [r7, #4]
	return 0;
 8000eca:	2300      	movs	r3, #0
}
 8000ecc:	0018      	movs	r0, r3
 8000ece:	46bd      	mov	sp, r7
 8000ed0:	b004      	add	sp, #16
 8000ed2:	bd80      	pop	{r7, pc}

08000ed4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000ed4:	b580      	push	{r7, lr}
 8000ed6:	b086      	sub	sp, #24
 8000ed8:	af00      	add	r7, sp, #0
 8000eda:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000edc:	4a14      	ldr	r2, [pc, #80]	; (8000f30 <_sbrk+0x5c>)
 8000ede:	4b15      	ldr	r3, [pc, #84]	; (8000f34 <_sbrk+0x60>)
 8000ee0:	1ad3      	subs	r3, r2, r3
 8000ee2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000ee4:	697b      	ldr	r3, [r7, #20]
 8000ee6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000ee8:	4b13      	ldr	r3, [pc, #76]	; (8000f38 <_sbrk+0x64>)
 8000eea:	681b      	ldr	r3, [r3, #0]
 8000eec:	2b00      	cmp	r3, #0
 8000eee:	d102      	bne.n	8000ef6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000ef0:	4b11      	ldr	r3, [pc, #68]	; (8000f38 <_sbrk+0x64>)
 8000ef2:	4a12      	ldr	r2, [pc, #72]	; (8000f3c <_sbrk+0x68>)
 8000ef4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000ef6:	4b10      	ldr	r3, [pc, #64]	; (8000f38 <_sbrk+0x64>)
 8000ef8:	681a      	ldr	r2, [r3, #0]
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	18d3      	adds	r3, r2, r3
 8000efe:	693a      	ldr	r2, [r7, #16]
 8000f00:	429a      	cmp	r2, r3
 8000f02:	d207      	bcs.n	8000f14 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000f04:	f002 f8a6 	bl	8003054 <__errno>
 8000f08:	0003      	movs	r3, r0
 8000f0a:	220c      	movs	r2, #12
 8000f0c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000f0e:	2301      	movs	r3, #1
 8000f10:	425b      	negs	r3, r3
 8000f12:	e009      	b.n	8000f28 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000f14:	4b08      	ldr	r3, [pc, #32]	; (8000f38 <_sbrk+0x64>)
 8000f16:	681b      	ldr	r3, [r3, #0]
 8000f18:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000f1a:	4b07      	ldr	r3, [pc, #28]	; (8000f38 <_sbrk+0x64>)
 8000f1c:	681a      	ldr	r2, [r3, #0]
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	18d2      	adds	r2, r2, r3
 8000f22:	4b05      	ldr	r3, [pc, #20]	; (8000f38 <_sbrk+0x64>)
 8000f24:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8000f26:	68fb      	ldr	r3, [r7, #12]
}
 8000f28:	0018      	movs	r0, r3
 8000f2a:	46bd      	mov	sp, r7
 8000f2c:	b006      	add	sp, #24
 8000f2e:	bd80      	pop	{r7, pc}
 8000f30:	20009000 	.word	0x20009000
 8000f34:	00000400 	.word	0x00000400
 8000f38:	2000008c 	.word	0x2000008c
 8000f3c:	20000140 	.word	0x20000140

08000f40 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000f40:	b580      	push	{r7, lr}
 8000f42:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000f44:	46c0      	nop			; (mov r8, r8)
 8000f46:	46bd      	mov	sp, r7
 8000f48:	bd80      	pop	{r7, pc}
	...

08000f4c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000f4c:	480d      	ldr	r0, [pc, #52]	; (8000f84 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000f4e:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000f50:	f7ff fff6 	bl	8000f40 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000f54:	480c      	ldr	r0, [pc, #48]	; (8000f88 <LoopForever+0x6>)
  ldr r1, =_edata
 8000f56:	490d      	ldr	r1, [pc, #52]	; (8000f8c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000f58:	4a0d      	ldr	r2, [pc, #52]	; (8000f90 <LoopForever+0xe>)
  movs r3, #0
 8000f5a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000f5c:	e002      	b.n	8000f64 <LoopCopyDataInit>

08000f5e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000f5e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000f60:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000f62:	3304      	adds	r3, #4

08000f64 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000f64:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000f66:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000f68:	d3f9      	bcc.n	8000f5e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000f6a:	4a0a      	ldr	r2, [pc, #40]	; (8000f94 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000f6c:	4c0a      	ldr	r4, [pc, #40]	; (8000f98 <LoopForever+0x16>)
  movs r3, #0
 8000f6e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000f70:	e001      	b.n	8000f76 <LoopFillZerobss>

08000f72 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000f72:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000f74:	3204      	adds	r2, #4

08000f76 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000f76:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000f78:	d3fb      	bcc.n	8000f72 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000f7a:	f002 f871 	bl	8003060 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8000f7e:	f7ff fd5f 	bl	8000a40 <main>

08000f82 <LoopForever>:

LoopForever:
  b LoopForever
 8000f82:	e7fe      	b.n	8000f82 <LoopForever>
  ldr   r0, =_estack
 8000f84:	20009000 	.word	0x20009000
  ldr r0, =_sdata
 8000f88:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000f8c:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000f90:	08004288 	.word	0x08004288
  ldr r2, =_sbss
 8000f94:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000f98:	20000140 	.word	0x20000140

08000f9c <ADC1_COMP_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000f9c:	e7fe      	b.n	8000f9c <ADC1_COMP_IRQHandler>
	...

08000fa0 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000fa0:	b580      	push	{r7, lr}
 8000fa2:	b082      	sub	sp, #8
 8000fa4:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000fa6:	1dfb      	adds	r3, r7, #7
 8000fa8:	2200      	movs	r2, #0
 8000faa:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000fac:	4b0b      	ldr	r3, [pc, #44]	; (8000fdc <HAL_Init+0x3c>)
 8000fae:	681a      	ldr	r2, [r3, #0]
 8000fb0:	4b0a      	ldr	r3, [pc, #40]	; (8000fdc <HAL_Init+0x3c>)
 8000fb2:	2180      	movs	r1, #128	; 0x80
 8000fb4:	0049      	lsls	r1, r1, #1
 8000fb6:	430a      	orrs	r2, r1
 8000fb8:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000fba:	2000      	movs	r0, #0
 8000fbc:	f000 f810 	bl	8000fe0 <HAL_InitTick>
 8000fc0:	1e03      	subs	r3, r0, #0
 8000fc2:	d003      	beq.n	8000fcc <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8000fc4:	1dfb      	adds	r3, r7, #7
 8000fc6:	2201      	movs	r2, #1
 8000fc8:	701a      	strb	r2, [r3, #0]
 8000fca:	e001      	b.n	8000fd0 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8000fcc:	f7ff fe82 	bl	8000cd4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000fd0:	1dfb      	adds	r3, r7, #7
 8000fd2:	781b      	ldrb	r3, [r3, #0]
}
 8000fd4:	0018      	movs	r0, r3
 8000fd6:	46bd      	mov	sp, r7
 8000fd8:	b002      	add	sp, #8
 8000fda:	bd80      	pop	{r7, pc}
 8000fdc:	40022000 	.word	0x40022000

08000fe0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000fe0:	b590      	push	{r4, r7, lr}
 8000fe2:	b085      	sub	sp, #20
 8000fe4:	af00      	add	r7, sp, #0
 8000fe6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000fe8:	230f      	movs	r3, #15
 8000fea:	18fb      	adds	r3, r7, r3
 8000fec:	2200      	movs	r2, #0
 8000fee:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 8000ff0:	4b1d      	ldr	r3, [pc, #116]	; (8001068 <HAL_InitTick+0x88>)
 8000ff2:	781b      	ldrb	r3, [r3, #0]
 8000ff4:	2b00      	cmp	r3, #0
 8000ff6:	d02b      	beq.n	8001050 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 8000ff8:	4b1c      	ldr	r3, [pc, #112]	; (800106c <HAL_InitTick+0x8c>)
 8000ffa:	681c      	ldr	r4, [r3, #0]
 8000ffc:	4b1a      	ldr	r3, [pc, #104]	; (8001068 <HAL_InitTick+0x88>)
 8000ffe:	781b      	ldrb	r3, [r3, #0]
 8001000:	0019      	movs	r1, r3
 8001002:	23fa      	movs	r3, #250	; 0xfa
 8001004:	0098      	lsls	r0, r3, #2
 8001006:	f7ff f887 	bl	8000118 <__udivsi3>
 800100a:	0003      	movs	r3, r0
 800100c:	0019      	movs	r1, r3
 800100e:	0020      	movs	r0, r4
 8001010:	f7ff f882 	bl	8000118 <__udivsi3>
 8001014:	0003      	movs	r3, r0
 8001016:	0018      	movs	r0, r3
 8001018:	f000 f913 	bl	8001242 <HAL_SYSTICK_Config>
 800101c:	1e03      	subs	r3, r0, #0
 800101e:	d112      	bne.n	8001046 <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	2b03      	cmp	r3, #3
 8001024:	d80a      	bhi.n	800103c <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001026:	6879      	ldr	r1, [r7, #4]
 8001028:	2301      	movs	r3, #1
 800102a:	425b      	negs	r3, r3
 800102c:	2200      	movs	r2, #0
 800102e:	0018      	movs	r0, r3
 8001030:	f000 f8f2 	bl	8001218 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001034:	4b0e      	ldr	r3, [pc, #56]	; (8001070 <HAL_InitTick+0x90>)
 8001036:	687a      	ldr	r2, [r7, #4]
 8001038:	601a      	str	r2, [r3, #0]
 800103a:	e00d      	b.n	8001058 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 800103c:	230f      	movs	r3, #15
 800103e:	18fb      	adds	r3, r7, r3
 8001040:	2201      	movs	r2, #1
 8001042:	701a      	strb	r2, [r3, #0]
 8001044:	e008      	b.n	8001058 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001046:	230f      	movs	r3, #15
 8001048:	18fb      	adds	r3, r7, r3
 800104a:	2201      	movs	r2, #1
 800104c:	701a      	strb	r2, [r3, #0]
 800104e:	e003      	b.n	8001058 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001050:	230f      	movs	r3, #15
 8001052:	18fb      	adds	r3, r7, r3
 8001054:	2201      	movs	r2, #1
 8001056:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8001058:	230f      	movs	r3, #15
 800105a:	18fb      	adds	r3, r7, r3
 800105c:	781b      	ldrb	r3, [r3, #0]
}
 800105e:	0018      	movs	r0, r3
 8001060:	46bd      	mov	sp, r7
 8001062:	b005      	add	sp, #20
 8001064:	bd90      	pop	{r4, r7, pc}
 8001066:	46c0      	nop			; (mov r8, r8)
 8001068:	20000008 	.word	0x20000008
 800106c:	20000000 	.word	0x20000000
 8001070:	20000004 	.word	0x20000004

08001074 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001074:	b580      	push	{r7, lr}
 8001076:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001078:	4b05      	ldr	r3, [pc, #20]	; (8001090 <HAL_IncTick+0x1c>)
 800107a:	781b      	ldrb	r3, [r3, #0]
 800107c:	001a      	movs	r2, r3
 800107e:	4b05      	ldr	r3, [pc, #20]	; (8001094 <HAL_IncTick+0x20>)
 8001080:	681b      	ldr	r3, [r3, #0]
 8001082:	18d2      	adds	r2, r2, r3
 8001084:	4b03      	ldr	r3, [pc, #12]	; (8001094 <HAL_IncTick+0x20>)
 8001086:	601a      	str	r2, [r3, #0]
}
 8001088:	46c0      	nop			; (mov r8, r8)
 800108a:	46bd      	mov	sp, r7
 800108c:	bd80      	pop	{r7, pc}
 800108e:	46c0      	nop			; (mov r8, r8)
 8001090:	20000008 	.word	0x20000008
 8001094:	2000012c 	.word	0x2000012c

08001098 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001098:	b580      	push	{r7, lr}
 800109a:	af00      	add	r7, sp, #0
  return uwTick;
 800109c:	4b02      	ldr	r3, [pc, #8]	; (80010a8 <HAL_GetTick+0x10>)
 800109e:	681b      	ldr	r3, [r3, #0]
}
 80010a0:	0018      	movs	r0, r3
 80010a2:	46bd      	mov	sp, r7
 80010a4:	bd80      	pop	{r7, pc}
 80010a6:	46c0      	nop			; (mov r8, r8)
 80010a8:	2000012c 	.word	0x2000012c

080010ac <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80010ac:	b580      	push	{r7, lr}
 80010ae:	b084      	sub	sp, #16
 80010b0:	af00      	add	r7, sp, #0
 80010b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80010b4:	f7ff fff0 	bl	8001098 <HAL_GetTick>
 80010b8:	0003      	movs	r3, r0
 80010ba:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80010c0:	68fb      	ldr	r3, [r7, #12]
 80010c2:	3301      	adds	r3, #1
 80010c4:	d005      	beq.n	80010d2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80010c6:	4b0a      	ldr	r3, [pc, #40]	; (80010f0 <HAL_Delay+0x44>)
 80010c8:	781b      	ldrb	r3, [r3, #0]
 80010ca:	001a      	movs	r2, r3
 80010cc:	68fb      	ldr	r3, [r7, #12]
 80010ce:	189b      	adds	r3, r3, r2
 80010d0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80010d2:	46c0      	nop			; (mov r8, r8)
 80010d4:	f7ff ffe0 	bl	8001098 <HAL_GetTick>
 80010d8:	0002      	movs	r2, r0
 80010da:	68bb      	ldr	r3, [r7, #8]
 80010dc:	1ad3      	subs	r3, r2, r3
 80010de:	68fa      	ldr	r2, [r7, #12]
 80010e0:	429a      	cmp	r2, r3
 80010e2:	d8f7      	bhi.n	80010d4 <HAL_Delay+0x28>
  {
  }
}
 80010e4:	46c0      	nop			; (mov r8, r8)
 80010e6:	46c0      	nop			; (mov r8, r8)
 80010e8:	46bd      	mov	sp, r7
 80010ea:	b004      	add	sp, #16
 80010ec:	bd80      	pop	{r7, pc}
 80010ee:	46c0      	nop			; (mov r8, r8)
 80010f0:	20000008 	.word	0x20000008

080010f4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80010f4:	b590      	push	{r4, r7, lr}
 80010f6:	b083      	sub	sp, #12
 80010f8:	af00      	add	r7, sp, #0
 80010fa:	0002      	movs	r2, r0
 80010fc:	6039      	str	r1, [r7, #0]
 80010fe:	1dfb      	adds	r3, r7, #7
 8001100:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001102:	1dfb      	adds	r3, r7, #7
 8001104:	781b      	ldrb	r3, [r3, #0]
 8001106:	2b7f      	cmp	r3, #127	; 0x7f
 8001108:	d828      	bhi.n	800115c <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800110a:	4a2f      	ldr	r2, [pc, #188]	; (80011c8 <__NVIC_SetPriority+0xd4>)
 800110c:	1dfb      	adds	r3, r7, #7
 800110e:	781b      	ldrb	r3, [r3, #0]
 8001110:	b25b      	sxtb	r3, r3
 8001112:	089b      	lsrs	r3, r3, #2
 8001114:	33c0      	adds	r3, #192	; 0xc0
 8001116:	009b      	lsls	r3, r3, #2
 8001118:	589b      	ldr	r3, [r3, r2]
 800111a:	1dfa      	adds	r2, r7, #7
 800111c:	7812      	ldrb	r2, [r2, #0]
 800111e:	0011      	movs	r1, r2
 8001120:	2203      	movs	r2, #3
 8001122:	400a      	ands	r2, r1
 8001124:	00d2      	lsls	r2, r2, #3
 8001126:	21ff      	movs	r1, #255	; 0xff
 8001128:	4091      	lsls	r1, r2
 800112a:	000a      	movs	r2, r1
 800112c:	43d2      	mvns	r2, r2
 800112e:	401a      	ands	r2, r3
 8001130:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001132:	683b      	ldr	r3, [r7, #0]
 8001134:	019b      	lsls	r3, r3, #6
 8001136:	22ff      	movs	r2, #255	; 0xff
 8001138:	401a      	ands	r2, r3
 800113a:	1dfb      	adds	r3, r7, #7
 800113c:	781b      	ldrb	r3, [r3, #0]
 800113e:	0018      	movs	r0, r3
 8001140:	2303      	movs	r3, #3
 8001142:	4003      	ands	r3, r0
 8001144:	00db      	lsls	r3, r3, #3
 8001146:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001148:	481f      	ldr	r0, [pc, #124]	; (80011c8 <__NVIC_SetPriority+0xd4>)
 800114a:	1dfb      	adds	r3, r7, #7
 800114c:	781b      	ldrb	r3, [r3, #0]
 800114e:	b25b      	sxtb	r3, r3
 8001150:	089b      	lsrs	r3, r3, #2
 8001152:	430a      	orrs	r2, r1
 8001154:	33c0      	adds	r3, #192	; 0xc0
 8001156:	009b      	lsls	r3, r3, #2
 8001158:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 800115a:	e031      	b.n	80011c0 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800115c:	4a1b      	ldr	r2, [pc, #108]	; (80011cc <__NVIC_SetPriority+0xd8>)
 800115e:	1dfb      	adds	r3, r7, #7
 8001160:	781b      	ldrb	r3, [r3, #0]
 8001162:	0019      	movs	r1, r3
 8001164:	230f      	movs	r3, #15
 8001166:	400b      	ands	r3, r1
 8001168:	3b08      	subs	r3, #8
 800116a:	089b      	lsrs	r3, r3, #2
 800116c:	3306      	adds	r3, #6
 800116e:	009b      	lsls	r3, r3, #2
 8001170:	18d3      	adds	r3, r2, r3
 8001172:	3304      	adds	r3, #4
 8001174:	681b      	ldr	r3, [r3, #0]
 8001176:	1dfa      	adds	r2, r7, #7
 8001178:	7812      	ldrb	r2, [r2, #0]
 800117a:	0011      	movs	r1, r2
 800117c:	2203      	movs	r2, #3
 800117e:	400a      	ands	r2, r1
 8001180:	00d2      	lsls	r2, r2, #3
 8001182:	21ff      	movs	r1, #255	; 0xff
 8001184:	4091      	lsls	r1, r2
 8001186:	000a      	movs	r2, r1
 8001188:	43d2      	mvns	r2, r2
 800118a:	401a      	ands	r2, r3
 800118c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800118e:	683b      	ldr	r3, [r7, #0]
 8001190:	019b      	lsls	r3, r3, #6
 8001192:	22ff      	movs	r2, #255	; 0xff
 8001194:	401a      	ands	r2, r3
 8001196:	1dfb      	adds	r3, r7, #7
 8001198:	781b      	ldrb	r3, [r3, #0]
 800119a:	0018      	movs	r0, r3
 800119c:	2303      	movs	r3, #3
 800119e:	4003      	ands	r3, r0
 80011a0:	00db      	lsls	r3, r3, #3
 80011a2:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80011a4:	4809      	ldr	r0, [pc, #36]	; (80011cc <__NVIC_SetPriority+0xd8>)
 80011a6:	1dfb      	adds	r3, r7, #7
 80011a8:	781b      	ldrb	r3, [r3, #0]
 80011aa:	001c      	movs	r4, r3
 80011ac:	230f      	movs	r3, #15
 80011ae:	4023      	ands	r3, r4
 80011b0:	3b08      	subs	r3, #8
 80011b2:	089b      	lsrs	r3, r3, #2
 80011b4:	430a      	orrs	r2, r1
 80011b6:	3306      	adds	r3, #6
 80011b8:	009b      	lsls	r3, r3, #2
 80011ba:	18c3      	adds	r3, r0, r3
 80011bc:	3304      	adds	r3, #4
 80011be:	601a      	str	r2, [r3, #0]
}
 80011c0:	46c0      	nop			; (mov r8, r8)
 80011c2:	46bd      	mov	sp, r7
 80011c4:	b003      	add	sp, #12
 80011c6:	bd90      	pop	{r4, r7, pc}
 80011c8:	e000e100 	.word	0xe000e100
 80011cc:	e000ed00 	.word	0xe000ed00

080011d0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80011d0:	b580      	push	{r7, lr}
 80011d2:	b082      	sub	sp, #8
 80011d4:	af00      	add	r7, sp, #0
 80011d6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	1e5a      	subs	r2, r3, #1
 80011dc:	2380      	movs	r3, #128	; 0x80
 80011de:	045b      	lsls	r3, r3, #17
 80011e0:	429a      	cmp	r2, r3
 80011e2:	d301      	bcc.n	80011e8 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 80011e4:	2301      	movs	r3, #1
 80011e6:	e010      	b.n	800120a <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80011e8:	4b0a      	ldr	r3, [pc, #40]	; (8001214 <SysTick_Config+0x44>)
 80011ea:	687a      	ldr	r2, [r7, #4]
 80011ec:	3a01      	subs	r2, #1
 80011ee:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80011f0:	2301      	movs	r3, #1
 80011f2:	425b      	negs	r3, r3
 80011f4:	2103      	movs	r1, #3
 80011f6:	0018      	movs	r0, r3
 80011f8:	f7ff ff7c 	bl	80010f4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80011fc:	4b05      	ldr	r3, [pc, #20]	; (8001214 <SysTick_Config+0x44>)
 80011fe:	2200      	movs	r2, #0
 8001200:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001202:	4b04      	ldr	r3, [pc, #16]	; (8001214 <SysTick_Config+0x44>)
 8001204:	2207      	movs	r2, #7
 8001206:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001208:	2300      	movs	r3, #0
}
 800120a:	0018      	movs	r0, r3
 800120c:	46bd      	mov	sp, r7
 800120e:	b002      	add	sp, #8
 8001210:	bd80      	pop	{r7, pc}
 8001212:	46c0      	nop			; (mov r8, r8)
 8001214:	e000e010 	.word	0xe000e010

08001218 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001218:	b580      	push	{r7, lr}
 800121a:	b084      	sub	sp, #16
 800121c:	af00      	add	r7, sp, #0
 800121e:	60b9      	str	r1, [r7, #8]
 8001220:	607a      	str	r2, [r7, #4]
 8001222:	210f      	movs	r1, #15
 8001224:	187b      	adds	r3, r7, r1
 8001226:	1c02      	adds	r2, r0, #0
 8001228:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 800122a:	68ba      	ldr	r2, [r7, #8]
 800122c:	187b      	adds	r3, r7, r1
 800122e:	781b      	ldrb	r3, [r3, #0]
 8001230:	b25b      	sxtb	r3, r3
 8001232:	0011      	movs	r1, r2
 8001234:	0018      	movs	r0, r3
 8001236:	f7ff ff5d 	bl	80010f4 <__NVIC_SetPriority>
}
 800123a:	46c0      	nop			; (mov r8, r8)
 800123c:	46bd      	mov	sp, r7
 800123e:	b004      	add	sp, #16
 8001240:	bd80      	pop	{r7, pc}

08001242 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001242:	b580      	push	{r7, lr}
 8001244:	b082      	sub	sp, #8
 8001246:	af00      	add	r7, sp, #0
 8001248:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	0018      	movs	r0, r3
 800124e:	f7ff ffbf 	bl	80011d0 <SysTick_Config>
 8001252:	0003      	movs	r3, r0
}
 8001254:	0018      	movs	r0, r3
 8001256:	46bd      	mov	sp, r7
 8001258:	b002      	add	sp, #8
 800125a:	bd80      	pop	{r7, pc}

0800125c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800125c:	b580      	push	{r7, lr}
 800125e:	b086      	sub	sp, #24
 8001260:	af00      	add	r7, sp, #0
 8001262:	6078      	str	r0, [r7, #4]
 8001264:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001266:	2300      	movs	r3, #0
 8001268:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800126a:	e147      	b.n	80014fc <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800126c:	683b      	ldr	r3, [r7, #0]
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	2101      	movs	r1, #1
 8001272:	697a      	ldr	r2, [r7, #20]
 8001274:	4091      	lsls	r1, r2
 8001276:	000a      	movs	r2, r1
 8001278:	4013      	ands	r3, r2
 800127a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800127c:	68fb      	ldr	r3, [r7, #12]
 800127e:	2b00      	cmp	r3, #0
 8001280:	d100      	bne.n	8001284 <HAL_GPIO_Init+0x28>
 8001282:	e138      	b.n	80014f6 <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001284:	683b      	ldr	r3, [r7, #0]
 8001286:	685b      	ldr	r3, [r3, #4]
 8001288:	2203      	movs	r2, #3
 800128a:	4013      	ands	r3, r2
 800128c:	2b01      	cmp	r3, #1
 800128e:	d005      	beq.n	800129c <HAL_GPIO_Init+0x40>
 8001290:	683b      	ldr	r3, [r7, #0]
 8001292:	685b      	ldr	r3, [r3, #4]
 8001294:	2203      	movs	r2, #3
 8001296:	4013      	ands	r3, r2
 8001298:	2b02      	cmp	r3, #2
 800129a:	d130      	bne.n	80012fe <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	689b      	ldr	r3, [r3, #8]
 80012a0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80012a2:	697b      	ldr	r3, [r7, #20]
 80012a4:	005b      	lsls	r3, r3, #1
 80012a6:	2203      	movs	r2, #3
 80012a8:	409a      	lsls	r2, r3
 80012aa:	0013      	movs	r3, r2
 80012ac:	43da      	mvns	r2, r3
 80012ae:	693b      	ldr	r3, [r7, #16]
 80012b0:	4013      	ands	r3, r2
 80012b2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80012b4:	683b      	ldr	r3, [r7, #0]
 80012b6:	68da      	ldr	r2, [r3, #12]
 80012b8:	697b      	ldr	r3, [r7, #20]
 80012ba:	005b      	lsls	r3, r3, #1
 80012bc:	409a      	lsls	r2, r3
 80012be:	0013      	movs	r3, r2
 80012c0:	693a      	ldr	r2, [r7, #16]
 80012c2:	4313      	orrs	r3, r2
 80012c4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	693a      	ldr	r2, [r7, #16]
 80012ca:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	685b      	ldr	r3, [r3, #4]
 80012d0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80012d2:	2201      	movs	r2, #1
 80012d4:	697b      	ldr	r3, [r7, #20]
 80012d6:	409a      	lsls	r2, r3
 80012d8:	0013      	movs	r3, r2
 80012da:	43da      	mvns	r2, r3
 80012dc:	693b      	ldr	r3, [r7, #16]
 80012de:	4013      	ands	r3, r2
 80012e0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80012e2:	683b      	ldr	r3, [r7, #0]
 80012e4:	685b      	ldr	r3, [r3, #4]
 80012e6:	091b      	lsrs	r3, r3, #4
 80012e8:	2201      	movs	r2, #1
 80012ea:	401a      	ands	r2, r3
 80012ec:	697b      	ldr	r3, [r7, #20]
 80012ee:	409a      	lsls	r2, r3
 80012f0:	0013      	movs	r3, r2
 80012f2:	693a      	ldr	r2, [r7, #16]
 80012f4:	4313      	orrs	r3, r2
 80012f6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	693a      	ldr	r2, [r7, #16]
 80012fc:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80012fe:	683b      	ldr	r3, [r7, #0]
 8001300:	685b      	ldr	r3, [r3, #4]
 8001302:	2203      	movs	r2, #3
 8001304:	4013      	ands	r3, r2
 8001306:	2b03      	cmp	r3, #3
 8001308:	d017      	beq.n	800133a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	68db      	ldr	r3, [r3, #12]
 800130e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8001310:	697b      	ldr	r3, [r7, #20]
 8001312:	005b      	lsls	r3, r3, #1
 8001314:	2203      	movs	r2, #3
 8001316:	409a      	lsls	r2, r3
 8001318:	0013      	movs	r3, r2
 800131a:	43da      	mvns	r2, r3
 800131c:	693b      	ldr	r3, [r7, #16]
 800131e:	4013      	ands	r3, r2
 8001320:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001322:	683b      	ldr	r3, [r7, #0]
 8001324:	689a      	ldr	r2, [r3, #8]
 8001326:	697b      	ldr	r3, [r7, #20]
 8001328:	005b      	lsls	r3, r3, #1
 800132a:	409a      	lsls	r2, r3
 800132c:	0013      	movs	r3, r2
 800132e:	693a      	ldr	r2, [r7, #16]
 8001330:	4313      	orrs	r3, r2
 8001332:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	693a      	ldr	r2, [r7, #16]
 8001338:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800133a:	683b      	ldr	r3, [r7, #0]
 800133c:	685b      	ldr	r3, [r3, #4]
 800133e:	2203      	movs	r2, #3
 8001340:	4013      	ands	r3, r2
 8001342:	2b02      	cmp	r3, #2
 8001344:	d123      	bne.n	800138e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001346:	697b      	ldr	r3, [r7, #20]
 8001348:	08da      	lsrs	r2, r3, #3
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	3208      	adds	r2, #8
 800134e:	0092      	lsls	r2, r2, #2
 8001350:	58d3      	ldr	r3, [r2, r3]
 8001352:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001354:	697b      	ldr	r3, [r7, #20]
 8001356:	2207      	movs	r2, #7
 8001358:	4013      	ands	r3, r2
 800135a:	009b      	lsls	r3, r3, #2
 800135c:	220f      	movs	r2, #15
 800135e:	409a      	lsls	r2, r3
 8001360:	0013      	movs	r3, r2
 8001362:	43da      	mvns	r2, r3
 8001364:	693b      	ldr	r3, [r7, #16]
 8001366:	4013      	ands	r3, r2
 8001368:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800136a:	683b      	ldr	r3, [r7, #0]
 800136c:	691a      	ldr	r2, [r3, #16]
 800136e:	697b      	ldr	r3, [r7, #20]
 8001370:	2107      	movs	r1, #7
 8001372:	400b      	ands	r3, r1
 8001374:	009b      	lsls	r3, r3, #2
 8001376:	409a      	lsls	r2, r3
 8001378:	0013      	movs	r3, r2
 800137a:	693a      	ldr	r2, [r7, #16]
 800137c:	4313      	orrs	r3, r2
 800137e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001380:	697b      	ldr	r3, [r7, #20]
 8001382:	08da      	lsrs	r2, r3, #3
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	3208      	adds	r2, #8
 8001388:	0092      	lsls	r2, r2, #2
 800138a:	6939      	ldr	r1, [r7, #16]
 800138c:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001394:	697b      	ldr	r3, [r7, #20]
 8001396:	005b      	lsls	r3, r3, #1
 8001398:	2203      	movs	r2, #3
 800139a:	409a      	lsls	r2, r3
 800139c:	0013      	movs	r3, r2
 800139e:	43da      	mvns	r2, r3
 80013a0:	693b      	ldr	r3, [r7, #16]
 80013a2:	4013      	ands	r3, r2
 80013a4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80013a6:	683b      	ldr	r3, [r7, #0]
 80013a8:	685b      	ldr	r3, [r3, #4]
 80013aa:	2203      	movs	r2, #3
 80013ac:	401a      	ands	r2, r3
 80013ae:	697b      	ldr	r3, [r7, #20]
 80013b0:	005b      	lsls	r3, r3, #1
 80013b2:	409a      	lsls	r2, r3
 80013b4:	0013      	movs	r3, r2
 80013b6:	693a      	ldr	r2, [r7, #16]
 80013b8:	4313      	orrs	r3, r2
 80013ba:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	693a      	ldr	r2, [r7, #16]
 80013c0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80013c2:	683b      	ldr	r3, [r7, #0]
 80013c4:	685a      	ldr	r2, [r3, #4]
 80013c6:	23c0      	movs	r3, #192	; 0xc0
 80013c8:	029b      	lsls	r3, r3, #10
 80013ca:	4013      	ands	r3, r2
 80013cc:	d100      	bne.n	80013d0 <HAL_GPIO_Init+0x174>
 80013ce:	e092      	b.n	80014f6 <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 80013d0:	4a50      	ldr	r2, [pc, #320]	; (8001514 <HAL_GPIO_Init+0x2b8>)
 80013d2:	697b      	ldr	r3, [r7, #20]
 80013d4:	089b      	lsrs	r3, r3, #2
 80013d6:	3318      	adds	r3, #24
 80013d8:	009b      	lsls	r3, r3, #2
 80013da:	589b      	ldr	r3, [r3, r2]
 80013dc:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 80013de:	697b      	ldr	r3, [r7, #20]
 80013e0:	2203      	movs	r2, #3
 80013e2:	4013      	ands	r3, r2
 80013e4:	00db      	lsls	r3, r3, #3
 80013e6:	220f      	movs	r2, #15
 80013e8:	409a      	lsls	r2, r3
 80013ea:	0013      	movs	r3, r2
 80013ec:	43da      	mvns	r2, r3
 80013ee:	693b      	ldr	r3, [r7, #16]
 80013f0:	4013      	ands	r3, r2
 80013f2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 80013f4:	687a      	ldr	r2, [r7, #4]
 80013f6:	23a0      	movs	r3, #160	; 0xa0
 80013f8:	05db      	lsls	r3, r3, #23
 80013fa:	429a      	cmp	r2, r3
 80013fc:	d013      	beq.n	8001426 <HAL_GPIO_Init+0x1ca>
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	4a45      	ldr	r2, [pc, #276]	; (8001518 <HAL_GPIO_Init+0x2bc>)
 8001402:	4293      	cmp	r3, r2
 8001404:	d00d      	beq.n	8001422 <HAL_GPIO_Init+0x1c6>
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	4a44      	ldr	r2, [pc, #272]	; (800151c <HAL_GPIO_Init+0x2c0>)
 800140a:	4293      	cmp	r3, r2
 800140c:	d007      	beq.n	800141e <HAL_GPIO_Init+0x1c2>
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	4a43      	ldr	r2, [pc, #268]	; (8001520 <HAL_GPIO_Init+0x2c4>)
 8001412:	4293      	cmp	r3, r2
 8001414:	d101      	bne.n	800141a <HAL_GPIO_Init+0x1be>
 8001416:	2303      	movs	r3, #3
 8001418:	e006      	b.n	8001428 <HAL_GPIO_Init+0x1cc>
 800141a:	2305      	movs	r3, #5
 800141c:	e004      	b.n	8001428 <HAL_GPIO_Init+0x1cc>
 800141e:	2302      	movs	r3, #2
 8001420:	e002      	b.n	8001428 <HAL_GPIO_Init+0x1cc>
 8001422:	2301      	movs	r3, #1
 8001424:	e000      	b.n	8001428 <HAL_GPIO_Init+0x1cc>
 8001426:	2300      	movs	r3, #0
 8001428:	697a      	ldr	r2, [r7, #20]
 800142a:	2103      	movs	r1, #3
 800142c:	400a      	ands	r2, r1
 800142e:	00d2      	lsls	r2, r2, #3
 8001430:	4093      	lsls	r3, r2
 8001432:	693a      	ldr	r2, [r7, #16]
 8001434:	4313      	orrs	r3, r2
 8001436:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 8001438:	4936      	ldr	r1, [pc, #216]	; (8001514 <HAL_GPIO_Init+0x2b8>)
 800143a:	697b      	ldr	r3, [r7, #20]
 800143c:	089b      	lsrs	r3, r3, #2
 800143e:	3318      	adds	r3, #24
 8001440:	009b      	lsls	r3, r3, #2
 8001442:	693a      	ldr	r2, [r7, #16]
 8001444:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001446:	4b33      	ldr	r3, [pc, #204]	; (8001514 <HAL_GPIO_Init+0x2b8>)
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800144c:	68fb      	ldr	r3, [r7, #12]
 800144e:	43da      	mvns	r2, r3
 8001450:	693b      	ldr	r3, [r7, #16]
 8001452:	4013      	ands	r3, r2
 8001454:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001456:	683b      	ldr	r3, [r7, #0]
 8001458:	685a      	ldr	r2, [r3, #4]
 800145a:	2380      	movs	r3, #128	; 0x80
 800145c:	035b      	lsls	r3, r3, #13
 800145e:	4013      	ands	r3, r2
 8001460:	d003      	beq.n	800146a <HAL_GPIO_Init+0x20e>
        {
          temp |= iocurrent;
 8001462:	693a      	ldr	r2, [r7, #16]
 8001464:	68fb      	ldr	r3, [r7, #12]
 8001466:	4313      	orrs	r3, r2
 8001468:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800146a:	4b2a      	ldr	r3, [pc, #168]	; (8001514 <HAL_GPIO_Init+0x2b8>)
 800146c:	693a      	ldr	r2, [r7, #16]
 800146e:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 8001470:	4b28      	ldr	r3, [pc, #160]	; (8001514 <HAL_GPIO_Init+0x2b8>)
 8001472:	685b      	ldr	r3, [r3, #4]
 8001474:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001476:	68fb      	ldr	r3, [r7, #12]
 8001478:	43da      	mvns	r2, r3
 800147a:	693b      	ldr	r3, [r7, #16]
 800147c:	4013      	ands	r3, r2
 800147e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001480:	683b      	ldr	r3, [r7, #0]
 8001482:	685a      	ldr	r2, [r3, #4]
 8001484:	2380      	movs	r3, #128	; 0x80
 8001486:	039b      	lsls	r3, r3, #14
 8001488:	4013      	ands	r3, r2
 800148a:	d003      	beq.n	8001494 <HAL_GPIO_Init+0x238>
        {
          temp |= iocurrent;
 800148c:	693a      	ldr	r2, [r7, #16]
 800148e:	68fb      	ldr	r3, [r7, #12]
 8001490:	4313      	orrs	r3, r2
 8001492:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001494:	4b1f      	ldr	r3, [pc, #124]	; (8001514 <HAL_GPIO_Init+0x2b8>)
 8001496:	693a      	ldr	r2, [r7, #16]
 8001498:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800149a:	4a1e      	ldr	r2, [pc, #120]	; (8001514 <HAL_GPIO_Init+0x2b8>)
 800149c:	2384      	movs	r3, #132	; 0x84
 800149e:	58d3      	ldr	r3, [r2, r3]
 80014a0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80014a2:	68fb      	ldr	r3, [r7, #12]
 80014a4:	43da      	mvns	r2, r3
 80014a6:	693b      	ldr	r3, [r7, #16]
 80014a8:	4013      	ands	r3, r2
 80014aa:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80014ac:	683b      	ldr	r3, [r7, #0]
 80014ae:	685a      	ldr	r2, [r3, #4]
 80014b0:	2380      	movs	r3, #128	; 0x80
 80014b2:	029b      	lsls	r3, r3, #10
 80014b4:	4013      	ands	r3, r2
 80014b6:	d003      	beq.n	80014c0 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 80014b8:	693a      	ldr	r2, [r7, #16]
 80014ba:	68fb      	ldr	r3, [r7, #12]
 80014bc:	4313      	orrs	r3, r2
 80014be:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80014c0:	4914      	ldr	r1, [pc, #80]	; (8001514 <HAL_GPIO_Init+0x2b8>)
 80014c2:	2284      	movs	r2, #132	; 0x84
 80014c4:	693b      	ldr	r3, [r7, #16]
 80014c6:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 80014c8:	4a12      	ldr	r2, [pc, #72]	; (8001514 <HAL_GPIO_Init+0x2b8>)
 80014ca:	2380      	movs	r3, #128	; 0x80
 80014cc:	58d3      	ldr	r3, [r2, r3]
 80014ce:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80014d0:	68fb      	ldr	r3, [r7, #12]
 80014d2:	43da      	mvns	r2, r3
 80014d4:	693b      	ldr	r3, [r7, #16]
 80014d6:	4013      	ands	r3, r2
 80014d8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80014da:	683b      	ldr	r3, [r7, #0]
 80014dc:	685a      	ldr	r2, [r3, #4]
 80014de:	2380      	movs	r3, #128	; 0x80
 80014e0:	025b      	lsls	r3, r3, #9
 80014e2:	4013      	ands	r3, r2
 80014e4:	d003      	beq.n	80014ee <HAL_GPIO_Init+0x292>
        {
          temp |= iocurrent;
 80014e6:	693a      	ldr	r2, [r7, #16]
 80014e8:	68fb      	ldr	r3, [r7, #12]
 80014ea:	4313      	orrs	r3, r2
 80014ec:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80014ee:	4909      	ldr	r1, [pc, #36]	; (8001514 <HAL_GPIO_Init+0x2b8>)
 80014f0:	2280      	movs	r2, #128	; 0x80
 80014f2:	693b      	ldr	r3, [r7, #16]
 80014f4:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 80014f6:	697b      	ldr	r3, [r7, #20]
 80014f8:	3301      	adds	r3, #1
 80014fa:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80014fc:	683b      	ldr	r3, [r7, #0]
 80014fe:	681a      	ldr	r2, [r3, #0]
 8001500:	697b      	ldr	r3, [r7, #20]
 8001502:	40da      	lsrs	r2, r3
 8001504:	1e13      	subs	r3, r2, #0
 8001506:	d000      	beq.n	800150a <HAL_GPIO_Init+0x2ae>
 8001508:	e6b0      	b.n	800126c <HAL_GPIO_Init+0x10>
  }
}
 800150a:	46c0      	nop			; (mov r8, r8)
 800150c:	46c0      	nop			; (mov r8, r8)
 800150e:	46bd      	mov	sp, r7
 8001510:	b006      	add	sp, #24
 8001512:	bd80      	pop	{r7, pc}
 8001514:	40021800 	.word	0x40021800
 8001518:	50000400 	.word	0x50000400
 800151c:	50000800 	.word	0x50000800
 8001520:	50000c00 	.word	0x50000c00

08001524 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001524:	b580      	push	{r7, lr}
 8001526:	b082      	sub	sp, #8
 8001528:	af00      	add	r7, sp, #0
 800152a:	6078      	str	r0, [r7, #4]
 800152c:	0008      	movs	r0, r1
 800152e:	0011      	movs	r1, r2
 8001530:	1cbb      	adds	r3, r7, #2
 8001532:	1c02      	adds	r2, r0, #0
 8001534:	801a      	strh	r2, [r3, #0]
 8001536:	1c7b      	adds	r3, r7, #1
 8001538:	1c0a      	adds	r2, r1, #0
 800153a:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800153c:	1c7b      	adds	r3, r7, #1
 800153e:	781b      	ldrb	r3, [r3, #0]
 8001540:	2b00      	cmp	r3, #0
 8001542:	d004      	beq.n	800154e <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001544:	1cbb      	adds	r3, r7, #2
 8001546:	881a      	ldrh	r2, [r3, #0]
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800154c:	e003      	b.n	8001556 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800154e:	1cbb      	adds	r3, r7, #2
 8001550:	881a      	ldrh	r2, [r3, #0]
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001556:	46c0      	nop			; (mov r8, r8)
 8001558:	46bd      	mov	sp, r7
 800155a:	b002      	add	sp, #8
 800155c:	bd80      	pop	{r7, pc}
	...

08001560 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001560:	b580      	push	{r7, lr}
 8001562:	b084      	sub	sp, #16
 8001564:	af00      	add	r7, sp, #0
 8001566:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8001568:	4b19      	ldr	r3, [pc, #100]	; (80015d0 <HAL_PWREx_ControlVoltageScaling+0x70>)
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	4a19      	ldr	r2, [pc, #100]	; (80015d4 <HAL_PWREx_ControlVoltageScaling+0x74>)
 800156e:	4013      	ands	r3, r2
 8001570:	0019      	movs	r1, r3
 8001572:	4b17      	ldr	r3, [pc, #92]	; (80015d0 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8001574:	687a      	ldr	r2, [r7, #4]
 8001576:	430a      	orrs	r2, r1
 8001578:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800157a:	687a      	ldr	r2, [r7, #4]
 800157c:	2380      	movs	r3, #128	; 0x80
 800157e:	009b      	lsls	r3, r3, #2
 8001580:	429a      	cmp	r2, r3
 8001582:	d11f      	bne.n	80015c4 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 8001584:	4b14      	ldr	r3, [pc, #80]	; (80015d8 <HAL_PWREx_ControlVoltageScaling+0x78>)
 8001586:	681a      	ldr	r2, [r3, #0]
 8001588:	0013      	movs	r3, r2
 800158a:	005b      	lsls	r3, r3, #1
 800158c:	189b      	adds	r3, r3, r2
 800158e:	005b      	lsls	r3, r3, #1
 8001590:	4912      	ldr	r1, [pc, #72]	; (80015dc <HAL_PWREx_ControlVoltageScaling+0x7c>)
 8001592:	0018      	movs	r0, r3
 8001594:	f7fe fdc0 	bl	8000118 <__udivsi3>
 8001598:	0003      	movs	r3, r0
 800159a:	3301      	adds	r3, #1
 800159c:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800159e:	e008      	b.n	80015b2 <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 80015a0:	68fb      	ldr	r3, [r7, #12]
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	d003      	beq.n	80015ae <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 80015a6:	68fb      	ldr	r3, [r7, #12]
 80015a8:	3b01      	subs	r3, #1
 80015aa:	60fb      	str	r3, [r7, #12]
 80015ac:	e001      	b.n	80015b2 <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 80015ae:	2303      	movs	r3, #3
 80015b0:	e009      	b.n	80015c6 <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80015b2:	4b07      	ldr	r3, [pc, #28]	; (80015d0 <HAL_PWREx_ControlVoltageScaling+0x70>)
 80015b4:	695a      	ldr	r2, [r3, #20]
 80015b6:	2380      	movs	r3, #128	; 0x80
 80015b8:	00db      	lsls	r3, r3, #3
 80015ba:	401a      	ands	r2, r3
 80015bc:	2380      	movs	r3, #128	; 0x80
 80015be:	00db      	lsls	r3, r3, #3
 80015c0:	429a      	cmp	r2, r3
 80015c2:	d0ed      	beq.n	80015a0 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 80015c4:	2300      	movs	r3, #0
}
 80015c6:	0018      	movs	r0, r3
 80015c8:	46bd      	mov	sp, r7
 80015ca:	b004      	add	sp, #16
 80015cc:	bd80      	pop	{r7, pc}
 80015ce:	46c0      	nop			; (mov r8, r8)
 80015d0:	40007000 	.word	0x40007000
 80015d4:	fffff9ff 	.word	0xfffff9ff
 80015d8:	20000000 	.word	0x20000000
 80015dc:	000f4240 	.word	0x000f4240

080015e0 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 80015e0:	b580      	push	{r7, lr}
 80015e2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 80015e4:	4b03      	ldr	r3, [pc, #12]	; (80015f4 <LL_RCC_GetAPB1Prescaler+0x14>)
 80015e6:	689a      	ldr	r2, [r3, #8]
 80015e8:	23e0      	movs	r3, #224	; 0xe0
 80015ea:	01db      	lsls	r3, r3, #7
 80015ec:	4013      	ands	r3, r2
}
 80015ee:	0018      	movs	r0, r3
 80015f0:	46bd      	mov	sp, r7
 80015f2:	bd80      	pop	{r7, pc}
 80015f4:	40021000 	.word	0x40021000

080015f8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80015f8:	b580      	push	{r7, lr}
 80015fa:	b088      	sub	sp, #32
 80015fc:	af00      	add	r7, sp, #0
 80015fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	2b00      	cmp	r3, #0
 8001604:	d101      	bne.n	800160a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001606:	2301      	movs	r3, #1
 8001608:	e2fe      	b.n	8001c08 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	2201      	movs	r2, #1
 8001610:	4013      	ands	r3, r2
 8001612:	d100      	bne.n	8001616 <HAL_RCC_OscConfig+0x1e>
 8001614:	e07c      	b.n	8001710 <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001616:	4bc3      	ldr	r3, [pc, #780]	; (8001924 <HAL_RCC_OscConfig+0x32c>)
 8001618:	689b      	ldr	r3, [r3, #8]
 800161a:	2238      	movs	r2, #56	; 0x38
 800161c:	4013      	ands	r3, r2
 800161e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001620:	4bc0      	ldr	r3, [pc, #768]	; (8001924 <HAL_RCC_OscConfig+0x32c>)
 8001622:	68db      	ldr	r3, [r3, #12]
 8001624:	2203      	movs	r2, #3
 8001626:	4013      	ands	r3, r2
 8001628:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 800162a:	69bb      	ldr	r3, [r7, #24]
 800162c:	2b10      	cmp	r3, #16
 800162e:	d102      	bne.n	8001636 <HAL_RCC_OscConfig+0x3e>
 8001630:	697b      	ldr	r3, [r7, #20]
 8001632:	2b03      	cmp	r3, #3
 8001634:	d002      	beq.n	800163c <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 8001636:	69bb      	ldr	r3, [r7, #24]
 8001638:	2b08      	cmp	r3, #8
 800163a:	d10b      	bne.n	8001654 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800163c:	4bb9      	ldr	r3, [pc, #740]	; (8001924 <HAL_RCC_OscConfig+0x32c>)
 800163e:	681a      	ldr	r2, [r3, #0]
 8001640:	2380      	movs	r3, #128	; 0x80
 8001642:	029b      	lsls	r3, r3, #10
 8001644:	4013      	ands	r3, r2
 8001646:	d062      	beq.n	800170e <HAL_RCC_OscConfig+0x116>
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	685b      	ldr	r3, [r3, #4]
 800164c:	2b00      	cmp	r3, #0
 800164e:	d15e      	bne.n	800170e <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 8001650:	2301      	movs	r3, #1
 8001652:	e2d9      	b.n	8001c08 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	685a      	ldr	r2, [r3, #4]
 8001658:	2380      	movs	r3, #128	; 0x80
 800165a:	025b      	lsls	r3, r3, #9
 800165c:	429a      	cmp	r2, r3
 800165e:	d107      	bne.n	8001670 <HAL_RCC_OscConfig+0x78>
 8001660:	4bb0      	ldr	r3, [pc, #704]	; (8001924 <HAL_RCC_OscConfig+0x32c>)
 8001662:	681a      	ldr	r2, [r3, #0]
 8001664:	4baf      	ldr	r3, [pc, #700]	; (8001924 <HAL_RCC_OscConfig+0x32c>)
 8001666:	2180      	movs	r1, #128	; 0x80
 8001668:	0249      	lsls	r1, r1, #9
 800166a:	430a      	orrs	r2, r1
 800166c:	601a      	str	r2, [r3, #0]
 800166e:	e020      	b.n	80016b2 <HAL_RCC_OscConfig+0xba>
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	685a      	ldr	r2, [r3, #4]
 8001674:	23a0      	movs	r3, #160	; 0xa0
 8001676:	02db      	lsls	r3, r3, #11
 8001678:	429a      	cmp	r2, r3
 800167a:	d10e      	bne.n	800169a <HAL_RCC_OscConfig+0xa2>
 800167c:	4ba9      	ldr	r3, [pc, #676]	; (8001924 <HAL_RCC_OscConfig+0x32c>)
 800167e:	681a      	ldr	r2, [r3, #0]
 8001680:	4ba8      	ldr	r3, [pc, #672]	; (8001924 <HAL_RCC_OscConfig+0x32c>)
 8001682:	2180      	movs	r1, #128	; 0x80
 8001684:	02c9      	lsls	r1, r1, #11
 8001686:	430a      	orrs	r2, r1
 8001688:	601a      	str	r2, [r3, #0]
 800168a:	4ba6      	ldr	r3, [pc, #664]	; (8001924 <HAL_RCC_OscConfig+0x32c>)
 800168c:	681a      	ldr	r2, [r3, #0]
 800168e:	4ba5      	ldr	r3, [pc, #660]	; (8001924 <HAL_RCC_OscConfig+0x32c>)
 8001690:	2180      	movs	r1, #128	; 0x80
 8001692:	0249      	lsls	r1, r1, #9
 8001694:	430a      	orrs	r2, r1
 8001696:	601a      	str	r2, [r3, #0]
 8001698:	e00b      	b.n	80016b2 <HAL_RCC_OscConfig+0xba>
 800169a:	4ba2      	ldr	r3, [pc, #648]	; (8001924 <HAL_RCC_OscConfig+0x32c>)
 800169c:	681a      	ldr	r2, [r3, #0]
 800169e:	4ba1      	ldr	r3, [pc, #644]	; (8001924 <HAL_RCC_OscConfig+0x32c>)
 80016a0:	49a1      	ldr	r1, [pc, #644]	; (8001928 <HAL_RCC_OscConfig+0x330>)
 80016a2:	400a      	ands	r2, r1
 80016a4:	601a      	str	r2, [r3, #0]
 80016a6:	4b9f      	ldr	r3, [pc, #636]	; (8001924 <HAL_RCC_OscConfig+0x32c>)
 80016a8:	681a      	ldr	r2, [r3, #0]
 80016aa:	4b9e      	ldr	r3, [pc, #632]	; (8001924 <HAL_RCC_OscConfig+0x32c>)
 80016ac:	499f      	ldr	r1, [pc, #636]	; (800192c <HAL_RCC_OscConfig+0x334>)
 80016ae:	400a      	ands	r2, r1
 80016b0:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	685b      	ldr	r3, [r3, #4]
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	d014      	beq.n	80016e4 <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80016ba:	f7ff fced 	bl	8001098 <HAL_GetTick>
 80016be:	0003      	movs	r3, r0
 80016c0:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80016c2:	e008      	b.n	80016d6 <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80016c4:	f7ff fce8 	bl	8001098 <HAL_GetTick>
 80016c8:	0002      	movs	r2, r0
 80016ca:	693b      	ldr	r3, [r7, #16]
 80016cc:	1ad3      	subs	r3, r2, r3
 80016ce:	2b64      	cmp	r3, #100	; 0x64
 80016d0:	d901      	bls.n	80016d6 <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 80016d2:	2303      	movs	r3, #3
 80016d4:	e298      	b.n	8001c08 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80016d6:	4b93      	ldr	r3, [pc, #588]	; (8001924 <HAL_RCC_OscConfig+0x32c>)
 80016d8:	681a      	ldr	r2, [r3, #0]
 80016da:	2380      	movs	r3, #128	; 0x80
 80016dc:	029b      	lsls	r3, r3, #10
 80016de:	4013      	ands	r3, r2
 80016e0:	d0f0      	beq.n	80016c4 <HAL_RCC_OscConfig+0xcc>
 80016e2:	e015      	b.n	8001710 <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80016e4:	f7ff fcd8 	bl	8001098 <HAL_GetTick>
 80016e8:	0003      	movs	r3, r0
 80016ea:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80016ec:	e008      	b.n	8001700 <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80016ee:	f7ff fcd3 	bl	8001098 <HAL_GetTick>
 80016f2:	0002      	movs	r2, r0
 80016f4:	693b      	ldr	r3, [r7, #16]
 80016f6:	1ad3      	subs	r3, r2, r3
 80016f8:	2b64      	cmp	r3, #100	; 0x64
 80016fa:	d901      	bls.n	8001700 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 80016fc:	2303      	movs	r3, #3
 80016fe:	e283      	b.n	8001c08 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001700:	4b88      	ldr	r3, [pc, #544]	; (8001924 <HAL_RCC_OscConfig+0x32c>)
 8001702:	681a      	ldr	r2, [r3, #0]
 8001704:	2380      	movs	r3, #128	; 0x80
 8001706:	029b      	lsls	r3, r3, #10
 8001708:	4013      	ands	r3, r2
 800170a:	d1f0      	bne.n	80016ee <HAL_RCC_OscConfig+0xf6>
 800170c:	e000      	b.n	8001710 <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800170e:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	2202      	movs	r2, #2
 8001716:	4013      	ands	r3, r2
 8001718:	d100      	bne.n	800171c <HAL_RCC_OscConfig+0x124>
 800171a:	e099      	b.n	8001850 <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800171c:	4b81      	ldr	r3, [pc, #516]	; (8001924 <HAL_RCC_OscConfig+0x32c>)
 800171e:	689b      	ldr	r3, [r3, #8]
 8001720:	2238      	movs	r2, #56	; 0x38
 8001722:	4013      	ands	r3, r2
 8001724:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001726:	4b7f      	ldr	r3, [pc, #508]	; (8001924 <HAL_RCC_OscConfig+0x32c>)
 8001728:	68db      	ldr	r3, [r3, #12]
 800172a:	2203      	movs	r2, #3
 800172c:	4013      	ands	r3, r2
 800172e:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 8001730:	69bb      	ldr	r3, [r7, #24]
 8001732:	2b10      	cmp	r3, #16
 8001734:	d102      	bne.n	800173c <HAL_RCC_OscConfig+0x144>
 8001736:	697b      	ldr	r3, [r7, #20]
 8001738:	2b02      	cmp	r3, #2
 800173a:	d002      	beq.n	8001742 <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 800173c:	69bb      	ldr	r3, [r7, #24]
 800173e:	2b00      	cmp	r3, #0
 8001740:	d135      	bne.n	80017ae <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001742:	4b78      	ldr	r3, [pc, #480]	; (8001924 <HAL_RCC_OscConfig+0x32c>)
 8001744:	681a      	ldr	r2, [r3, #0]
 8001746:	2380      	movs	r3, #128	; 0x80
 8001748:	00db      	lsls	r3, r3, #3
 800174a:	4013      	ands	r3, r2
 800174c:	d005      	beq.n	800175a <HAL_RCC_OscConfig+0x162>
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	68db      	ldr	r3, [r3, #12]
 8001752:	2b00      	cmp	r3, #0
 8001754:	d101      	bne.n	800175a <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 8001756:	2301      	movs	r3, #1
 8001758:	e256      	b.n	8001c08 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800175a:	4b72      	ldr	r3, [pc, #456]	; (8001924 <HAL_RCC_OscConfig+0x32c>)
 800175c:	685b      	ldr	r3, [r3, #4]
 800175e:	4a74      	ldr	r2, [pc, #464]	; (8001930 <HAL_RCC_OscConfig+0x338>)
 8001760:	4013      	ands	r3, r2
 8001762:	0019      	movs	r1, r3
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	695b      	ldr	r3, [r3, #20]
 8001768:	021a      	lsls	r2, r3, #8
 800176a:	4b6e      	ldr	r3, [pc, #440]	; (8001924 <HAL_RCC_OscConfig+0x32c>)
 800176c:	430a      	orrs	r2, r1
 800176e:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001770:	69bb      	ldr	r3, [r7, #24]
 8001772:	2b00      	cmp	r3, #0
 8001774:	d112      	bne.n	800179c <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8001776:	4b6b      	ldr	r3, [pc, #428]	; (8001924 <HAL_RCC_OscConfig+0x32c>)
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	4a6e      	ldr	r2, [pc, #440]	; (8001934 <HAL_RCC_OscConfig+0x33c>)
 800177c:	4013      	ands	r3, r2
 800177e:	0019      	movs	r1, r3
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	691a      	ldr	r2, [r3, #16]
 8001784:	4b67      	ldr	r3, [pc, #412]	; (8001924 <HAL_RCC_OscConfig+0x32c>)
 8001786:	430a      	orrs	r2, r1
 8001788:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 800178a:	4b66      	ldr	r3, [pc, #408]	; (8001924 <HAL_RCC_OscConfig+0x32c>)
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	0adb      	lsrs	r3, r3, #11
 8001790:	2207      	movs	r2, #7
 8001792:	4013      	ands	r3, r2
 8001794:	4a68      	ldr	r2, [pc, #416]	; (8001938 <HAL_RCC_OscConfig+0x340>)
 8001796:	40da      	lsrs	r2, r3
 8001798:	4b68      	ldr	r3, [pc, #416]	; (800193c <HAL_RCC_OscConfig+0x344>)
 800179a:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800179c:	4b68      	ldr	r3, [pc, #416]	; (8001940 <HAL_RCC_OscConfig+0x348>)
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	0018      	movs	r0, r3
 80017a2:	f7ff fc1d 	bl	8000fe0 <HAL_InitTick>
 80017a6:	1e03      	subs	r3, r0, #0
 80017a8:	d051      	beq.n	800184e <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 80017aa:	2301      	movs	r3, #1
 80017ac:	e22c      	b.n	8001c08 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	68db      	ldr	r3, [r3, #12]
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	d030      	beq.n	8001818 <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 80017b6:	4b5b      	ldr	r3, [pc, #364]	; (8001924 <HAL_RCC_OscConfig+0x32c>)
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	4a5e      	ldr	r2, [pc, #376]	; (8001934 <HAL_RCC_OscConfig+0x33c>)
 80017bc:	4013      	ands	r3, r2
 80017be:	0019      	movs	r1, r3
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	691a      	ldr	r2, [r3, #16]
 80017c4:	4b57      	ldr	r3, [pc, #348]	; (8001924 <HAL_RCC_OscConfig+0x32c>)
 80017c6:	430a      	orrs	r2, r1
 80017c8:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 80017ca:	4b56      	ldr	r3, [pc, #344]	; (8001924 <HAL_RCC_OscConfig+0x32c>)
 80017cc:	681a      	ldr	r2, [r3, #0]
 80017ce:	4b55      	ldr	r3, [pc, #340]	; (8001924 <HAL_RCC_OscConfig+0x32c>)
 80017d0:	2180      	movs	r1, #128	; 0x80
 80017d2:	0049      	lsls	r1, r1, #1
 80017d4:	430a      	orrs	r2, r1
 80017d6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017d8:	f7ff fc5e 	bl	8001098 <HAL_GetTick>
 80017dc:	0003      	movs	r3, r0
 80017de:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80017e0:	e008      	b.n	80017f4 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80017e2:	f7ff fc59 	bl	8001098 <HAL_GetTick>
 80017e6:	0002      	movs	r2, r0
 80017e8:	693b      	ldr	r3, [r7, #16]
 80017ea:	1ad3      	subs	r3, r2, r3
 80017ec:	2b02      	cmp	r3, #2
 80017ee:	d901      	bls.n	80017f4 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 80017f0:	2303      	movs	r3, #3
 80017f2:	e209      	b.n	8001c08 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80017f4:	4b4b      	ldr	r3, [pc, #300]	; (8001924 <HAL_RCC_OscConfig+0x32c>)
 80017f6:	681a      	ldr	r2, [r3, #0]
 80017f8:	2380      	movs	r3, #128	; 0x80
 80017fa:	00db      	lsls	r3, r3, #3
 80017fc:	4013      	ands	r3, r2
 80017fe:	d0f0      	beq.n	80017e2 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001800:	4b48      	ldr	r3, [pc, #288]	; (8001924 <HAL_RCC_OscConfig+0x32c>)
 8001802:	685b      	ldr	r3, [r3, #4]
 8001804:	4a4a      	ldr	r2, [pc, #296]	; (8001930 <HAL_RCC_OscConfig+0x338>)
 8001806:	4013      	ands	r3, r2
 8001808:	0019      	movs	r1, r3
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	695b      	ldr	r3, [r3, #20]
 800180e:	021a      	lsls	r2, r3, #8
 8001810:	4b44      	ldr	r3, [pc, #272]	; (8001924 <HAL_RCC_OscConfig+0x32c>)
 8001812:	430a      	orrs	r2, r1
 8001814:	605a      	str	r2, [r3, #4]
 8001816:	e01b      	b.n	8001850 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 8001818:	4b42      	ldr	r3, [pc, #264]	; (8001924 <HAL_RCC_OscConfig+0x32c>)
 800181a:	681a      	ldr	r2, [r3, #0]
 800181c:	4b41      	ldr	r3, [pc, #260]	; (8001924 <HAL_RCC_OscConfig+0x32c>)
 800181e:	4949      	ldr	r1, [pc, #292]	; (8001944 <HAL_RCC_OscConfig+0x34c>)
 8001820:	400a      	ands	r2, r1
 8001822:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001824:	f7ff fc38 	bl	8001098 <HAL_GetTick>
 8001828:	0003      	movs	r3, r0
 800182a:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800182c:	e008      	b.n	8001840 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800182e:	f7ff fc33 	bl	8001098 <HAL_GetTick>
 8001832:	0002      	movs	r2, r0
 8001834:	693b      	ldr	r3, [r7, #16]
 8001836:	1ad3      	subs	r3, r2, r3
 8001838:	2b02      	cmp	r3, #2
 800183a:	d901      	bls.n	8001840 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 800183c:	2303      	movs	r3, #3
 800183e:	e1e3      	b.n	8001c08 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001840:	4b38      	ldr	r3, [pc, #224]	; (8001924 <HAL_RCC_OscConfig+0x32c>)
 8001842:	681a      	ldr	r2, [r3, #0]
 8001844:	2380      	movs	r3, #128	; 0x80
 8001846:	00db      	lsls	r3, r3, #3
 8001848:	4013      	ands	r3, r2
 800184a:	d1f0      	bne.n	800182e <HAL_RCC_OscConfig+0x236>
 800184c:	e000      	b.n	8001850 <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800184e:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	2208      	movs	r2, #8
 8001856:	4013      	ands	r3, r2
 8001858:	d047      	beq.n	80018ea <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 800185a:	4b32      	ldr	r3, [pc, #200]	; (8001924 <HAL_RCC_OscConfig+0x32c>)
 800185c:	689b      	ldr	r3, [r3, #8]
 800185e:	2238      	movs	r2, #56	; 0x38
 8001860:	4013      	ands	r3, r2
 8001862:	2b18      	cmp	r3, #24
 8001864:	d10a      	bne.n	800187c <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 8001866:	4b2f      	ldr	r3, [pc, #188]	; (8001924 <HAL_RCC_OscConfig+0x32c>)
 8001868:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800186a:	2202      	movs	r2, #2
 800186c:	4013      	ands	r3, r2
 800186e:	d03c      	beq.n	80018ea <HAL_RCC_OscConfig+0x2f2>
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	699b      	ldr	r3, [r3, #24]
 8001874:	2b00      	cmp	r3, #0
 8001876:	d138      	bne.n	80018ea <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 8001878:	2301      	movs	r3, #1
 800187a:	e1c5      	b.n	8001c08 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	699b      	ldr	r3, [r3, #24]
 8001880:	2b00      	cmp	r3, #0
 8001882:	d019      	beq.n	80018b8 <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8001884:	4b27      	ldr	r3, [pc, #156]	; (8001924 <HAL_RCC_OscConfig+0x32c>)
 8001886:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001888:	4b26      	ldr	r3, [pc, #152]	; (8001924 <HAL_RCC_OscConfig+0x32c>)
 800188a:	2101      	movs	r1, #1
 800188c:	430a      	orrs	r2, r1
 800188e:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001890:	f7ff fc02 	bl	8001098 <HAL_GetTick>
 8001894:	0003      	movs	r3, r0
 8001896:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001898:	e008      	b.n	80018ac <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800189a:	f7ff fbfd 	bl	8001098 <HAL_GetTick>
 800189e:	0002      	movs	r2, r0
 80018a0:	693b      	ldr	r3, [r7, #16]
 80018a2:	1ad3      	subs	r3, r2, r3
 80018a4:	2b02      	cmp	r3, #2
 80018a6:	d901      	bls.n	80018ac <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 80018a8:	2303      	movs	r3, #3
 80018aa:	e1ad      	b.n	8001c08 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80018ac:	4b1d      	ldr	r3, [pc, #116]	; (8001924 <HAL_RCC_OscConfig+0x32c>)
 80018ae:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80018b0:	2202      	movs	r2, #2
 80018b2:	4013      	ands	r3, r2
 80018b4:	d0f1      	beq.n	800189a <HAL_RCC_OscConfig+0x2a2>
 80018b6:	e018      	b.n	80018ea <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 80018b8:	4b1a      	ldr	r3, [pc, #104]	; (8001924 <HAL_RCC_OscConfig+0x32c>)
 80018ba:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80018bc:	4b19      	ldr	r3, [pc, #100]	; (8001924 <HAL_RCC_OscConfig+0x32c>)
 80018be:	2101      	movs	r1, #1
 80018c0:	438a      	bics	r2, r1
 80018c2:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018c4:	f7ff fbe8 	bl	8001098 <HAL_GetTick>
 80018c8:	0003      	movs	r3, r0
 80018ca:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80018cc:	e008      	b.n	80018e0 <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80018ce:	f7ff fbe3 	bl	8001098 <HAL_GetTick>
 80018d2:	0002      	movs	r2, r0
 80018d4:	693b      	ldr	r3, [r7, #16]
 80018d6:	1ad3      	subs	r3, r2, r3
 80018d8:	2b02      	cmp	r3, #2
 80018da:	d901      	bls.n	80018e0 <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 80018dc:	2303      	movs	r3, #3
 80018de:	e193      	b.n	8001c08 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80018e0:	4b10      	ldr	r3, [pc, #64]	; (8001924 <HAL_RCC_OscConfig+0x32c>)
 80018e2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80018e4:	2202      	movs	r2, #2
 80018e6:	4013      	ands	r3, r2
 80018e8:	d1f1      	bne.n	80018ce <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	2204      	movs	r2, #4
 80018f0:	4013      	ands	r3, r2
 80018f2:	d100      	bne.n	80018f6 <HAL_RCC_OscConfig+0x2fe>
 80018f4:	e0c6      	b.n	8001a84 <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 80018f6:	231f      	movs	r3, #31
 80018f8:	18fb      	adds	r3, r7, r3
 80018fa:	2200      	movs	r2, #0
 80018fc:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 80018fe:	4b09      	ldr	r3, [pc, #36]	; (8001924 <HAL_RCC_OscConfig+0x32c>)
 8001900:	689b      	ldr	r3, [r3, #8]
 8001902:	2238      	movs	r2, #56	; 0x38
 8001904:	4013      	ands	r3, r2
 8001906:	2b20      	cmp	r3, #32
 8001908:	d11e      	bne.n	8001948 <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 800190a:	4b06      	ldr	r3, [pc, #24]	; (8001924 <HAL_RCC_OscConfig+0x32c>)
 800190c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800190e:	2202      	movs	r2, #2
 8001910:	4013      	ands	r3, r2
 8001912:	d100      	bne.n	8001916 <HAL_RCC_OscConfig+0x31e>
 8001914:	e0b6      	b.n	8001a84 <HAL_RCC_OscConfig+0x48c>
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	689b      	ldr	r3, [r3, #8]
 800191a:	2b00      	cmp	r3, #0
 800191c:	d000      	beq.n	8001920 <HAL_RCC_OscConfig+0x328>
 800191e:	e0b1      	b.n	8001a84 <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 8001920:	2301      	movs	r3, #1
 8001922:	e171      	b.n	8001c08 <HAL_RCC_OscConfig+0x610>
 8001924:	40021000 	.word	0x40021000
 8001928:	fffeffff 	.word	0xfffeffff
 800192c:	fffbffff 	.word	0xfffbffff
 8001930:	ffff80ff 	.word	0xffff80ff
 8001934:	ffffc7ff 	.word	0xffffc7ff
 8001938:	00f42400 	.word	0x00f42400
 800193c:	20000000 	.word	0x20000000
 8001940:	20000004 	.word	0x20000004
 8001944:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8001948:	4bb1      	ldr	r3, [pc, #708]	; (8001c10 <HAL_RCC_OscConfig+0x618>)
 800194a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800194c:	2380      	movs	r3, #128	; 0x80
 800194e:	055b      	lsls	r3, r3, #21
 8001950:	4013      	ands	r3, r2
 8001952:	d101      	bne.n	8001958 <HAL_RCC_OscConfig+0x360>
 8001954:	2301      	movs	r3, #1
 8001956:	e000      	b.n	800195a <HAL_RCC_OscConfig+0x362>
 8001958:	2300      	movs	r3, #0
 800195a:	2b00      	cmp	r3, #0
 800195c:	d011      	beq.n	8001982 <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 800195e:	4bac      	ldr	r3, [pc, #688]	; (8001c10 <HAL_RCC_OscConfig+0x618>)
 8001960:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001962:	4bab      	ldr	r3, [pc, #684]	; (8001c10 <HAL_RCC_OscConfig+0x618>)
 8001964:	2180      	movs	r1, #128	; 0x80
 8001966:	0549      	lsls	r1, r1, #21
 8001968:	430a      	orrs	r2, r1
 800196a:	63da      	str	r2, [r3, #60]	; 0x3c
 800196c:	4ba8      	ldr	r3, [pc, #672]	; (8001c10 <HAL_RCC_OscConfig+0x618>)
 800196e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001970:	2380      	movs	r3, #128	; 0x80
 8001972:	055b      	lsls	r3, r3, #21
 8001974:	4013      	ands	r3, r2
 8001976:	60fb      	str	r3, [r7, #12]
 8001978:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 800197a:	231f      	movs	r3, #31
 800197c:	18fb      	adds	r3, r7, r3
 800197e:	2201      	movs	r2, #1
 8001980:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001982:	4ba4      	ldr	r3, [pc, #656]	; (8001c14 <HAL_RCC_OscConfig+0x61c>)
 8001984:	681a      	ldr	r2, [r3, #0]
 8001986:	2380      	movs	r3, #128	; 0x80
 8001988:	005b      	lsls	r3, r3, #1
 800198a:	4013      	ands	r3, r2
 800198c:	d11a      	bne.n	80019c4 <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800198e:	4ba1      	ldr	r3, [pc, #644]	; (8001c14 <HAL_RCC_OscConfig+0x61c>)
 8001990:	681a      	ldr	r2, [r3, #0]
 8001992:	4ba0      	ldr	r3, [pc, #640]	; (8001c14 <HAL_RCC_OscConfig+0x61c>)
 8001994:	2180      	movs	r1, #128	; 0x80
 8001996:	0049      	lsls	r1, r1, #1
 8001998:	430a      	orrs	r2, r1
 800199a:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 800199c:	f7ff fb7c 	bl	8001098 <HAL_GetTick>
 80019a0:	0003      	movs	r3, r0
 80019a2:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80019a4:	e008      	b.n	80019b8 <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80019a6:	f7ff fb77 	bl	8001098 <HAL_GetTick>
 80019aa:	0002      	movs	r2, r0
 80019ac:	693b      	ldr	r3, [r7, #16]
 80019ae:	1ad3      	subs	r3, r2, r3
 80019b0:	2b02      	cmp	r3, #2
 80019b2:	d901      	bls.n	80019b8 <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 80019b4:	2303      	movs	r3, #3
 80019b6:	e127      	b.n	8001c08 <HAL_RCC_OscConfig+0x610>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80019b8:	4b96      	ldr	r3, [pc, #600]	; (8001c14 <HAL_RCC_OscConfig+0x61c>)
 80019ba:	681a      	ldr	r2, [r3, #0]
 80019bc:	2380      	movs	r3, #128	; 0x80
 80019be:	005b      	lsls	r3, r3, #1
 80019c0:	4013      	ands	r3, r2
 80019c2:	d0f0      	beq.n	80019a6 <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	689b      	ldr	r3, [r3, #8]
 80019c8:	2b01      	cmp	r3, #1
 80019ca:	d106      	bne.n	80019da <HAL_RCC_OscConfig+0x3e2>
 80019cc:	4b90      	ldr	r3, [pc, #576]	; (8001c10 <HAL_RCC_OscConfig+0x618>)
 80019ce:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80019d0:	4b8f      	ldr	r3, [pc, #572]	; (8001c10 <HAL_RCC_OscConfig+0x618>)
 80019d2:	2101      	movs	r1, #1
 80019d4:	430a      	orrs	r2, r1
 80019d6:	65da      	str	r2, [r3, #92]	; 0x5c
 80019d8:	e01c      	b.n	8001a14 <HAL_RCC_OscConfig+0x41c>
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	689b      	ldr	r3, [r3, #8]
 80019de:	2b05      	cmp	r3, #5
 80019e0:	d10c      	bne.n	80019fc <HAL_RCC_OscConfig+0x404>
 80019e2:	4b8b      	ldr	r3, [pc, #556]	; (8001c10 <HAL_RCC_OscConfig+0x618>)
 80019e4:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80019e6:	4b8a      	ldr	r3, [pc, #552]	; (8001c10 <HAL_RCC_OscConfig+0x618>)
 80019e8:	2104      	movs	r1, #4
 80019ea:	430a      	orrs	r2, r1
 80019ec:	65da      	str	r2, [r3, #92]	; 0x5c
 80019ee:	4b88      	ldr	r3, [pc, #544]	; (8001c10 <HAL_RCC_OscConfig+0x618>)
 80019f0:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80019f2:	4b87      	ldr	r3, [pc, #540]	; (8001c10 <HAL_RCC_OscConfig+0x618>)
 80019f4:	2101      	movs	r1, #1
 80019f6:	430a      	orrs	r2, r1
 80019f8:	65da      	str	r2, [r3, #92]	; 0x5c
 80019fa:	e00b      	b.n	8001a14 <HAL_RCC_OscConfig+0x41c>
 80019fc:	4b84      	ldr	r3, [pc, #528]	; (8001c10 <HAL_RCC_OscConfig+0x618>)
 80019fe:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001a00:	4b83      	ldr	r3, [pc, #524]	; (8001c10 <HAL_RCC_OscConfig+0x618>)
 8001a02:	2101      	movs	r1, #1
 8001a04:	438a      	bics	r2, r1
 8001a06:	65da      	str	r2, [r3, #92]	; 0x5c
 8001a08:	4b81      	ldr	r3, [pc, #516]	; (8001c10 <HAL_RCC_OscConfig+0x618>)
 8001a0a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001a0c:	4b80      	ldr	r3, [pc, #512]	; (8001c10 <HAL_RCC_OscConfig+0x618>)
 8001a0e:	2104      	movs	r1, #4
 8001a10:	438a      	bics	r2, r1
 8001a12:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	689b      	ldr	r3, [r3, #8]
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	d014      	beq.n	8001a46 <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a1c:	f7ff fb3c 	bl	8001098 <HAL_GetTick>
 8001a20:	0003      	movs	r3, r0
 8001a22:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001a24:	e009      	b.n	8001a3a <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001a26:	f7ff fb37 	bl	8001098 <HAL_GetTick>
 8001a2a:	0002      	movs	r2, r0
 8001a2c:	693b      	ldr	r3, [r7, #16]
 8001a2e:	1ad3      	subs	r3, r2, r3
 8001a30:	4a79      	ldr	r2, [pc, #484]	; (8001c18 <HAL_RCC_OscConfig+0x620>)
 8001a32:	4293      	cmp	r3, r2
 8001a34:	d901      	bls.n	8001a3a <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 8001a36:	2303      	movs	r3, #3
 8001a38:	e0e6      	b.n	8001c08 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001a3a:	4b75      	ldr	r3, [pc, #468]	; (8001c10 <HAL_RCC_OscConfig+0x618>)
 8001a3c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a3e:	2202      	movs	r2, #2
 8001a40:	4013      	ands	r3, r2
 8001a42:	d0f0      	beq.n	8001a26 <HAL_RCC_OscConfig+0x42e>
 8001a44:	e013      	b.n	8001a6e <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a46:	f7ff fb27 	bl	8001098 <HAL_GetTick>
 8001a4a:	0003      	movs	r3, r0
 8001a4c:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001a4e:	e009      	b.n	8001a64 <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001a50:	f7ff fb22 	bl	8001098 <HAL_GetTick>
 8001a54:	0002      	movs	r2, r0
 8001a56:	693b      	ldr	r3, [r7, #16]
 8001a58:	1ad3      	subs	r3, r2, r3
 8001a5a:	4a6f      	ldr	r2, [pc, #444]	; (8001c18 <HAL_RCC_OscConfig+0x620>)
 8001a5c:	4293      	cmp	r3, r2
 8001a5e:	d901      	bls.n	8001a64 <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 8001a60:	2303      	movs	r3, #3
 8001a62:	e0d1      	b.n	8001c08 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001a64:	4b6a      	ldr	r3, [pc, #424]	; (8001c10 <HAL_RCC_OscConfig+0x618>)
 8001a66:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a68:	2202      	movs	r2, #2
 8001a6a:	4013      	ands	r3, r2
 8001a6c:	d1f0      	bne.n	8001a50 <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8001a6e:	231f      	movs	r3, #31
 8001a70:	18fb      	adds	r3, r7, r3
 8001a72:	781b      	ldrb	r3, [r3, #0]
 8001a74:	2b01      	cmp	r3, #1
 8001a76:	d105      	bne.n	8001a84 <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8001a78:	4b65      	ldr	r3, [pc, #404]	; (8001c10 <HAL_RCC_OscConfig+0x618>)
 8001a7a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001a7c:	4b64      	ldr	r3, [pc, #400]	; (8001c10 <HAL_RCC_OscConfig+0x618>)
 8001a7e:	4967      	ldr	r1, [pc, #412]	; (8001c1c <HAL_RCC_OscConfig+0x624>)
 8001a80:	400a      	ands	r2, r1
 8001a82:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	69db      	ldr	r3, [r3, #28]
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	d100      	bne.n	8001a8e <HAL_RCC_OscConfig+0x496>
 8001a8c:	e0bb      	b.n	8001c06 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001a8e:	4b60      	ldr	r3, [pc, #384]	; (8001c10 <HAL_RCC_OscConfig+0x618>)
 8001a90:	689b      	ldr	r3, [r3, #8]
 8001a92:	2238      	movs	r2, #56	; 0x38
 8001a94:	4013      	ands	r3, r2
 8001a96:	2b10      	cmp	r3, #16
 8001a98:	d100      	bne.n	8001a9c <HAL_RCC_OscConfig+0x4a4>
 8001a9a:	e07b      	b.n	8001b94 <HAL_RCC_OscConfig+0x59c>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	69db      	ldr	r3, [r3, #28]
 8001aa0:	2b02      	cmp	r3, #2
 8001aa2:	d156      	bne.n	8001b52 <HAL_RCC_OscConfig+0x55a>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001aa4:	4b5a      	ldr	r3, [pc, #360]	; (8001c10 <HAL_RCC_OscConfig+0x618>)
 8001aa6:	681a      	ldr	r2, [r3, #0]
 8001aa8:	4b59      	ldr	r3, [pc, #356]	; (8001c10 <HAL_RCC_OscConfig+0x618>)
 8001aaa:	495d      	ldr	r1, [pc, #372]	; (8001c20 <HAL_RCC_OscConfig+0x628>)
 8001aac:	400a      	ands	r2, r1
 8001aae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ab0:	f7ff faf2 	bl	8001098 <HAL_GetTick>
 8001ab4:	0003      	movs	r3, r0
 8001ab6:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001ab8:	e008      	b.n	8001acc <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001aba:	f7ff faed 	bl	8001098 <HAL_GetTick>
 8001abe:	0002      	movs	r2, r0
 8001ac0:	693b      	ldr	r3, [r7, #16]
 8001ac2:	1ad3      	subs	r3, r2, r3
 8001ac4:	2b02      	cmp	r3, #2
 8001ac6:	d901      	bls.n	8001acc <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 8001ac8:	2303      	movs	r3, #3
 8001aca:	e09d      	b.n	8001c08 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001acc:	4b50      	ldr	r3, [pc, #320]	; (8001c10 <HAL_RCC_OscConfig+0x618>)
 8001ace:	681a      	ldr	r2, [r3, #0]
 8001ad0:	2380      	movs	r3, #128	; 0x80
 8001ad2:	049b      	lsls	r3, r3, #18
 8001ad4:	4013      	ands	r3, r2
 8001ad6:	d1f0      	bne.n	8001aba <HAL_RCC_OscConfig+0x4c2>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLQ_SUPPORT)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001ad8:	4b4d      	ldr	r3, [pc, #308]	; (8001c10 <HAL_RCC_OscConfig+0x618>)
 8001ada:	68db      	ldr	r3, [r3, #12]
 8001adc:	4a51      	ldr	r2, [pc, #324]	; (8001c24 <HAL_RCC_OscConfig+0x62c>)
 8001ade:	4013      	ands	r3, r2
 8001ae0:	0019      	movs	r1, r3
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	6a1a      	ldr	r2, [r3, #32]
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001aea:	431a      	orrs	r2, r3
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001af0:	021b      	lsls	r3, r3, #8
 8001af2:	431a      	orrs	r2, r3
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001af8:	431a      	orrs	r2, r3
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001afe:	431a      	orrs	r2, r3
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001b04:	431a      	orrs	r2, r3
 8001b06:	4b42      	ldr	r3, [pc, #264]	; (8001c10 <HAL_RCC_OscConfig+0x618>)
 8001b08:	430a      	orrs	r2, r1
 8001b0a:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001b0c:	4b40      	ldr	r3, [pc, #256]	; (8001c10 <HAL_RCC_OscConfig+0x618>)
 8001b0e:	681a      	ldr	r2, [r3, #0]
 8001b10:	4b3f      	ldr	r3, [pc, #252]	; (8001c10 <HAL_RCC_OscConfig+0x618>)
 8001b12:	2180      	movs	r1, #128	; 0x80
 8001b14:	0449      	lsls	r1, r1, #17
 8001b16:	430a      	orrs	r2, r1
 8001b18:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 8001b1a:	4b3d      	ldr	r3, [pc, #244]	; (8001c10 <HAL_RCC_OscConfig+0x618>)
 8001b1c:	68da      	ldr	r2, [r3, #12]
 8001b1e:	4b3c      	ldr	r3, [pc, #240]	; (8001c10 <HAL_RCC_OscConfig+0x618>)
 8001b20:	2180      	movs	r1, #128	; 0x80
 8001b22:	0549      	lsls	r1, r1, #21
 8001b24:	430a      	orrs	r2, r1
 8001b26:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b28:	f7ff fab6 	bl	8001098 <HAL_GetTick>
 8001b2c:	0003      	movs	r3, r0
 8001b2e:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001b30:	e008      	b.n	8001b44 <HAL_RCC_OscConfig+0x54c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b32:	f7ff fab1 	bl	8001098 <HAL_GetTick>
 8001b36:	0002      	movs	r2, r0
 8001b38:	693b      	ldr	r3, [r7, #16]
 8001b3a:	1ad3      	subs	r3, r2, r3
 8001b3c:	2b02      	cmp	r3, #2
 8001b3e:	d901      	bls.n	8001b44 <HAL_RCC_OscConfig+0x54c>
          {
            return HAL_TIMEOUT;
 8001b40:	2303      	movs	r3, #3
 8001b42:	e061      	b.n	8001c08 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001b44:	4b32      	ldr	r3, [pc, #200]	; (8001c10 <HAL_RCC_OscConfig+0x618>)
 8001b46:	681a      	ldr	r2, [r3, #0]
 8001b48:	2380      	movs	r3, #128	; 0x80
 8001b4a:	049b      	lsls	r3, r3, #18
 8001b4c:	4013      	ands	r3, r2
 8001b4e:	d0f0      	beq.n	8001b32 <HAL_RCC_OscConfig+0x53a>
 8001b50:	e059      	b.n	8001c06 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001b52:	4b2f      	ldr	r3, [pc, #188]	; (8001c10 <HAL_RCC_OscConfig+0x618>)
 8001b54:	681a      	ldr	r2, [r3, #0]
 8001b56:	4b2e      	ldr	r3, [pc, #184]	; (8001c10 <HAL_RCC_OscConfig+0x618>)
 8001b58:	4931      	ldr	r1, [pc, #196]	; (8001c20 <HAL_RCC_OscConfig+0x628>)
 8001b5a:	400a      	ands	r2, r1
 8001b5c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b5e:	f7ff fa9b 	bl	8001098 <HAL_GetTick>
 8001b62:	0003      	movs	r3, r0
 8001b64:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001b66:	e008      	b.n	8001b7a <HAL_RCC_OscConfig+0x582>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b68:	f7ff fa96 	bl	8001098 <HAL_GetTick>
 8001b6c:	0002      	movs	r2, r0
 8001b6e:	693b      	ldr	r3, [r7, #16]
 8001b70:	1ad3      	subs	r3, r2, r3
 8001b72:	2b02      	cmp	r3, #2
 8001b74:	d901      	bls.n	8001b7a <HAL_RCC_OscConfig+0x582>
          {
            return HAL_TIMEOUT;
 8001b76:	2303      	movs	r3, #3
 8001b78:	e046      	b.n	8001c08 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001b7a:	4b25      	ldr	r3, [pc, #148]	; (8001c10 <HAL_RCC_OscConfig+0x618>)
 8001b7c:	681a      	ldr	r2, [r3, #0]
 8001b7e:	2380      	movs	r3, #128	; 0x80
 8001b80:	049b      	lsls	r3, r3, #18
 8001b82:	4013      	ands	r3, r2
 8001b84:	d1f0      	bne.n	8001b68 <HAL_RCC_OscConfig+0x570>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 8001b86:	4b22      	ldr	r3, [pc, #136]	; (8001c10 <HAL_RCC_OscConfig+0x618>)
 8001b88:	68da      	ldr	r2, [r3, #12]
 8001b8a:	4b21      	ldr	r3, [pc, #132]	; (8001c10 <HAL_RCC_OscConfig+0x618>)
 8001b8c:	4926      	ldr	r1, [pc, #152]	; (8001c28 <HAL_RCC_OscConfig+0x630>)
 8001b8e:	400a      	ands	r2, r1
 8001b90:	60da      	str	r2, [r3, #12]
 8001b92:	e038      	b.n	8001c06 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	69db      	ldr	r3, [r3, #28]
 8001b98:	2b01      	cmp	r3, #1
 8001b9a:	d101      	bne.n	8001ba0 <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 8001b9c:	2301      	movs	r3, #1
 8001b9e:	e033      	b.n	8001c08 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 8001ba0:	4b1b      	ldr	r3, [pc, #108]	; (8001c10 <HAL_RCC_OscConfig+0x618>)
 8001ba2:	68db      	ldr	r3, [r3, #12]
 8001ba4:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001ba6:	697b      	ldr	r3, [r7, #20]
 8001ba8:	2203      	movs	r2, #3
 8001baa:	401a      	ands	r2, r3
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	6a1b      	ldr	r3, [r3, #32]
 8001bb0:	429a      	cmp	r2, r3
 8001bb2:	d126      	bne.n	8001c02 <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001bb4:	697b      	ldr	r3, [r7, #20]
 8001bb6:	2270      	movs	r2, #112	; 0x70
 8001bb8:	401a      	ands	r2, r3
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001bbe:	429a      	cmp	r2, r3
 8001bc0:	d11f      	bne.n	8001c02 <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001bc2:	697a      	ldr	r2, [r7, #20]
 8001bc4:	23fe      	movs	r3, #254	; 0xfe
 8001bc6:	01db      	lsls	r3, r3, #7
 8001bc8:	401a      	ands	r2, r3
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001bce:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001bd0:	429a      	cmp	r2, r3
 8001bd2:	d116      	bne.n	8001c02 <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001bd4:	697a      	ldr	r2, [r7, #20]
 8001bd6:	23f8      	movs	r3, #248	; 0xf8
 8001bd8:	039b      	lsls	r3, r3, #14
 8001bda:	401a      	ands	r2, r3
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001be0:	429a      	cmp	r2, r3
 8001be2:	d10e      	bne.n	8001c02 <HAL_RCC_OscConfig+0x60a>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8001be4:	697a      	ldr	r2, [r7, #20]
 8001be6:	23e0      	movs	r3, #224	; 0xe0
 8001be8:	051b      	lsls	r3, r3, #20
 8001bea:	401a      	ands	r2, r3
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001bf0:	429a      	cmp	r2, r3
 8001bf2:	d106      	bne.n	8001c02 <HAL_RCC_OscConfig+0x60a>
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8001bf4:	697b      	ldr	r3, [r7, #20]
 8001bf6:	0f5b      	lsrs	r3, r3, #29
 8001bf8:	075a      	lsls	r2, r3, #29
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8001bfe:	429a      	cmp	r2, r3
 8001c00:	d001      	beq.n	8001c06 <HAL_RCC_OscConfig+0x60e>
        {
          return HAL_ERROR;
 8001c02:	2301      	movs	r3, #1
 8001c04:	e000      	b.n	8001c08 <HAL_RCC_OscConfig+0x610>
        }
      }
    }
  }
  return HAL_OK;
 8001c06:	2300      	movs	r3, #0
}
 8001c08:	0018      	movs	r0, r3
 8001c0a:	46bd      	mov	sp, r7
 8001c0c:	b008      	add	sp, #32
 8001c0e:	bd80      	pop	{r7, pc}
 8001c10:	40021000 	.word	0x40021000
 8001c14:	40007000 	.word	0x40007000
 8001c18:	00001388 	.word	0x00001388
 8001c1c:	efffffff 	.word	0xefffffff
 8001c20:	feffffff 	.word	0xfeffffff
 8001c24:	11c1808c 	.word	0x11c1808c
 8001c28:	eefefffc 	.word	0xeefefffc

08001c2c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001c2c:	b580      	push	{r7, lr}
 8001c2e:	b084      	sub	sp, #16
 8001c30:	af00      	add	r7, sp, #0
 8001c32:	6078      	str	r0, [r7, #4]
 8001c34:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	d101      	bne.n	8001c40 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001c3c:	2301      	movs	r3, #1
 8001c3e:	e0e9      	b.n	8001e14 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001c40:	4b76      	ldr	r3, [pc, #472]	; (8001e1c <HAL_RCC_ClockConfig+0x1f0>)
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	2207      	movs	r2, #7
 8001c46:	4013      	ands	r3, r2
 8001c48:	683a      	ldr	r2, [r7, #0]
 8001c4a:	429a      	cmp	r2, r3
 8001c4c:	d91e      	bls.n	8001c8c <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c4e:	4b73      	ldr	r3, [pc, #460]	; (8001e1c <HAL_RCC_ClockConfig+0x1f0>)
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	2207      	movs	r2, #7
 8001c54:	4393      	bics	r3, r2
 8001c56:	0019      	movs	r1, r3
 8001c58:	4b70      	ldr	r3, [pc, #448]	; (8001e1c <HAL_RCC_ClockConfig+0x1f0>)
 8001c5a:	683a      	ldr	r2, [r7, #0]
 8001c5c:	430a      	orrs	r2, r1
 8001c5e:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001c60:	f7ff fa1a 	bl	8001098 <HAL_GetTick>
 8001c64:	0003      	movs	r3, r0
 8001c66:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001c68:	e009      	b.n	8001c7e <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001c6a:	f7ff fa15 	bl	8001098 <HAL_GetTick>
 8001c6e:	0002      	movs	r2, r0
 8001c70:	68fb      	ldr	r3, [r7, #12]
 8001c72:	1ad3      	subs	r3, r2, r3
 8001c74:	4a6a      	ldr	r2, [pc, #424]	; (8001e20 <HAL_RCC_ClockConfig+0x1f4>)
 8001c76:	4293      	cmp	r3, r2
 8001c78:	d901      	bls.n	8001c7e <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8001c7a:	2303      	movs	r3, #3
 8001c7c:	e0ca      	b.n	8001e14 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001c7e:	4b67      	ldr	r3, [pc, #412]	; (8001e1c <HAL_RCC_ClockConfig+0x1f0>)
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	2207      	movs	r2, #7
 8001c84:	4013      	ands	r3, r2
 8001c86:	683a      	ldr	r2, [r7, #0]
 8001c88:	429a      	cmp	r2, r3
 8001c8a:	d1ee      	bne.n	8001c6a <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	2202      	movs	r2, #2
 8001c92:	4013      	ands	r3, r2
 8001c94:	d015      	beq.n	8001cc2 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	2204      	movs	r2, #4
 8001c9c:	4013      	ands	r3, r2
 8001c9e:	d006      	beq.n	8001cae <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8001ca0:	4b60      	ldr	r3, [pc, #384]	; (8001e24 <HAL_RCC_ClockConfig+0x1f8>)
 8001ca2:	689a      	ldr	r2, [r3, #8]
 8001ca4:	4b5f      	ldr	r3, [pc, #380]	; (8001e24 <HAL_RCC_ClockConfig+0x1f8>)
 8001ca6:	21e0      	movs	r1, #224	; 0xe0
 8001ca8:	01c9      	lsls	r1, r1, #7
 8001caa:	430a      	orrs	r2, r1
 8001cac:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001cae:	4b5d      	ldr	r3, [pc, #372]	; (8001e24 <HAL_RCC_ClockConfig+0x1f8>)
 8001cb0:	689b      	ldr	r3, [r3, #8]
 8001cb2:	4a5d      	ldr	r2, [pc, #372]	; (8001e28 <HAL_RCC_ClockConfig+0x1fc>)
 8001cb4:	4013      	ands	r3, r2
 8001cb6:	0019      	movs	r1, r3
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	689a      	ldr	r2, [r3, #8]
 8001cbc:	4b59      	ldr	r3, [pc, #356]	; (8001e24 <HAL_RCC_ClockConfig+0x1f8>)
 8001cbe:	430a      	orrs	r2, r1
 8001cc0:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	2201      	movs	r2, #1
 8001cc8:	4013      	ands	r3, r2
 8001cca:	d057      	beq.n	8001d7c <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	685b      	ldr	r3, [r3, #4]
 8001cd0:	2b01      	cmp	r3, #1
 8001cd2:	d107      	bne.n	8001ce4 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001cd4:	4b53      	ldr	r3, [pc, #332]	; (8001e24 <HAL_RCC_ClockConfig+0x1f8>)
 8001cd6:	681a      	ldr	r2, [r3, #0]
 8001cd8:	2380      	movs	r3, #128	; 0x80
 8001cda:	029b      	lsls	r3, r3, #10
 8001cdc:	4013      	ands	r3, r2
 8001cde:	d12b      	bne.n	8001d38 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001ce0:	2301      	movs	r3, #1
 8001ce2:	e097      	b.n	8001e14 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	685b      	ldr	r3, [r3, #4]
 8001ce8:	2b02      	cmp	r3, #2
 8001cea:	d107      	bne.n	8001cfc <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001cec:	4b4d      	ldr	r3, [pc, #308]	; (8001e24 <HAL_RCC_ClockConfig+0x1f8>)
 8001cee:	681a      	ldr	r2, [r3, #0]
 8001cf0:	2380      	movs	r3, #128	; 0x80
 8001cf2:	049b      	lsls	r3, r3, #18
 8001cf4:	4013      	ands	r3, r2
 8001cf6:	d11f      	bne.n	8001d38 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001cf8:	2301      	movs	r3, #1
 8001cfa:	e08b      	b.n	8001e14 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	685b      	ldr	r3, [r3, #4]
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	d107      	bne.n	8001d14 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001d04:	4b47      	ldr	r3, [pc, #284]	; (8001e24 <HAL_RCC_ClockConfig+0x1f8>)
 8001d06:	681a      	ldr	r2, [r3, #0]
 8001d08:	2380      	movs	r3, #128	; 0x80
 8001d0a:	00db      	lsls	r3, r3, #3
 8001d0c:	4013      	ands	r3, r2
 8001d0e:	d113      	bne.n	8001d38 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001d10:	2301      	movs	r3, #1
 8001d12:	e07f      	b.n	8001e14 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	685b      	ldr	r3, [r3, #4]
 8001d18:	2b03      	cmp	r3, #3
 8001d1a:	d106      	bne.n	8001d2a <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001d1c:	4b41      	ldr	r3, [pc, #260]	; (8001e24 <HAL_RCC_ClockConfig+0x1f8>)
 8001d1e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001d20:	2202      	movs	r2, #2
 8001d22:	4013      	ands	r3, r2
 8001d24:	d108      	bne.n	8001d38 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001d26:	2301      	movs	r3, #1
 8001d28:	e074      	b.n	8001e14 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001d2a:	4b3e      	ldr	r3, [pc, #248]	; (8001e24 <HAL_RCC_ClockConfig+0x1f8>)
 8001d2c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d2e:	2202      	movs	r2, #2
 8001d30:	4013      	ands	r3, r2
 8001d32:	d101      	bne.n	8001d38 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001d34:	2301      	movs	r3, #1
 8001d36:	e06d      	b.n	8001e14 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001d38:	4b3a      	ldr	r3, [pc, #232]	; (8001e24 <HAL_RCC_ClockConfig+0x1f8>)
 8001d3a:	689b      	ldr	r3, [r3, #8]
 8001d3c:	2207      	movs	r2, #7
 8001d3e:	4393      	bics	r3, r2
 8001d40:	0019      	movs	r1, r3
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	685a      	ldr	r2, [r3, #4]
 8001d46:	4b37      	ldr	r3, [pc, #220]	; (8001e24 <HAL_RCC_ClockConfig+0x1f8>)
 8001d48:	430a      	orrs	r2, r1
 8001d4a:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001d4c:	f7ff f9a4 	bl	8001098 <HAL_GetTick>
 8001d50:	0003      	movs	r3, r0
 8001d52:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001d54:	e009      	b.n	8001d6a <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001d56:	f7ff f99f 	bl	8001098 <HAL_GetTick>
 8001d5a:	0002      	movs	r2, r0
 8001d5c:	68fb      	ldr	r3, [r7, #12]
 8001d5e:	1ad3      	subs	r3, r2, r3
 8001d60:	4a2f      	ldr	r2, [pc, #188]	; (8001e20 <HAL_RCC_ClockConfig+0x1f4>)
 8001d62:	4293      	cmp	r3, r2
 8001d64:	d901      	bls.n	8001d6a <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 8001d66:	2303      	movs	r3, #3
 8001d68:	e054      	b.n	8001e14 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001d6a:	4b2e      	ldr	r3, [pc, #184]	; (8001e24 <HAL_RCC_ClockConfig+0x1f8>)
 8001d6c:	689b      	ldr	r3, [r3, #8]
 8001d6e:	2238      	movs	r2, #56	; 0x38
 8001d70:	401a      	ands	r2, r3
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	685b      	ldr	r3, [r3, #4]
 8001d76:	00db      	lsls	r3, r3, #3
 8001d78:	429a      	cmp	r2, r3
 8001d7a:	d1ec      	bne.n	8001d56 <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001d7c:	4b27      	ldr	r3, [pc, #156]	; (8001e1c <HAL_RCC_ClockConfig+0x1f0>)
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	2207      	movs	r2, #7
 8001d82:	4013      	ands	r3, r2
 8001d84:	683a      	ldr	r2, [r7, #0]
 8001d86:	429a      	cmp	r2, r3
 8001d88:	d21e      	bcs.n	8001dc8 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d8a:	4b24      	ldr	r3, [pc, #144]	; (8001e1c <HAL_RCC_ClockConfig+0x1f0>)
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	2207      	movs	r2, #7
 8001d90:	4393      	bics	r3, r2
 8001d92:	0019      	movs	r1, r3
 8001d94:	4b21      	ldr	r3, [pc, #132]	; (8001e1c <HAL_RCC_ClockConfig+0x1f0>)
 8001d96:	683a      	ldr	r2, [r7, #0]
 8001d98:	430a      	orrs	r2, r1
 8001d9a:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001d9c:	f7ff f97c 	bl	8001098 <HAL_GetTick>
 8001da0:	0003      	movs	r3, r0
 8001da2:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001da4:	e009      	b.n	8001dba <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001da6:	f7ff f977 	bl	8001098 <HAL_GetTick>
 8001daa:	0002      	movs	r2, r0
 8001dac:	68fb      	ldr	r3, [r7, #12]
 8001dae:	1ad3      	subs	r3, r2, r3
 8001db0:	4a1b      	ldr	r2, [pc, #108]	; (8001e20 <HAL_RCC_ClockConfig+0x1f4>)
 8001db2:	4293      	cmp	r3, r2
 8001db4:	d901      	bls.n	8001dba <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 8001db6:	2303      	movs	r3, #3
 8001db8:	e02c      	b.n	8001e14 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001dba:	4b18      	ldr	r3, [pc, #96]	; (8001e1c <HAL_RCC_ClockConfig+0x1f0>)
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	2207      	movs	r2, #7
 8001dc0:	4013      	ands	r3, r2
 8001dc2:	683a      	ldr	r2, [r7, #0]
 8001dc4:	429a      	cmp	r2, r3
 8001dc6:	d1ee      	bne.n	8001da6 <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	2204      	movs	r2, #4
 8001dce:	4013      	ands	r3, r2
 8001dd0:	d009      	beq.n	8001de6 <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8001dd2:	4b14      	ldr	r3, [pc, #80]	; (8001e24 <HAL_RCC_ClockConfig+0x1f8>)
 8001dd4:	689b      	ldr	r3, [r3, #8]
 8001dd6:	4a15      	ldr	r2, [pc, #84]	; (8001e2c <HAL_RCC_ClockConfig+0x200>)
 8001dd8:	4013      	ands	r3, r2
 8001dda:	0019      	movs	r1, r3
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	68da      	ldr	r2, [r3, #12]
 8001de0:	4b10      	ldr	r3, [pc, #64]	; (8001e24 <HAL_RCC_ClockConfig+0x1f8>)
 8001de2:	430a      	orrs	r2, r1
 8001de4:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8001de6:	f000 f829 	bl	8001e3c <HAL_RCC_GetSysClockFreq>
 8001dea:	0001      	movs	r1, r0
 8001dec:	4b0d      	ldr	r3, [pc, #52]	; (8001e24 <HAL_RCC_ClockConfig+0x1f8>)
 8001dee:	689b      	ldr	r3, [r3, #8]
 8001df0:	0a1b      	lsrs	r3, r3, #8
 8001df2:	220f      	movs	r2, #15
 8001df4:	401a      	ands	r2, r3
 8001df6:	4b0e      	ldr	r3, [pc, #56]	; (8001e30 <HAL_RCC_ClockConfig+0x204>)
 8001df8:	0092      	lsls	r2, r2, #2
 8001dfa:	58d3      	ldr	r3, [r2, r3]
 8001dfc:	221f      	movs	r2, #31
 8001dfe:	4013      	ands	r3, r2
 8001e00:	000a      	movs	r2, r1
 8001e02:	40da      	lsrs	r2, r3
 8001e04:	4b0b      	ldr	r3, [pc, #44]	; (8001e34 <HAL_RCC_ClockConfig+0x208>)
 8001e06:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8001e08:	4b0b      	ldr	r3, [pc, #44]	; (8001e38 <HAL_RCC_ClockConfig+0x20c>)
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	0018      	movs	r0, r3
 8001e0e:	f7ff f8e7 	bl	8000fe0 <HAL_InitTick>
 8001e12:	0003      	movs	r3, r0
}
 8001e14:	0018      	movs	r0, r3
 8001e16:	46bd      	mov	sp, r7
 8001e18:	b004      	add	sp, #16
 8001e1a:	bd80      	pop	{r7, pc}
 8001e1c:	40022000 	.word	0x40022000
 8001e20:	00001388 	.word	0x00001388
 8001e24:	40021000 	.word	0x40021000
 8001e28:	fffff0ff 	.word	0xfffff0ff
 8001e2c:	ffff8fff 	.word	0xffff8fff
 8001e30:	08004158 	.word	0x08004158
 8001e34:	20000000 	.word	0x20000000
 8001e38:	20000004 	.word	0x20000004

08001e3c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001e3c:	b580      	push	{r7, lr}
 8001e3e:	b086      	sub	sp, #24
 8001e40:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001e42:	4b3c      	ldr	r3, [pc, #240]	; (8001f34 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001e44:	689b      	ldr	r3, [r3, #8]
 8001e46:	2238      	movs	r2, #56	; 0x38
 8001e48:	4013      	ands	r3, r2
 8001e4a:	d10f      	bne.n	8001e6c <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8001e4c:	4b39      	ldr	r3, [pc, #228]	; (8001f34 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	0adb      	lsrs	r3, r3, #11
 8001e52:	2207      	movs	r2, #7
 8001e54:	4013      	ands	r3, r2
 8001e56:	2201      	movs	r2, #1
 8001e58:	409a      	lsls	r2, r3
 8001e5a:	0013      	movs	r3, r2
 8001e5c:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8001e5e:	6839      	ldr	r1, [r7, #0]
 8001e60:	4835      	ldr	r0, [pc, #212]	; (8001f38 <HAL_RCC_GetSysClockFreq+0xfc>)
 8001e62:	f7fe f959 	bl	8000118 <__udivsi3>
 8001e66:	0003      	movs	r3, r0
 8001e68:	613b      	str	r3, [r7, #16]
 8001e6a:	e05d      	b.n	8001f28 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001e6c:	4b31      	ldr	r3, [pc, #196]	; (8001f34 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001e6e:	689b      	ldr	r3, [r3, #8]
 8001e70:	2238      	movs	r2, #56	; 0x38
 8001e72:	4013      	ands	r3, r2
 8001e74:	2b08      	cmp	r3, #8
 8001e76:	d102      	bne.n	8001e7e <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001e78:	4b30      	ldr	r3, [pc, #192]	; (8001f3c <HAL_RCC_GetSysClockFreq+0x100>)
 8001e7a:	613b      	str	r3, [r7, #16]
 8001e7c:	e054      	b.n	8001f28 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001e7e:	4b2d      	ldr	r3, [pc, #180]	; (8001f34 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001e80:	689b      	ldr	r3, [r3, #8]
 8001e82:	2238      	movs	r2, #56	; 0x38
 8001e84:	4013      	ands	r3, r2
 8001e86:	2b10      	cmp	r3, #16
 8001e88:	d138      	bne.n	8001efc <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8001e8a:	4b2a      	ldr	r3, [pc, #168]	; (8001f34 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001e8c:	68db      	ldr	r3, [r3, #12]
 8001e8e:	2203      	movs	r2, #3
 8001e90:	4013      	ands	r3, r2
 8001e92:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001e94:	4b27      	ldr	r3, [pc, #156]	; (8001f34 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001e96:	68db      	ldr	r3, [r3, #12]
 8001e98:	091b      	lsrs	r3, r3, #4
 8001e9a:	2207      	movs	r2, #7
 8001e9c:	4013      	ands	r3, r2
 8001e9e:	3301      	adds	r3, #1
 8001ea0:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001ea2:	68fb      	ldr	r3, [r7, #12]
 8001ea4:	2b03      	cmp	r3, #3
 8001ea6:	d10d      	bne.n	8001ec4 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001ea8:	68b9      	ldr	r1, [r7, #8]
 8001eaa:	4824      	ldr	r0, [pc, #144]	; (8001f3c <HAL_RCC_GetSysClockFreq+0x100>)
 8001eac:	f7fe f934 	bl	8000118 <__udivsi3>
 8001eb0:	0003      	movs	r3, r0
 8001eb2:	0019      	movs	r1, r3
 8001eb4:	4b1f      	ldr	r3, [pc, #124]	; (8001f34 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001eb6:	68db      	ldr	r3, [r3, #12]
 8001eb8:	0a1b      	lsrs	r3, r3, #8
 8001eba:	227f      	movs	r2, #127	; 0x7f
 8001ebc:	4013      	ands	r3, r2
 8001ebe:	434b      	muls	r3, r1
 8001ec0:	617b      	str	r3, [r7, #20]
        break;
 8001ec2:	e00d      	b.n	8001ee0 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8001ec4:	68b9      	ldr	r1, [r7, #8]
 8001ec6:	481c      	ldr	r0, [pc, #112]	; (8001f38 <HAL_RCC_GetSysClockFreq+0xfc>)
 8001ec8:	f7fe f926 	bl	8000118 <__udivsi3>
 8001ecc:	0003      	movs	r3, r0
 8001ece:	0019      	movs	r1, r3
 8001ed0:	4b18      	ldr	r3, [pc, #96]	; (8001f34 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001ed2:	68db      	ldr	r3, [r3, #12]
 8001ed4:	0a1b      	lsrs	r3, r3, #8
 8001ed6:	227f      	movs	r2, #127	; 0x7f
 8001ed8:	4013      	ands	r3, r2
 8001eda:	434b      	muls	r3, r1
 8001edc:	617b      	str	r3, [r7, #20]
        break;
 8001ede:	46c0      	nop			; (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8001ee0:	4b14      	ldr	r3, [pc, #80]	; (8001f34 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001ee2:	68db      	ldr	r3, [r3, #12]
 8001ee4:	0f5b      	lsrs	r3, r3, #29
 8001ee6:	2207      	movs	r2, #7
 8001ee8:	4013      	ands	r3, r2
 8001eea:	3301      	adds	r3, #1
 8001eec:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 8001eee:	6879      	ldr	r1, [r7, #4]
 8001ef0:	6978      	ldr	r0, [r7, #20]
 8001ef2:	f7fe f911 	bl	8000118 <__udivsi3>
 8001ef6:	0003      	movs	r3, r0
 8001ef8:	613b      	str	r3, [r7, #16]
 8001efa:	e015      	b.n	8001f28 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8001efc:	4b0d      	ldr	r3, [pc, #52]	; (8001f34 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001efe:	689b      	ldr	r3, [r3, #8]
 8001f00:	2238      	movs	r2, #56	; 0x38
 8001f02:	4013      	ands	r3, r2
 8001f04:	2b20      	cmp	r3, #32
 8001f06:	d103      	bne.n	8001f10 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8001f08:	2380      	movs	r3, #128	; 0x80
 8001f0a:	021b      	lsls	r3, r3, #8
 8001f0c:	613b      	str	r3, [r7, #16]
 8001f0e:	e00b      	b.n	8001f28 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8001f10:	4b08      	ldr	r3, [pc, #32]	; (8001f34 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001f12:	689b      	ldr	r3, [r3, #8]
 8001f14:	2238      	movs	r2, #56	; 0x38
 8001f16:	4013      	ands	r3, r2
 8001f18:	2b18      	cmp	r3, #24
 8001f1a:	d103      	bne.n	8001f24 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8001f1c:	23fa      	movs	r3, #250	; 0xfa
 8001f1e:	01db      	lsls	r3, r3, #7
 8001f20:	613b      	str	r3, [r7, #16]
 8001f22:	e001      	b.n	8001f28 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 8001f24:	2300      	movs	r3, #0
 8001f26:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8001f28:	693b      	ldr	r3, [r7, #16]
}
 8001f2a:	0018      	movs	r0, r3
 8001f2c:	46bd      	mov	sp, r7
 8001f2e:	b006      	add	sp, #24
 8001f30:	bd80      	pop	{r7, pc}
 8001f32:	46c0      	nop			; (mov r8, r8)
 8001f34:	40021000 	.word	0x40021000
 8001f38:	00f42400 	.word	0x00f42400
 8001f3c:	007a1200 	.word	0x007a1200

08001f40 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001f40:	b580      	push	{r7, lr}
 8001f42:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001f44:	4b02      	ldr	r3, [pc, #8]	; (8001f50 <HAL_RCC_GetHCLKFreq+0x10>)
 8001f46:	681b      	ldr	r3, [r3, #0]
}
 8001f48:	0018      	movs	r0, r3
 8001f4a:	46bd      	mov	sp, r7
 8001f4c:	bd80      	pop	{r7, pc}
 8001f4e:	46c0      	nop			; (mov r8, r8)
 8001f50:	20000000 	.word	0x20000000

08001f54 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001f54:	b5b0      	push	{r4, r5, r7, lr}
 8001f56:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8001f58:	f7ff fff2 	bl	8001f40 <HAL_RCC_GetHCLKFreq>
 8001f5c:	0004      	movs	r4, r0
 8001f5e:	f7ff fb3f 	bl	80015e0 <LL_RCC_GetAPB1Prescaler>
 8001f62:	0003      	movs	r3, r0
 8001f64:	0b1a      	lsrs	r2, r3, #12
 8001f66:	4b05      	ldr	r3, [pc, #20]	; (8001f7c <HAL_RCC_GetPCLK1Freq+0x28>)
 8001f68:	0092      	lsls	r2, r2, #2
 8001f6a:	58d3      	ldr	r3, [r2, r3]
 8001f6c:	221f      	movs	r2, #31
 8001f6e:	4013      	ands	r3, r2
 8001f70:	40dc      	lsrs	r4, r3
 8001f72:	0023      	movs	r3, r4
}
 8001f74:	0018      	movs	r0, r3
 8001f76:	46bd      	mov	sp, r7
 8001f78:	bdb0      	pop	{r4, r5, r7, pc}
 8001f7a:	46c0      	nop			; (mov r8, r8)
 8001f7c:	08004198 	.word	0x08004198

08001f80 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001f80:	b580      	push	{r7, lr}
 8001f82:	b086      	sub	sp, #24
 8001f84:	af00      	add	r7, sp, #0
 8001f86:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 8001f88:	2313      	movs	r3, #19
 8001f8a:	18fb      	adds	r3, r7, r3
 8001f8c:	2200      	movs	r2, #0
 8001f8e:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8001f90:	2312      	movs	r3, #18
 8001f92:	18fb      	adds	r3, r7, r3
 8001f94:	2200      	movs	r2, #0
 8001f96:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	681a      	ldr	r2, [r3, #0]
 8001f9c:	2380      	movs	r3, #128	; 0x80
 8001f9e:	029b      	lsls	r3, r3, #10
 8001fa0:	4013      	ands	r3, r2
 8001fa2:	d100      	bne.n	8001fa6 <HAL_RCCEx_PeriphCLKConfig+0x26>
 8001fa4:	e0a3      	b.n	80020ee <HAL_RCCEx_PeriphCLKConfig+0x16e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001fa6:	2011      	movs	r0, #17
 8001fa8:	183b      	adds	r3, r7, r0
 8001faa:	2200      	movs	r2, #0
 8001fac:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001fae:	4bc3      	ldr	r3, [pc, #780]	; (80022bc <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001fb0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001fb2:	2380      	movs	r3, #128	; 0x80
 8001fb4:	055b      	lsls	r3, r3, #21
 8001fb6:	4013      	ands	r3, r2
 8001fb8:	d110      	bne.n	8001fdc <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001fba:	4bc0      	ldr	r3, [pc, #768]	; (80022bc <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001fbc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001fbe:	4bbf      	ldr	r3, [pc, #764]	; (80022bc <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001fc0:	2180      	movs	r1, #128	; 0x80
 8001fc2:	0549      	lsls	r1, r1, #21
 8001fc4:	430a      	orrs	r2, r1
 8001fc6:	63da      	str	r2, [r3, #60]	; 0x3c
 8001fc8:	4bbc      	ldr	r3, [pc, #752]	; (80022bc <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001fca:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001fcc:	2380      	movs	r3, #128	; 0x80
 8001fce:	055b      	lsls	r3, r3, #21
 8001fd0:	4013      	ands	r3, r2
 8001fd2:	60bb      	str	r3, [r7, #8]
 8001fd4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001fd6:	183b      	adds	r3, r7, r0
 8001fd8:	2201      	movs	r2, #1
 8001fda:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001fdc:	4bb8      	ldr	r3, [pc, #736]	; (80022c0 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 8001fde:	681a      	ldr	r2, [r3, #0]
 8001fe0:	4bb7      	ldr	r3, [pc, #732]	; (80022c0 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 8001fe2:	2180      	movs	r1, #128	; 0x80
 8001fe4:	0049      	lsls	r1, r1, #1
 8001fe6:	430a      	orrs	r2, r1
 8001fe8:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8001fea:	f7ff f855 	bl	8001098 <HAL_GetTick>
 8001fee:	0003      	movs	r3, r0
 8001ff0:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001ff2:	e00b      	b.n	800200c <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001ff4:	f7ff f850 	bl	8001098 <HAL_GetTick>
 8001ff8:	0002      	movs	r2, r0
 8001ffa:	68fb      	ldr	r3, [r7, #12]
 8001ffc:	1ad3      	subs	r3, r2, r3
 8001ffe:	2b02      	cmp	r3, #2
 8002000:	d904      	bls.n	800200c <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 8002002:	2313      	movs	r3, #19
 8002004:	18fb      	adds	r3, r7, r3
 8002006:	2203      	movs	r2, #3
 8002008:	701a      	strb	r2, [r3, #0]
        break;
 800200a:	e005      	b.n	8002018 <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800200c:	4bac      	ldr	r3, [pc, #688]	; (80022c0 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 800200e:	681a      	ldr	r2, [r3, #0]
 8002010:	2380      	movs	r3, #128	; 0x80
 8002012:	005b      	lsls	r3, r3, #1
 8002014:	4013      	ands	r3, r2
 8002016:	d0ed      	beq.n	8001ff4 <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 8002018:	2313      	movs	r3, #19
 800201a:	18fb      	adds	r3, r7, r3
 800201c:	781b      	ldrb	r3, [r3, #0]
 800201e:	2b00      	cmp	r3, #0
 8002020:	d154      	bne.n	80020cc <HAL_RCCEx_PeriphCLKConfig+0x14c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002022:	4ba6      	ldr	r3, [pc, #664]	; (80022bc <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002024:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002026:	23c0      	movs	r3, #192	; 0xc0
 8002028:	009b      	lsls	r3, r3, #2
 800202a:	4013      	ands	r3, r2
 800202c:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800202e:	697b      	ldr	r3, [r7, #20]
 8002030:	2b00      	cmp	r3, #0
 8002032:	d019      	beq.n	8002068 <HAL_RCCEx_PeriphCLKConfig+0xe8>
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002038:	697a      	ldr	r2, [r7, #20]
 800203a:	429a      	cmp	r2, r3
 800203c:	d014      	beq.n	8002068 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800203e:	4b9f      	ldr	r3, [pc, #636]	; (80022bc <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002040:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002042:	4aa0      	ldr	r2, [pc, #640]	; (80022c4 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8002044:	4013      	ands	r3, r2
 8002046:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002048:	4b9c      	ldr	r3, [pc, #624]	; (80022bc <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800204a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800204c:	4b9b      	ldr	r3, [pc, #620]	; (80022bc <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800204e:	2180      	movs	r1, #128	; 0x80
 8002050:	0249      	lsls	r1, r1, #9
 8002052:	430a      	orrs	r2, r1
 8002054:	65da      	str	r2, [r3, #92]	; 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002056:	4b99      	ldr	r3, [pc, #612]	; (80022bc <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002058:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800205a:	4b98      	ldr	r3, [pc, #608]	; (80022bc <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800205c:	499a      	ldr	r1, [pc, #616]	; (80022c8 <HAL_RCCEx_PeriphCLKConfig+0x348>)
 800205e:	400a      	ands	r2, r1
 8002060:	65da      	str	r2, [r3, #92]	; 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002062:	4b96      	ldr	r3, [pc, #600]	; (80022bc <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002064:	697a      	ldr	r2, [r7, #20]
 8002066:	65da      	str	r2, [r3, #92]	; 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002068:	697b      	ldr	r3, [r7, #20]
 800206a:	2201      	movs	r2, #1
 800206c:	4013      	ands	r3, r2
 800206e:	d016      	beq.n	800209e <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002070:	f7ff f812 	bl	8001098 <HAL_GetTick>
 8002074:	0003      	movs	r3, r0
 8002076:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002078:	e00c      	b.n	8002094 <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800207a:	f7ff f80d 	bl	8001098 <HAL_GetTick>
 800207e:	0002      	movs	r2, r0
 8002080:	68fb      	ldr	r3, [r7, #12]
 8002082:	1ad3      	subs	r3, r2, r3
 8002084:	4a91      	ldr	r2, [pc, #580]	; (80022cc <HAL_RCCEx_PeriphCLKConfig+0x34c>)
 8002086:	4293      	cmp	r3, r2
 8002088:	d904      	bls.n	8002094 <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 800208a:	2313      	movs	r3, #19
 800208c:	18fb      	adds	r3, r7, r3
 800208e:	2203      	movs	r2, #3
 8002090:	701a      	strb	r2, [r3, #0]
            break;
 8002092:	e004      	b.n	800209e <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002094:	4b89      	ldr	r3, [pc, #548]	; (80022bc <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002096:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002098:	2202      	movs	r2, #2
 800209a:	4013      	ands	r3, r2
 800209c:	d0ed      	beq.n	800207a <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 800209e:	2313      	movs	r3, #19
 80020a0:	18fb      	adds	r3, r7, r3
 80020a2:	781b      	ldrb	r3, [r3, #0]
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	d10a      	bne.n	80020be <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80020a8:	4b84      	ldr	r3, [pc, #528]	; (80022bc <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80020aa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80020ac:	4a85      	ldr	r2, [pc, #532]	; (80022c4 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 80020ae:	4013      	ands	r3, r2
 80020b0:	0019      	movs	r1, r3
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80020b6:	4b81      	ldr	r3, [pc, #516]	; (80022bc <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80020b8:	430a      	orrs	r2, r1
 80020ba:	65da      	str	r2, [r3, #92]	; 0x5c
 80020bc:	e00c      	b.n	80020d8 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80020be:	2312      	movs	r3, #18
 80020c0:	18fb      	adds	r3, r7, r3
 80020c2:	2213      	movs	r2, #19
 80020c4:	18ba      	adds	r2, r7, r2
 80020c6:	7812      	ldrb	r2, [r2, #0]
 80020c8:	701a      	strb	r2, [r3, #0]
 80020ca:	e005      	b.n	80020d8 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80020cc:	2312      	movs	r3, #18
 80020ce:	18fb      	adds	r3, r7, r3
 80020d0:	2213      	movs	r2, #19
 80020d2:	18ba      	adds	r2, r7, r2
 80020d4:	7812      	ldrb	r2, [r2, #0]
 80020d6:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80020d8:	2311      	movs	r3, #17
 80020da:	18fb      	adds	r3, r7, r3
 80020dc:	781b      	ldrb	r3, [r3, #0]
 80020de:	2b01      	cmp	r3, #1
 80020e0:	d105      	bne.n	80020ee <HAL_RCCEx_PeriphCLKConfig+0x16e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80020e2:	4b76      	ldr	r3, [pc, #472]	; (80022bc <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80020e4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80020e6:	4b75      	ldr	r3, [pc, #468]	; (80022bc <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80020e8:	4979      	ldr	r1, [pc, #484]	; (80022d0 <HAL_RCCEx_PeriphCLKConfig+0x350>)
 80020ea:	400a      	ands	r2, r1
 80020ec:	63da      	str	r2, [r3, #60]	; 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	2201      	movs	r2, #1
 80020f4:	4013      	ands	r3, r2
 80020f6:	d009      	beq.n	800210c <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80020f8:	4b70      	ldr	r3, [pc, #448]	; (80022bc <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80020fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80020fc:	2203      	movs	r2, #3
 80020fe:	4393      	bics	r3, r2
 8002100:	0019      	movs	r1, r3
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	685a      	ldr	r2, [r3, #4]
 8002106:	4b6d      	ldr	r3, [pc, #436]	; (80022bc <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002108:	430a      	orrs	r2, r1
 800210a:	655a      	str	r2, [r3, #84]	; 0x54
  }

#if defined(RCC_CCIPR_USART2SEL)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	2202      	movs	r2, #2
 8002112:	4013      	ands	r3, r2
 8002114:	d009      	beq.n	800212a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002116:	4b69      	ldr	r3, [pc, #420]	; (80022bc <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002118:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800211a:	220c      	movs	r2, #12
 800211c:	4393      	bics	r3, r2
 800211e:	0019      	movs	r1, r3
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	689a      	ldr	r2, [r3, #8]
 8002124:	4b65      	ldr	r3, [pc, #404]	; (80022bc <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002126:	430a      	orrs	r2, r1
 8002128:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_USART3SEL */

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	2210      	movs	r2, #16
 8002130:	4013      	ands	r3, r2
 8002132:	d009      	beq.n	8002148 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002134:	4b61      	ldr	r3, [pc, #388]	; (80022bc <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002136:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002138:	4a66      	ldr	r2, [pc, #408]	; (80022d4 <HAL_RCCEx_PeriphCLKConfig+0x354>)
 800213a:	4013      	ands	r3, r2
 800213c:	0019      	movs	r1, r3
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	68da      	ldr	r2, [r3, #12]
 8002142:	4b5e      	ldr	r3, [pc, #376]	; (80022bc <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002144:	430a      	orrs	r2, r1
 8002146:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* LPUART2 */

#if defined(RCC_CCIPR_LPTIM1SEL)
  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	681a      	ldr	r2, [r3, #0]
 800214c:	2380      	movs	r3, #128	; 0x80
 800214e:	009b      	lsls	r3, r3, #2
 8002150:	4013      	ands	r3, r2
 8002152:	d009      	beq.n	8002168 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
  {
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002154:	4b59      	ldr	r3, [pc, #356]	; (80022bc <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002156:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002158:	4a5f      	ldr	r2, [pc, #380]	; (80022d8 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 800215a:	4013      	ands	r3, r2
 800215c:	0019      	movs	r1, r3
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	699a      	ldr	r2, [r3, #24]
 8002162:	4b56      	ldr	r3, [pc, #344]	; (80022bc <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002164:	430a      	orrs	r2, r1
 8002166:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM1SEL */

#if defined(RCC_CCIPR_LPTIM2SEL)
  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	681a      	ldr	r2, [r3, #0]
 800216c:	2380      	movs	r3, #128	; 0x80
 800216e:	00db      	lsls	r3, r3, #3
 8002170:	4013      	ands	r3, r2
 8002172:	d009      	beq.n	8002188 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002174:	4b51      	ldr	r3, [pc, #324]	; (80022bc <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002176:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002178:	4a58      	ldr	r2, [pc, #352]	; (80022dc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800217a:	4013      	ands	r3, r2
 800217c:	0019      	movs	r1, r3
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	69da      	ldr	r2, [r3, #28]
 8002182:	4b4e      	ldr	r3, [pc, #312]	; (80022bc <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002184:	430a      	orrs	r2, r1
 8002186:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	2220      	movs	r2, #32
 800218e:	4013      	ands	r3, r2
 8002190:	d009      	beq.n	80021a6 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002192:	4b4a      	ldr	r3, [pc, #296]	; (80022bc <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002194:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002196:	4a52      	ldr	r2, [pc, #328]	; (80022e0 <HAL_RCCEx_PeriphCLKConfig+0x360>)
 8002198:	4013      	ands	r3, r2
 800219a:	0019      	movs	r1, r3
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	691a      	ldr	r2, [r3, #16]
 80021a0:	4b46      	ldr	r3, [pc, #280]	; (80022bc <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80021a2:	430a      	orrs	r2, r1
 80021a4:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	681a      	ldr	r2, [r3, #0]
 80021aa:	2380      	movs	r3, #128	; 0x80
 80021ac:	01db      	lsls	r3, r3, #7
 80021ae:	4013      	ands	r3, r2
 80021b0:	d015      	beq.n	80021de <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80021b2:	4b42      	ldr	r3, [pc, #264]	; (80022bc <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80021b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80021b6:	009b      	lsls	r3, r3, #2
 80021b8:	0899      	lsrs	r1, r3, #2
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	6a1a      	ldr	r2, [r3, #32]
 80021be:	4b3f      	ldr	r3, [pc, #252]	; (80022bc <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80021c0:	430a      	orrs	r2, r1
 80021c2:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	6a1a      	ldr	r2, [r3, #32]
 80021c8:	2380      	movs	r3, #128	; 0x80
 80021ca:	05db      	lsls	r3, r3, #23
 80021cc:	429a      	cmp	r2, r3
 80021ce:	d106      	bne.n	80021de <HAL_RCCEx_PeriphCLKConfig+0x25e>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 80021d0:	4b3a      	ldr	r3, [pc, #232]	; (80022bc <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80021d2:	68da      	ldr	r2, [r3, #12]
 80021d4:	4b39      	ldr	r3, [pc, #228]	; (80022bc <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80021d6:	2180      	movs	r1, #128	; 0x80
 80021d8:	0249      	lsls	r1, r1, #9
 80021da:	430a      	orrs	r2, r1
 80021dc:	60da      	str	r2, [r3, #12]
    }
  }

#if defined(CEC)
  /*-------------------------- CEC clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	681a      	ldr	r2, [r3, #0]
 80021e2:	2380      	movs	r3, #128	; 0x80
 80021e4:	031b      	lsls	r3, r3, #12
 80021e6:	4013      	ands	r3, r2
 80021e8:	d009      	beq.n	80021fe <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80021ea:	4b34      	ldr	r3, [pc, #208]	; (80022bc <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80021ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80021ee:	2240      	movs	r2, #64	; 0x40
 80021f0:	4393      	bics	r3, r2
 80021f2:	0019      	movs	r1, r3
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80021f8:	4b30      	ldr	r3, [pc, #192]	; (80022bc <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80021fa:	430a      	orrs	r2, r1
 80021fc:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* CEC */

#if defined(RCC_CCIPR_TIM1SEL)
  /*-------------------------- TIM1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	681a      	ldr	r2, [r3, #0]
 8002202:	2380      	movs	r3, #128	; 0x80
 8002204:	039b      	lsls	r3, r3, #14
 8002206:	4013      	ands	r3, r2
 8002208:	d016      	beq.n	8002238 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));

    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 800220a:	4b2c      	ldr	r3, [pc, #176]	; (80022bc <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800220c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800220e:	4a35      	ldr	r2, [pc, #212]	; (80022e4 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8002210:	4013      	ands	r3, r2
 8002212:	0019      	movs	r1, r3
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002218:	4b28      	ldr	r3, [pc, #160]	; (80022bc <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800221a:	430a      	orrs	r2, r1
 800221c:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim1ClockSelection == RCC_TIM1CLKSOURCE_PLL)
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002222:	2380      	movs	r3, #128	; 0x80
 8002224:	03db      	lsls	r3, r3, #15
 8002226:	429a      	cmp	r2, r3
 8002228:	d106      	bne.n	8002238 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 800222a:	4b24      	ldr	r3, [pc, #144]	; (80022bc <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800222c:	68da      	ldr	r2, [r3, #12]
 800222e:	4b23      	ldr	r3, [pc, #140]	; (80022bc <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002230:	2180      	movs	r1, #128	; 0x80
 8002232:	0449      	lsls	r1, r1, #17
 8002234:	430a      	orrs	r2, r1
 8002236:	60da      	str	r2, [r3, #12]
  }
#endif /* RCC_CCIPR_TIM1SEL */

#if defined(RCC_CCIPR_TIM15SEL)
  /*-------------------------- TIM15 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	681a      	ldr	r2, [r3, #0]
 800223c:	2380      	movs	r3, #128	; 0x80
 800223e:	03db      	lsls	r3, r3, #15
 8002240:	4013      	ands	r3, r2
 8002242:	d016      	beq.n	8002272 <HAL_RCCEx_PeriphCLKConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));

    /* Configure the TIM15 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8002244:	4b1d      	ldr	r3, [pc, #116]	; (80022bc <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002246:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002248:	4a27      	ldr	r2, [pc, #156]	; (80022e8 <HAL_RCCEx_PeriphCLKConfig+0x368>)
 800224a:	4013      	ands	r3, r2
 800224c:	0019      	movs	r1, r3
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002252:	4b1a      	ldr	r3, [pc, #104]	; (80022bc <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002254:	430a      	orrs	r2, r1
 8002256:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim15ClockSelection == RCC_TIM15CLKSOURCE_PLL)
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800225c:	2380      	movs	r3, #128	; 0x80
 800225e:	045b      	lsls	r3, r3, #17
 8002260:	429a      	cmp	r2, r3
 8002262:	d106      	bne.n	8002272 <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8002264:	4b15      	ldr	r3, [pc, #84]	; (80022bc <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002266:	68da      	ldr	r2, [r3, #12]
 8002268:	4b14      	ldr	r3, [pc, #80]	; (80022bc <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800226a:	2180      	movs	r1, #128	; 0x80
 800226c:	0449      	lsls	r1, r1, #17
 800226e:	430a      	orrs	r2, r1
 8002270:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	681a      	ldr	r2, [r3, #0]
 8002276:	2380      	movs	r3, #128	; 0x80
 8002278:	011b      	lsls	r3, r3, #4
 800227a:	4013      	ands	r3, r2
 800227c:	d016      	beq.n	80022ac <HAL_RCCEx_PeriphCLKConfig+0x32c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 800227e:	4b0f      	ldr	r3, [pc, #60]	; (80022bc <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002280:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002282:	4a1a      	ldr	r2, [pc, #104]	; (80022ec <HAL_RCCEx_PeriphCLKConfig+0x36c>)
 8002284:	4013      	ands	r3, r2
 8002286:	0019      	movs	r1, r3
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	695a      	ldr	r2, [r3, #20]
 800228c:	4b0b      	ldr	r3, [pc, #44]	; (80022bc <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800228e:	430a      	orrs	r2, r1
 8002290:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	695a      	ldr	r2, [r3, #20]
 8002296:	2380      	movs	r3, #128	; 0x80
 8002298:	01db      	lsls	r3, r3, #7
 800229a:	429a      	cmp	r2, r3
 800229c:	d106      	bne.n	80022ac <HAL_RCCEx_PeriphCLKConfig+0x32c>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 800229e:	4b07      	ldr	r3, [pc, #28]	; (80022bc <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80022a0:	68da      	ldr	r2, [r3, #12]
 80022a2:	4b06      	ldr	r3, [pc, #24]	; (80022bc <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80022a4:	2180      	movs	r1, #128	; 0x80
 80022a6:	0249      	lsls	r1, r1, #9
 80022a8:	430a      	orrs	r2, r1
 80022aa:	60da      	str	r2, [r3, #12]
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 80022ac:	2312      	movs	r3, #18
 80022ae:	18fb      	adds	r3, r7, r3
 80022b0:	781b      	ldrb	r3, [r3, #0]
}
 80022b2:	0018      	movs	r0, r3
 80022b4:	46bd      	mov	sp, r7
 80022b6:	b006      	add	sp, #24
 80022b8:	bd80      	pop	{r7, pc}
 80022ba:	46c0      	nop			; (mov r8, r8)
 80022bc:	40021000 	.word	0x40021000
 80022c0:	40007000 	.word	0x40007000
 80022c4:	fffffcff 	.word	0xfffffcff
 80022c8:	fffeffff 	.word	0xfffeffff
 80022cc:	00001388 	.word	0x00001388
 80022d0:	efffffff 	.word	0xefffffff
 80022d4:	fffff3ff 	.word	0xfffff3ff
 80022d8:	fff3ffff 	.word	0xfff3ffff
 80022dc:	ffcfffff 	.word	0xffcfffff
 80022e0:	ffffcfff 	.word	0xffffcfff
 80022e4:	ffbfffff 	.word	0xffbfffff
 80022e8:	feffffff 	.word	0xfeffffff
 80022ec:	ffff3fff 	.word	0xffff3fff

080022f0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80022f0:	b580      	push	{r7, lr}
 80022f2:	b082      	sub	sp, #8
 80022f4:	af00      	add	r7, sp, #0
 80022f6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d101      	bne.n	8002302 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80022fe:	2301      	movs	r3, #1
 8002300:	e046      	b.n	8002390 <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	2288      	movs	r2, #136	; 0x88
 8002306:	589b      	ldr	r3, [r3, r2]
 8002308:	2b00      	cmp	r3, #0
 800230a:	d107      	bne.n	800231c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	2284      	movs	r2, #132	; 0x84
 8002310:	2100      	movs	r1, #0
 8002312:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	0018      	movs	r0, r3
 8002318:	f7fe fd00 	bl	8000d1c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	2288      	movs	r2, #136	; 0x88
 8002320:	2124      	movs	r1, #36	; 0x24
 8002322:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	681a      	ldr	r2, [r3, #0]
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	2101      	movs	r1, #1
 8002330:	438a      	bics	r2, r1
 8002332:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	0018      	movs	r0, r3
 8002338:	f000 f8cc 	bl	80024d4 <UART_SetConfig>
 800233c:	0003      	movs	r3, r0
 800233e:	2b01      	cmp	r3, #1
 8002340:	d101      	bne.n	8002346 <HAL_UART_Init+0x56>
  {
    return HAL_ERROR;
 8002342:	2301      	movs	r3, #1
 8002344:	e024      	b.n	8002390 <HAL_UART_Init+0xa0>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800234a:	2b00      	cmp	r3, #0
 800234c:	d003      	beq.n	8002356 <HAL_UART_Init+0x66>
  {
    UART_AdvFeatureConfig(huart);
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	0018      	movs	r0, r3
 8002352:	f000 fb9b 	bl	8002a8c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	685a      	ldr	r2, [r3, #4]
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	490d      	ldr	r1, [pc, #52]	; (8002398 <HAL_UART_Init+0xa8>)
 8002362:	400a      	ands	r2, r1
 8002364:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	689a      	ldr	r2, [r3, #8]
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	212a      	movs	r1, #42	; 0x2a
 8002372:	438a      	bics	r2, r1
 8002374:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	681a      	ldr	r2, [r3, #0]
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	2101      	movs	r1, #1
 8002382:	430a      	orrs	r2, r1
 8002384:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	0018      	movs	r0, r3
 800238a:	f000 fc33 	bl	8002bf4 <UART_CheckIdleState>
 800238e:	0003      	movs	r3, r0
}
 8002390:	0018      	movs	r0, r3
 8002392:	46bd      	mov	sp, r7
 8002394:	b002      	add	sp, #8
 8002396:	bd80      	pop	{r7, pc}
 8002398:	ffffb7ff 	.word	0xffffb7ff

0800239c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800239c:	b580      	push	{r7, lr}
 800239e:	b08a      	sub	sp, #40	; 0x28
 80023a0:	af02      	add	r7, sp, #8
 80023a2:	60f8      	str	r0, [r7, #12]
 80023a4:	60b9      	str	r1, [r7, #8]
 80023a6:	603b      	str	r3, [r7, #0]
 80023a8:	1dbb      	adds	r3, r7, #6
 80023aa:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	2288      	movs	r2, #136	; 0x88
 80023b0:	589b      	ldr	r3, [r3, r2]
 80023b2:	2b20      	cmp	r3, #32
 80023b4:	d000      	beq.n	80023b8 <HAL_UART_Transmit+0x1c>
 80023b6:	e088      	b.n	80024ca <HAL_UART_Transmit+0x12e>
  {
    if ((pData == NULL) || (Size == 0U))
 80023b8:	68bb      	ldr	r3, [r7, #8]
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d003      	beq.n	80023c6 <HAL_UART_Transmit+0x2a>
 80023be:	1dbb      	adds	r3, r7, #6
 80023c0:	881b      	ldrh	r3, [r3, #0]
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d101      	bne.n	80023ca <HAL_UART_Transmit+0x2e>
    {
      return  HAL_ERROR;
 80023c6:	2301      	movs	r3, #1
 80023c8:	e080      	b.n	80024cc <HAL_UART_Transmit+0x130>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	689a      	ldr	r2, [r3, #8]
 80023ce:	2380      	movs	r3, #128	; 0x80
 80023d0:	015b      	lsls	r3, r3, #5
 80023d2:	429a      	cmp	r2, r3
 80023d4:	d109      	bne.n	80023ea <HAL_UART_Transmit+0x4e>
 80023d6:	68fb      	ldr	r3, [r7, #12]
 80023d8:	691b      	ldr	r3, [r3, #16]
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d105      	bne.n	80023ea <HAL_UART_Transmit+0x4e>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 80023de:	68bb      	ldr	r3, [r7, #8]
 80023e0:	2201      	movs	r2, #1
 80023e2:	4013      	ands	r3, r2
 80023e4:	d001      	beq.n	80023ea <HAL_UART_Transmit+0x4e>
      {
        return  HAL_ERROR;
 80023e6:	2301      	movs	r3, #1
 80023e8:	e070      	b.n	80024cc <HAL_UART_Transmit+0x130>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	2290      	movs	r2, #144	; 0x90
 80023ee:	2100      	movs	r1, #0
 80023f0:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80023f2:	68fb      	ldr	r3, [r7, #12]
 80023f4:	2288      	movs	r2, #136	; 0x88
 80023f6:	2121      	movs	r1, #33	; 0x21
 80023f8:	5099      	str	r1, [r3, r2]

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80023fa:	f7fe fe4d 	bl	8001098 <HAL_GetTick>
 80023fe:	0003      	movs	r3, r0
 8002400:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	1dba      	adds	r2, r7, #6
 8002406:	2154      	movs	r1, #84	; 0x54
 8002408:	8812      	ldrh	r2, [r2, #0]
 800240a:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	1dba      	adds	r2, r7, #6
 8002410:	2156      	movs	r1, #86	; 0x56
 8002412:	8812      	ldrh	r2, [r2, #0]
 8002414:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002416:	68fb      	ldr	r3, [r7, #12]
 8002418:	689a      	ldr	r2, [r3, #8]
 800241a:	2380      	movs	r3, #128	; 0x80
 800241c:	015b      	lsls	r3, r3, #5
 800241e:	429a      	cmp	r2, r3
 8002420:	d108      	bne.n	8002434 <HAL_UART_Transmit+0x98>
 8002422:	68fb      	ldr	r3, [r7, #12]
 8002424:	691b      	ldr	r3, [r3, #16]
 8002426:	2b00      	cmp	r3, #0
 8002428:	d104      	bne.n	8002434 <HAL_UART_Transmit+0x98>
    {
      pdata8bits  = NULL;
 800242a:	2300      	movs	r3, #0
 800242c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800242e:	68bb      	ldr	r3, [r7, #8]
 8002430:	61bb      	str	r3, [r7, #24]
 8002432:	e003      	b.n	800243c <HAL_UART_Transmit+0xa0>
    }
    else
    {
      pdata8bits  = pData;
 8002434:	68bb      	ldr	r3, [r7, #8]
 8002436:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002438:	2300      	movs	r3, #0
 800243a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800243c:	e02c      	b.n	8002498 <HAL_UART_Transmit+0xfc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800243e:	697a      	ldr	r2, [r7, #20]
 8002440:	68f8      	ldr	r0, [r7, #12]
 8002442:	683b      	ldr	r3, [r7, #0]
 8002444:	9300      	str	r3, [sp, #0]
 8002446:	0013      	movs	r3, r2
 8002448:	2200      	movs	r2, #0
 800244a:	2180      	movs	r1, #128	; 0x80
 800244c:	f000 fc20 	bl	8002c90 <UART_WaitOnFlagUntilTimeout>
 8002450:	1e03      	subs	r3, r0, #0
 8002452:	d001      	beq.n	8002458 <HAL_UART_Transmit+0xbc>
      {
        return HAL_TIMEOUT;
 8002454:	2303      	movs	r3, #3
 8002456:	e039      	b.n	80024cc <HAL_UART_Transmit+0x130>
      }
      if (pdata8bits == NULL)
 8002458:	69fb      	ldr	r3, [r7, #28]
 800245a:	2b00      	cmp	r3, #0
 800245c:	d10b      	bne.n	8002476 <HAL_UART_Transmit+0xda>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800245e:	69bb      	ldr	r3, [r7, #24]
 8002460:	881b      	ldrh	r3, [r3, #0]
 8002462:	001a      	movs	r2, r3
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	05d2      	lsls	r2, r2, #23
 800246a:	0dd2      	lsrs	r2, r2, #23
 800246c:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800246e:	69bb      	ldr	r3, [r7, #24]
 8002470:	3302      	adds	r3, #2
 8002472:	61bb      	str	r3, [r7, #24]
 8002474:	e007      	b.n	8002486 <HAL_UART_Transmit+0xea>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8002476:	69fb      	ldr	r3, [r7, #28]
 8002478:	781a      	ldrb	r2, [r3, #0]
 800247a:	68fb      	ldr	r3, [r7, #12]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8002480:	69fb      	ldr	r3, [r7, #28]
 8002482:	3301      	adds	r3, #1
 8002484:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002486:	68fb      	ldr	r3, [r7, #12]
 8002488:	2256      	movs	r2, #86	; 0x56
 800248a:	5a9b      	ldrh	r3, [r3, r2]
 800248c:	b29b      	uxth	r3, r3
 800248e:	3b01      	subs	r3, #1
 8002490:	b299      	uxth	r1, r3
 8002492:	68fb      	ldr	r3, [r7, #12]
 8002494:	2256      	movs	r2, #86	; 0x56
 8002496:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	2256      	movs	r2, #86	; 0x56
 800249c:	5a9b      	ldrh	r3, [r3, r2]
 800249e:	b29b      	uxth	r3, r3
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	d1cc      	bne.n	800243e <HAL_UART_Transmit+0xa2>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80024a4:	697a      	ldr	r2, [r7, #20]
 80024a6:	68f8      	ldr	r0, [r7, #12]
 80024a8:	683b      	ldr	r3, [r7, #0]
 80024aa:	9300      	str	r3, [sp, #0]
 80024ac:	0013      	movs	r3, r2
 80024ae:	2200      	movs	r2, #0
 80024b0:	2140      	movs	r1, #64	; 0x40
 80024b2:	f000 fbed 	bl	8002c90 <UART_WaitOnFlagUntilTimeout>
 80024b6:	1e03      	subs	r3, r0, #0
 80024b8:	d001      	beq.n	80024be <HAL_UART_Transmit+0x122>
    {
      return HAL_TIMEOUT;
 80024ba:	2303      	movs	r3, #3
 80024bc:	e006      	b.n	80024cc <HAL_UART_Transmit+0x130>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	2288      	movs	r2, #136	; 0x88
 80024c2:	2120      	movs	r1, #32
 80024c4:	5099      	str	r1, [r3, r2]

    return HAL_OK;
 80024c6:	2300      	movs	r3, #0
 80024c8:	e000      	b.n	80024cc <HAL_UART_Transmit+0x130>
  }
  else
  {
    return HAL_BUSY;
 80024ca:	2302      	movs	r3, #2
  }
}
 80024cc:	0018      	movs	r0, r3
 80024ce:	46bd      	mov	sp, r7
 80024d0:	b008      	add	sp, #32
 80024d2:	bd80      	pop	{r7, pc}

080024d4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80024d4:	b5b0      	push	{r4, r5, r7, lr}
 80024d6:	b090      	sub	sp, #64	; 0x40
 80024d8:	af00      	add	r7, sp, #0
 80024da:	6278      	str	r0, [r7, #36]	; 0x24
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80024dc:	231a      	movs	r3, #26
 80024de:	2220      	movs	r2, #32
 80024e0:	4694      	mov	ip, r2
 80024e2:	44bc      	add	ip, r7
 80024e4:	4463      	add	r3, ip
 80024e6:	2200      	movs	r2, #0
 80024e8:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80024ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024ec:	689a      	ldr	r2, [r3, #8]
 80024ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024f0:	691b      	ldr	r3, [r3, #16]
 80024f2:	431a      	orrs	r2, r3
 80024f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024f6:	695b      	ldr	r3, [r3, #20]
 80024f8:	431a      	orrs	r2, r3
 80024fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024fc:	69db      	ldr	r3, [r3, #28]
 80024fe:	4313      	orrs	r3, r2
 8002500:	63fb      	str	r3, [r7, #60]	; 0x3c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002502:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	4ab9      	ldr	r2, [pc, #740]	; (80027f0 <UART_SetConfig+0x31c>)
 800250a:	4013      	ands	r3, r2
 800250c:	0019      	movs	r1, r3
 800250e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002510:	681a      	ldr	r2, [r3, #0]
 8002512:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002514:	430b      	orrs	r3, r1
 8002516:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002518:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	685b      	ldr	r3, [r3, #4]
 800251e:	4ab5      	ldr	r2, [pc, #724]	; (80027f4 <UART_SetConfig+0x320>)
 8002520:	4013      	ands	r3, r2
 8002522:	0018      	movs	r0, r3
 8002524:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002526:	68d9      	ldr	r1, [r3, #12]
 8002528:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800252a:	681a      	ldr	r2, [r3, #0]
 800252c:	0003      	movs	r3, r0
 800252e:	430b      	orrs	r3, r1
 8002530:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002532:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002534:	699b      	ldr	r3, [r3, #24]
 8002536:	63fb      	str	r3, [r7, #60]	; 0x3c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8002538:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	4aae      	ldr	r2, [pc, #696]	; (80027f8 <UART_SetConfig+0x324>)
 800253e:	4293      	cmp	r3, r2
 8002540:	d004      	beq.n	800254c <UART_SetConfig+0x78>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8002542:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002544:	6a1b      	ldr	r3, [r3, #32]
 8002546:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002548:	4313      	orrs	r3, r2
 800254a:	63fb      	str	r3, [r7, #60]	; 0x3c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800254c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	689b      	ldr	r3, [r3, #8]
 8002552:	4aaa      	ldr	r2, [pc, #680]	; (80027fc <UART_SetConfig+0x328>)
 8002554:	4013      	ands	r3, r2
 8002556:	0019      	movs	r1, r3
 8002558:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800255a:	681a      	ldr	r2, [r3, #0]
 800255c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800255e:	430b      	orrs	r3, r1
 8002560:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8002562:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002568:	220f      	movs	r2, #15
 800256a:	4393      	bics	r3, r2
 800256c:	0018      	movs	r0, r3
 800256e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002570:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8002572:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002574:	681a      	ldr	r2, [r3, #0]
 8002576:	0003      	movs	r3, r0
 8002578:	430b      	orrs	r3, r1
 800257a:	62d3      	str	r3, [r2, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800257c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	4a9f      	ldr	r2, [pc, #636]	; (8002800 <UART_SetConfig+0x32c>)
 8002582:	4293      	cmp	r3, r2
 8002584:	d136      	bne.n	80025f4 <UART_SetConfig+0x120>
 8002586:	4b9f      	ldr	r3, [pc, #636]	; (8002804 <UART_SetConfig+0x330>)
 8002588:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800258a:	2203      	movs	r2, #3
 800258c:	4013      	ands	r3, r2
 800258e:	2b03      	cmp	r3, #3
 8002590:	d020      	beq.n	80025d4 <UART_SetConfig+0x100>
 8002592:	d827      	bhi.n	80025e4 <UART_SetConfig+0x110>
 8002594:	2b02      	cmp	r3, #2
 8002596:	d00d      	beq.n	80025b4 <UART_SetConfig+0xe0>
 8002598:	d824      	bhi.n	80025e4 <UART_SetConfig+0x110>
 800259a:	2b00      	cmp	r3, #0
 800259c:	d002      	beq.n	80025a4 <UART_SetConfig+0xd0>
 800259e:	2b01      	cmp	r3, #1
 80025a0:	d010      	beq.n	80025c4 <UART_SetConfig+0xf0>
 80025a2:	e01f      	b.n	80025e4 <UART_SetConfig+0x110>
 80025a4:	231b      	movs	r3, #27
 80025a6:	2220      	movs	r2, #32
 80025a8:	4694      	mov	ip, r2
 80025aa:	44bc      	add	ip, r7
 80025ac:	4463      	add	r3, ip
 80025ae:	2200      	movs	r2, #0
 80025b0:	701a      	strb	r2, [r3, #0]
 80025b2:	e0c5      	b.n	8002740 <UART_SetConfig+0x26c>
 80025b4:	231b      	movs	r3, #27
 80025b6:	2220      	movs	r2, #32
 80025b8:	4694      	mov	ip, r2
 80025ba:	44bc      	add	ip, r7
 80025bc:	4463      	add	r3, ip
 80025be:	2202      	movs	r2, #2
 80025c0:	701a      	strb	r2, [r3, #0]
 80025c2:	e0bd      	b.n	8002740 <UART_SetConfig+0x26c>
 80025c4:	231b      	movs	r3, #27
 80025c6:	2220      	movs	r2, #32
 80025c8:	4694      	mov	ip, r2
 80025ca:	44bc      	add	ip, r7
 80025cc:	4463      	add	r3, ip
 80025ce:	2204      	movs	r2, #4
 80025d0:	701a      	strb	r2, [r3, #0]
 80025d2:	e0b5      	b.n	8002740 <UART_SetConfig+0x26c>
 80025d4:	231b      	movs	r3, #27
 80025d6:	2220      	movs	r2, #32
 80025d8:	4694      	mov	ip, r2
 80025da:	44bc      	add	ip, r7
 80025dc:	4463      	add	r3, ip
 80025de:	2208      	movs	r2, #8
 80025e0:	701a      	strb	r2, [r3, #0]
 80025e2:	e0ad      	b.n	8002740 <UART_SetConfig+0x26c>
 80025e4:	231b      	movs	r3, #27
 80025e6:	2220      	movs	r2, #32
 80025e8:	4694      	mov	ip, r2
 80025ea:	44bc      	add	ip, r7
 80025ec:	4463      	add	r3, ip
 80025ee:	2210      	movs	r2, #16
 80025f0:	701a      	strb	r2, [r3, #0]
 80025f2:	e0a5      	b.n	8002740 <UART_SetConfig+0x26c>
 80025f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	4a83      	ldr	r2, [pc, #524]	; (8002808 <UART_SetConfig+0x334>)
 80025fa:	4293      	cmp	r3, r2
 80025fc:	d136      	bne.n	800266c <UART_SetConfig+0x198>
 80025fe:	4b81      	ldr	r3, [pc, #516]	; (8002804 <UART_SetConfig+0x330>)
 8002600:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002602:	220c      	movs	r2, #12
 8002604:	4013      	ands	r3, r2
 8002606:	2b0c      	cmp	r3, #12
 8002608:	d020      	beq.n	800264c <UART_SetConfig+0x178>
 800260a:	d827      	bhi.n	800265c <UART_SetConfig+0x188>
 800260c:	2b08      	cmp	r3, #8
 800260e:	d00d      	beq.n	800262c <UART_SetConfig+0x158>
 8002610:	d824      	bhi.n	800265c <UART_SetConfig+0x188>
 8002612:	2b00      	cmp	r3, #0
 8002614:	d002      	beq.n	800261c <UART_SetConfig+0x148>
 8002616:	2b04      	cmp	r3, #4
 8002618:	d010      	beq.n	800263c <UART_SetConfig+0x168>
 800261a:	e01f      	b.n	800265c <UART_SetConfig+0x188>
 800261c:	231b      	movs	r3, #27
 800261e:	2220      	movs	r2, #32
 8002620:	4694      	mov	ip, r2
 8002622:	44bc      	add	ip, r7
 8002624:	4463      	add	r3, ip
 8002626:	2200      	movs	r2, #0
 8002628:	701a      	strb	r2, [r3, #0]
 800262a:	e089      	b.n	8002740 <UART_SetConfig+0x26c>
 800262c:	231b      	movs	r3, #27
 800262e:	2220      	movs	r2, #32
 8002630:	4694      	mov	ip, r2
 8002632:	44bc      	add	ip, r7
 8002634:	4463      	add	r3, ip
 8002636:	2202      	movs	r2, #2
 8002638:	701a      	strb	r2, [r3, #0]
 800263a:	e081      	b.n	8002740 <UART_SetConfig+0x26c>
 800263c:	231b      	movs	r3, #27
 800263e:	2220      	movs	r2, #32
 8002640:	4694      	mov	ip, r2
 8002642:	44bc      	add	ip, r7
 8002644:	4463      	add	r3, ip
 8002646:	2204      	movs	r2, #4
 8002648:	701a      	strb	r2, [r3, #0]
 800264a:	e079      	b.n	8002740 <UART_SetConfig+0x26c>
 800264c:	231b      	movs	r3, #27
 800264e:	2220      	movs	r2, #32
 8002650:	4694      	mov	ip, r2
 8002652:	44bc      	add	ip, r7
 8002654:	4463      	add	r3, ip
 8002656:	2208      	movs	r2, #8
 8002658:	701a      	strb	r2, [r3, #0]
 800265a:	e071      	b.n	8002740 <UART_SetConfig+0x26c>
 800265c:	231b      	movs	r3, #27
 800265e:	2220      	movs	r2, #32
 8002660:	4694      	mov	ip, r2
 8002662:	44bc      	add	ip, r7
 8002664:	4463      	add	r3, ip
 8002666:	2210      	movs	r2, #16
 8002668:	701a      	strb	r2, [r3, #0]
 800266a:	e069      	b.n	8002740 <UART_SetConfig+0x26c>
 800266c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	4a66      	ldr	r2, [pc, #408]	; (800280c <UART_SetConfig+0x338>)
 8002672:	4293      	cmp	r3, r2
 8002674:	d107      	bne.n	8002686 <UART_SetConfig+0x1b2>
 8002676:	231b      	movs	r3, #27
 8002678:	2220      	movs	r2, #32
 800267a:	4694      	mov	ip, r2
 800267c:	44bc      	add	ip, r7
 800267e:	4463      	add	r3, ip
 8002680:	2200      	movs	r2, #0
 8002682:	701a      	strb	r2, [r3, #0]
 8002684:	e05c      	b.n	8002740 <UART_SetConfig+0x26c>
 8002686:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	4a61      	ldr	r2, [pc, #388]	; (8002810 <UART_SetConfig+0x33c>)
 800268c:	4293      	cmp	r3, r2
 800268e:	d107      	bne.n	80026a0 <UART_SetConfig+0x1cc>
 8002690:	231b      	movs	r3, #27
 8002692:	2220      	movs	r2, #32
 8002694:	4694      	mov	ip, r2
 8002696:	44bc      	add	ip, r7
 8002698:	4463      	add	r3, ip
 800269a:	2200      	movs	r2, #0
 800269c:	701a      	strb	r2, [r3, #0]
 800269e:	e04f      	b.n	8002740 <UART_SetConfig+0x26c>
 80026a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	4a54      	ldr	r2, [pc, #336]	; (80027f8 <UART_SetConfig+0x324>)
 80026a6:	4293      	cmp	r3, r2
 80026a8:	d143      	bne.n	8002732 <UART_SetConfig+0x25e>
 80026aa:	4b56      	ldr	r3, [pc, #344]	; (8002804 <UART_SetConfig+0x330>)
 80026ac:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80026ae:	23c0      	movs	r3, #192	; 0xc0
 80026b0:	011b      	lsls	r3, r3, #4
 80026b2:	4013      	ands	r3, r2
 80026b4:	22c0      	movs	r2, #192	; 0xc0
 80026b6:	0112      	lsls	r2, r2, #4
 80026b8:	4293      	cmp	r3, r2
 80026ba:	d02a      	beq.n	8002712 <UART_SetConfig+0x23e>
 80026bc:	22c0      	movs	r2, #192	; 0xc0
 80026be:	0112      	lsls	r2, r2, #4
 80026c0:	4293      	cmp	r3, r2
 80026c2:	d82e      	bhi.n	8002722 <UART_SetConfig+0x24e>
 80026c4:	2280      	movs	r2, #128	; 0x80
 80026c6:	0112      	lsls	r2, r2, #4
 80026c8:	4293      	cmp	r3, r2
 80026ca:	d012      	beq.n	80026f2 <UART_SetConfig+0x21e>
 80026cc:	2280      	movs	r2, #128	; 0x80
 80026ce:	0112      	lsls	r2, r2, #4
 80026d0:	4293      	cmp	r3, r2
 80026d2:	d826      	bhi.n	8002722 <UART_SetConfig+0x24e>
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d004      	beq.n	80026e2 <UART_SetConfig+0x20e>
 80026d8:	2280      	movs	r2, #128	; 0x80
 80026da:	00d2      	lsls	r2, r2, #3
 80026dc:	4293      	cmp	r3, r2
 80026de:	d010      	beq.n	8002702 <UART_SetConfig+0x22e>
 80026e0:	e01f      	b.n	8002722 <UART_SetConfig+0x24e>
 80026e2:	231b      	movs	r3, #27
 80026e4:	2220      	movs	r2, #32
 80026e6:	4694      	mov	ip, r2
 80026e8:	44bc      	add	ip, r7
 80026ea:	4463      	add	r3, ip
 80026ec:	2200      	movs	r2, #0
 80026ee:	701a      	strb	r2, [r3, #0]
 80026f0:	e026      	b.n	8002740 <UART_SetConfig+0x26c>
 80026f2:	231b      	movs	r3, #27
 80026f4:	2220      	movs	r2, #32
 80026f6:	4694      	mov	ip, r2
 80026f8:	44bc      	add	ip, r7
 80026fa:	4463      	add	r3, ip
 80026fc:	2202      	movs	r2, #2
 80026fe:	701a      	strb	r2, [r3, #0]
 8002700:	e01e      	b.n	8002740 <UART_SetConfig+0x26c>
 8002702:	231b      	movs	r3, #27
 8002704:	2220      	movs	r2, #32
 8002706:	4694      	mov	ip, r2
 8002708:	44bc      	add	ip, r7
 800270a:	4463      	add	r3, ip
 800270c:	2204      	movs	r2, #4
 800270e:	701a      	strb	r2, [r3, #0]
 8002710:	e016      	b.n	8002740 <UART_SetConfig+0x26c>
 8002712:	231b      	movs	r3, #27
 8002714:	2220      	movs	r2, #32
 8002716:	4694      	mov	ip, r2
 8002718:	44bc      	add	ip, r7
 800271a:	4463      	add	r3, ip
 800271c:	2208      	movs	r2, #8
 800271e:	701a      	strb	r2, [r3, #0]
 8002720:	e00e      	b.n	8002740 <UART_SetConfig+0x26c>
 8002722:	231b      	movs	r3, #27
 8002724:	2220      	movs	r2, #32
 8002726:	4694      	mov	ip, r2
 8002728:	44bc      	add	ip, r7
 800272a:	4463      	add	r3, ip
 800272c:	2210      	movs	r2, #16
 800272e:	701a      	strb	r2, [r3, #0]
 8002730:	e006      	b.n	8002740 <UART_SetConfig+0x26c>
 8002732:	231b      	movs	r3, #27
 8002734:	2220      	movs	r2, #32
 8002736:	4694      	mov	ip, r2
 8002738:	44bc      	add	ip, r7
 800273a:	4463      	add	r3, ip
 800273c:	2210      	movs	r2, #16
 800273e:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8002740:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	4a2c      	ldr	r2, [pc, #176]	; (80027f8 <UART_SetConfig+0x324>)
 8002746:	4293      	cmp	r3, r2
 8002748:	d000      	beq.n	800274c <UART_SetConfig+0x278>
 800274a:	e0ad      	b.n	80028a8 <UART_SetConfig+0x3d4>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800274c:	231b      	movs	r3, #27
 800274e:	2220      	movs	r2, #32
 8002750:	4694      	mov	ip, r2
 8002752:	44bc      	add	ip, r7
 8002754:	4463      	add	r3, ip
 8002756:	781b      	ldrb	r3, [r3, #0]
 8002758:	2b08      	cmp	r3, #8
 800275a:	d015      	beq.n	8002788 <UART_SetConfig+0x2b4>
 800275c:	dc18      	bgt.n	8002790 <UART_SetConfig+0x2bc>
 800275e:	2b04      	cmp	r3, #4
 8002760:	d00d      	beq.n	800277e <UART_SetConfig+0x2aa>
 8002762:	dc15      	bgt.n	8002790 <UART_SetConfig+0x2bc>
 8002764:	2b00      	cmp	r3, #0
 8002766:	d002      	beq.n	800276e <UART_SetConfig+0x29a>
 8002768:	2b02      	cmp	r3, #2
 800276a:	d005      	beq.n	8002778 <UART_SetConfig+0x2a4>
 800276c:	e010      	b.n	8002790 <UART_SetConfig+0x2bc>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800276e:	f7ff fbf1 	bl	8001f54 <HAL_RCC_GetPCLK1Freq>
 8002772:	0003      	movs	r3, r0
 8002774:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8002776:	e015      	b.n	80027a4 <UART_SetConfig+0x2d0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002778:	4b26      	ldr	r3, [pc, #152]	; (8002814 <UART_SetConfig+0x340>)
 800277a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800277c:	e012      	b.n	80027a4 <UART_SetConfig+0x2d0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800277e:	f7ff fb5d 	bl	8001e3c <HAL_RCC_GetSysClockFreq>
 8002782:	0003      	movs	r3, r0
 8002784:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8002786:	e00d      	b.n	80027a4 <UART_SetConfig+0x2d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002788:	2380      	movs	r3, #128	; 0x80
 800278a:	021b      	lsls	r3, r3, #8
 800278c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800278e:	e009      	b.n	80027a4 <UART_SetConfig+0x2d0>
      default:
        pclk = 0U;
 8002790:	2300      	movs	r3, #0
 8002792:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 8002794:	231a      	movs	r3, #26
 8002796:	2220      	movs	r2, #32
 8002798:	4694      	mov	ip, r2
 800279a:	44bc      	add	ip, r7
 800279c:	4463      	add	r3, ip
 800279e:	2201      	movs	r2, #1
 80027a0:	701a      	strb	r2, [r3, #0]
        break;
 80027a2:	46c0      	nop			; (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80027a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d100      	bne.n	80027ac <UART_SetConfig+0x2d8>
 80027aa:	e153      	b.n	8002a54 <UART_SetConfig+0x580>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80027ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027ae:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80027b0:	4b19      	ldr	r3, [pc, #100]	; (8002818 <UART_SetConfig+0x344>)
 80027b2:	0052      	lsls	r2, r2, #1
 80027b4:	5ad3      	ldrh	r3, [r2, r3]
 80027b6:	0019      	movs	r1, r3
 80027b8:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80027ba:	f7fd fcad 	bl	8000118 <__udivsi3>
 80027be:	0003      	movs	r3, r0
 80027c0:	62bb      	str	r3, [r7, #40]	; 0x28

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80027c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027c4:	685a      	ldr	r2, [r3, #4]
 80027c6:	0013      	movs	r3, r2
 80027c8:	005b      	lsls	r3, r3, #1
 80027ca:	189b      	adds	r3, r3, r2
 80027cc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80027ce:	429a      	cmp	r2, r3
 80027d0:	d305      	bcc.n	80027de <UART_SetConfig+0x30a>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80027d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027d4:	685b      	ldr	r3, [r3, #4]
 80027d6:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80027d8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80027da:	429a      	cmp	r2, r3
 80027dc:	d91e      	bls.n	800281c <UART_SetConfig+0x348>
      {
        ret = HAL_ERROR;
 80027de:	231a      	movs	r3, #26
 80027e0:	2220      	movs	r2, #32
 80027e2:	4694      	mov	ip, r2
 80027e4:	44bc      	add	ip, r7
 80027e6:	4463      	add	r3, ip
 80027e8:	2201      	movs	r2, #1
 80027ea:	701a      	strb	r2, [r3, #0]
 80027ec:	e132      	b.n	8002a54 <UART_SetConfig+0x580>
 80027ee:	46c0      	nop			; (mov r8, r8)
 80027f0:	cfff69f3 	.word	0xcfff69f3
 80027f4:	ffffcfff 	.word	0xffffcfff
 80027f8:	40008000 	.word	0x40008000
 80027fc:	11fff4ff 	.word	0x11fff4ff
 8002800:	40013800 	.word	0x40013800
 8002804:	40021000 	.word	0x40021000
 8002808:	40004400 	.word	0x40004400
 800280c:	40004800 	.word	0x40004800
 8002810:	40004c00 	.word	0x40004c00
 8002814:	00f42400 	.word	0x00f42400
 8002818:	080041b8 	.word	0x080041b8
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800281c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800281e:	61bb      	str	r3, [r7, #24]
 8002820:	2300      	movs	r3, #0
 8002822:	61fb      	str	r3, [r7, #28]
 8002824:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002826:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002828:	4b96      	ldr	r3, [pc, #600]	; (8002a84 <UART_SetConfig+0x5b0>)
 800282a:	0052      	lsls	r2, r2, #1
 800282c:	5ad3      	ldrh	r3, [r2, r3]
 800282e:	613b      	str	r3, [r7, #16]
 8002830:	2300      	movs	r3, #0
 8002832:	617b      	str	r3, [r7, #20]
 8002834:	693a      	ldr	r2, [r7, #16]
 8002836:	697b      	ldr	r3, [r7, #20]
 8002838:	69b8      	ldr	r0, [r7, #24]
 800283a:	69f9      	ldr	r1, [r7, #28]
 800283c:	f7fd fde2 	bl	8000404 <__aeabi_uldivmod>
 8002840:	0002      	movs	r2, r0
 8002842:	000b      	movs	r3, r1
 8002844:	0e11      	lsrs	r1, r2, #24
 8002846:	021d      	lsls	r5, r3, #8
 8002848:	430d      	orrs	r5, r1
 800284a:	0214      	lsls	r4, r2, #8
 800284c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800284e:	685b      	ldr	r3, [r3, #4]
 8002850:	085b      	lsrs	r3, r3, #1
 8002852:	60bb      	str	r3, [r7, #8]
 8002854:	2300      	movs	r3, #0
 8002856:	60fb      	str	r3, [r7, #12]
 8002858:	68b8      	ldr	r0, [r7, #8]
 800285a:	68f9      	ldr	r1, [r7, #12]
 800285c:	1900      	adds	r0, r0, r4
 800285e:	4169      	adcs	r1, r5
 8002860:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002862:	685b      	ldr	r3, [r3, #4]
 8002864:	603b      	str	r3, [r7, #0]
 8002866:	2300      	movs	r3, #0
 8002868:	607b      	str	r3, [r7, #4]
 800286a:	683a      	ldr	r2, [r7, #0]
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	f7fd fdc9 	bl	8000404 <__aeabi_uldivmod>
 8002872:	0002      	movs	r2, r0
 8002874:	000b      	movs	r3, r1
 8002876:	0013      	movs	r3, r2
 8002878:	633b      	str	r3, [r7, #48]	; 0x30
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800287a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800287c:	23c0      	movs	r3, #192	; 0xc0
 800287e:	009b      	lsls	r3, r3, #2
 8002880:	429a      	cmp	r2, r3
 8002882:	d309      	bcc.n	8002898 <UART_SetConfig+0x3c4>
 8002884:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002886:	2380      	movs	r3, #128	; 0x80
 8002888:	035b      	lsls	r3, r3, #13
 800288a:	429a      	cmp	r2, r3
 800288c:	d204      	bcs.n	8002898 <UART_SetConfig+0x3c4>
        {
          huart->Instance->BRR = usartdiv;
 800288e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002894:	60da      	str	r2, [r3, #12]
 8002896:	e0dd      	b.n	8002a54 <UART_SetConfig+0x580>
        }
        else
        {
          ret = HAL_ERROR;
 8002898:	231a      	movs	r3, #26
 800289a:	2220      	movs	r2, #32
 800289c:	4694      	mov	ip, r2
 800289e:	44bc      	add	ip, r7
 80028a0:	4463      	add	r3, ip
 80028a2:	2201      	movs	r2, #1
 80028a4:	701a      	strb	r2, [r3, #0]
 80028a6:	e0d5      	b.n	8002a54 <UART_SetConfig+0x580>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80028a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028aa:	69da      	ldr	r2, [r3, #28]
 80028ac:	2380      	movs	r3, #128	; 0x80
 80028ae:	021b      	lsls	r3, r3, #8
 80028b0:	429a      	cmp	r2, r3
 80028b2:	d000      	beq.n	80028b6 <UART_SetConfig+0x3e2>
 80028b4:	e073      	b.n	800299e <UART_SetConfig+0x4ca>
  {
    switch (clocksource)
 80028b6:	231b      	movs	r3, #27
 80028b8:	2220      	movs	r2, #32
 80028ba:	4694      	mov	ip, r2
 80028bc:	44bc      	add	ip, r7
 80028be:	4463      	add	r3, ip
 80028c0:	781b      	ldrb	r3, [r3, #0]
 80028c2:	2b08      	cmp	r3, #8
 80028c4:	d015      	beq.n	80028f2 <UART_SetConfig+0x41e>
 80028c6:	dc18      	bgt.n	80028fa <UART_SetConfig+0x426>
 80028c8:	2b04      	cmp	r3, #4
 80028ca:	d00d      	beq.n	80028e8 <UART_SetConfig+0x414>
 80028cc:	dc15      	bgt.n	80028fa <UART_SetConfig+0x426>
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d002      	beq.n	80028d8 <UART_SetConfig+0x404>
 80028d2:	2b02      	cmp	r3, #2
 80028d4:	d005      	beq.n	80028e2 <UART_SetConfig+0x40e>
 80028d6:	e010      	b.n	80028fa <UART_SetConfig+0x426>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80028d8:	f7ff fb3c 	bl	8001f54 <HAL_RCC_GetPCLK1Freq>
 80028dc:	0003      	movs	r3, r0
 80028de:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80028e0:	e015      	b.n	800290e <UART_SetConfig+0x43a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80028e2:	4b69      	ldr	r3, [pc, #420]	; (8002a88 <UART_SetConfig+0x5b4>)
 80028e4:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80028e6:	e012      	b.n	800290e <UART_SetConfig+0x43a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80028e8:	f7ff faa8 	bl	8001e3c <HAL_RCC_GetSysClockFreq>
 80028ec:	0003      	movs	r3, r0
 80028ee:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80028f0:	e00d      	b.n	800290e <UART_SetConfig+0x43a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80028f2:	2380      	movs	r3, #128	; 0x80
 80028f4:	021b      	lsls	r3, r3, #8
 80028f6:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80028f8:	e009      	b.n	800290e <UART_SetConfig+0x43a>
      default:
        pclk = 0U;
 80028fa:	2300      	movs	r3, #0
 80028fc:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 80028fe:	231a      	movs	r3, #26
 8002900:	2220      	movs	r2, #32
 8002902:	4694      	mov	ip, r2
 8002904:	44bc      	add	ip, r7
 8002906:	4463      	add	r3, ip
 8002908:	2201      	movs	r2, #1
 800290a:	701a      	strb	r2, [r3, #0]
        break;
 800290c:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800290e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002910:	2b00      	cmp	r3, #0
 8002912:	d100      	bne.n	8002916 <UART_SetConfig+0x442>
 8002914:	e09e      	b.n	8002a54 <UART_SetConfig+0x580>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8002916:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002918:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800291a:	4b5a      	ldr	r3, [pc, #360]	; (8002a84 <UART_SetConfig+0x5b0>)
 800291c:	0052      	lsls	r2, r2, #1
 800291e:	5ad3      	ldrh	r3, [r2, r3]
 8002920:	0019      	movs	r1, r3
 8002922:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8002924:	f7fd fbf8 	bl	8000118 <__udivsi3>
 8002928:	0003      	movs	r3, r0
 800292a:	005a      	lsls	r2, r3, #1
 800292c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800292e:	685b      	ldr	r3, [r3, #4]
 8002930:	085b      	lsrs	r3, r3, #1
 8002932:	18d2      	adds	r2, r2, r3
 8002934:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002936:	685b      	ldr	r3, [r3, #4]
 8002938:	0019      	movs	r1, r3
 800293a:	0010      	movs	r0, r2
 800293c:	f7fd fbec 	bl	8000118 <__udivsi3>
 8002940:	0003      	movs	r3, r0
 8002942:	633b      	str	r3, [r7, #48]	; 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002944:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002946:	2b0f      	cmp	r3, #15
 8002948:	d921      	bls.n	800298e <UART_SetConfig+0x4ba>
 800294a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800294c:	2380      	movs	r3, #128	; 0x80
 800294e:	025b      	lsls	r3, r3, #9
 8002950:	429a      	cmp	r2, r3
 8002952:	d21c      	bcs.n	800298e <UART_SetConfig+0x4ba>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002954:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002956:	b29a      	uxth	r2, r3
 8002958:	200e      	movs	r0, #14
 800295a:	2420      	movs	r4, #32
 800295c:	193b      	adds	r3, r7, r4
 800295e:	181b      	adds	r3, r3, r0
 8002960:	210f      	movs	r1, #15
 8002962:	438a      	bics	r2, r1
 8002964:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002966:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002968:	085b      	lsrs	r3, r3, #1
 800296a:	b29b      	uxth	r3, r3
 800296c:	2207      	movs	r2, #7
 800296e:	4013      	ands	r3, r2
 8002970:	b299      	uxth	r1, r3
 8002972:	193b      	adds	r3, r7, r4
 8002974:	181b      	adds	r3, r3, r0
 8002976:	193a      	adds	r2, r7, r4
 8002978:	1812      	adds	r2, r2, r0
 800297a:	8812      	ldrh	r2, [r2, #0]
 800297c:	430a      	orrs	r2, r1
 800297e:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8002980:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	193a      	adds	r2, r7, r4
 8002986:	1812      	adds	r2, r2, r0
 8002988:	8812      	ldrh	r2, [r2, #0]
 800298a:	60da      	str	r2, [r3, #12]
 800298c:	e062      	b.n	8002a54 <UART_SetConfig+0x580>
      }
      else
      {
        ret = HAL_ERROR;
 800298e:	231a      	movs	r3, #26
 8002990:	2220      	movs	r2, #32
 8002992:	4694      	mov	ip, r2
 8002994:	44bc      	add	ip, r7
 8002996:	4463      	add	r3, ip
 8002998:	2201      	movs	r2, #1
 800299a:	701a      	strb	r2, [r3, #0]
 800299c:	e05a      	b.n	8002a54 <UART_SetConfig+0x580>
      }
    }
  }
  else
  {
    switch (clocksource)
 800299e:	231b      	movs	r3, #27
 80029a0:	2220      	movs	r2, #32
 80029a2:	4694      	mov	ip, r2
 80029a4:	44bc      	add	ip, r7
 80029a6:	4463      	add	r3, ip
 80029a8:	781b      	ldrb	r3, [r3, #0]
 80029aa:	2b08      	cmp	r3, #8
 80029ac:	d015      	beq.n	80029da <UART_SetConfig+0x506>
 80029ae:	dc18      	bgt.n	80029e2 <UART_SetConfig+0x50e>
 80029b0:	2b04      	cmp	r3, #4
 80029b2:	d00d      	beq.n	80029d0 <UART_SetConfig+0x4fc>
 80029b4:	dc15      	bgt.n	80029e2 <UART_SetConfig+0x50e>
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d002      	beq.n	80029c0 <UART_SetConfig+0x4ec>
 80029ba:	2b02      	cmp	r3, #2
 80029bc:	d005      	beq.n	80029ca <UART_SetConfig+0x4f6>
 80029be:	e010      	b.n	80029e2 <UART_SetConfig+0x50e>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80029c0:	f7ff fac8 	bl	8001f54 <HAL_RCC_GetPCLK1Freq>
 80029c4:	0003      	movs	r3, r0
 80029c6:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80029c8:	e015      	b.n	80029f6 <UART_SetConfig+0x522>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80029ca:	4b2f      	ldr	r3, [pc, #188]	; (8002a88 <UART_SetConfig+0x5b4>)
 80029cc:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80029ce:	e012      	b.n	80029f6 <UART_SetConfig+0x522>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80029d0:	f7ff fa34 	bl	8001e3c <HAL_RCC_GetSysClockFreq>
 80029d4:	0003      	movs	r3, r0
 80029d6:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80029d8:	e00d      	b.n	80029f6 <UART_SetConfig+0x522>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80029da:	2380      	movs	r3, #128	; 0x80
 80029dc:	021b      	lsls	r3, r3, #8
 80029de:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80029e0:	e009      	b.n	80029f6 <UART_SetConfig+0x522>
      default:
        pclk = 0U;
 80029e2:	2300      	movs	r3, #0
 80029e4:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 80029e6:	231a      	movs	r3, #26
 80029e8:	2220      	movs	r2, #32
 80029ea:	4694      	mov	ip, r2
 80029ec:	44bc      	add	ip, r7
 80029ee:	4463      	add	r3, ip
 80029f0:	2201      	movs	r2, #1
 80029f2:	701a      	strb	r2, [r3, #0]
        break;
 80029f4:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 80029f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d02b      	beq.n	8002a54 <UART_SetConfig+0x580>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80029fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029fe:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002a00:	4b20      	ldr	r3, [pc, #128]	; (8002a84 <UART_SetConfig+0x5b0>)
 8002a02:	0052      	lsls	r2, r2, #1
 8002a04:	5ad3      	ldrh	r3, [r2, r3]
 8002a06:	0019      	movs	r1, r3
 8002a08:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8002a0a:	f7fd fb85 	bl	8000118 <__udivsi3>
 8002a0e:	0003      	movs	r3, r0
 8002a10:	001a      	movs	r2, r3
 8002a12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a14:	685b      	ldr	r3, [r3, #4]
 8002a16:	085b      	lsrs	r3, r3, #1
 8002a18:	18d2      	adds	r2, r2, r3
 8002a1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a1c:	685b      	ldr	r3, [r3, #4]
 8002a1e:	0019      	movs	r1, r3
 8002a20:	0010      	movs	r0, r2
 8002a22:	f7fd fb79 	bl	8000118 <__udivsi3>
 8002a26:	0003      	movs	r3, r0
 8002a28:	633b      	str	r3, [r7, #48]	; 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002a2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a2c:	2b0f      	cmp	r3, #15
 8002a2e:	d90a      	bls.n	8002a46 <UART_SetConfig+0x572>
 8002a30:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002a32:	2380      	movs	r3, #128	; 0x80
 8002a34:	025b      	lsls	r3, r3, #9
 8002a36:	429a      	cmp	r2, r3
 8002a38:	d205      	bcs.n	8002a46 <UART_SetConfig+0x572>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8002a3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a3c:	b29a      	uxth	r2, r3
 8002a3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	60da      	str	r2, [r3, #12]
 8002a44:	e006      	b.n	8002a54 <UART_SetConfig+0x580>
      }
      else
      {
        ret = HAL_ERROR;
 8002a46:	231a      	movs	r3, #26
 8002a48:	2220      	movs	r2, #32
 8002a4a:	4694      	mov	ip, r2
 8002a4c:	44bc      	add	ip, r7
 8002a4e:	4463      	add	r3, ip
 8002a50:	2201      	movs	r2, #1
 8002a52:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8002a54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a56:	226a      	movs	r2, #106	; 0x6a
 8002a58:	2101      	movs	r1, #1
 8002a5a:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 8002a5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a5e:	2268      	movs	r2, #104	; 0x68
 8002a60:	2101      	movs	r1, #1
 8002a62:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8002a64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a66:	2200      	movs	r2, #0
 8002a68:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8002a6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a6c:	2200      	movs	r2, #0
 8002a6e:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8002a70:	231a      	movs	r3, #26
 8002a72:	2220      	movs	r2, #32
 8002a74:	4694      	mov	ip, r2
 8002a76:	44bc      	add	ip, r7
 8002a78:	4463      	add	r3, ip
 8002a7a:	781b      	ldrb	r3, [r3, #0]
}
 8002a7c:	0018      	movs	r0, r3
 8002a7e:	46bd      	mov	sp, r7
 8002a80:	b010      	add	sp, #64	; 0x40
 8002a82:	bdb0      	pop	{r4, r5, r7, pc}
 8002a84:	080041b8 	.word	0x080041b8
 8002a88:	00f42400 	.word	0x00f42400

08002a8c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8002a8c:	b580      	push	{r7, lr}
 8002a8e:	b082      	sub	sp, #8
 8002a90:	af00      	add	r7, sp, #0
 8002a92:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a98:	2201      	movs	r2, #1
 8002a9a:	4013      	ands	r3, r2
 8002a9c:	d00b      	beq.n	8002ab6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	685b      	ldr	r3, [r3, #4]
 8002aa4:	4a4a      	ldr	r2, [pc, #296]	; (8002bd0 <UART_AdvFeatureConfig+0x144>)
 8002aa6:	4013      	ands	r3, r2
 8002aa8:	0019      	movs	r1, r3
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	430a      	orrs	r2, r1
 8002ab4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002aba:	2202      	movs	r2, #2
 8002abc:	4013      	ands	r3, r2
 8002abe:	d00b      	beq.n	8002ad8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	685b      	ldr	r3, [r3, #4]
 8002ac6:	4a43      	ldr	r2, [pc, #268]	; (8002bd4 <UART_AdvFeatureConfig+0x148>)
 8002ac8:	4013      	ands	r3, r2
 8002aca:	0019      	movs	r1, r3
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	430a      	orrs	r2, r1
 8002ad6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002adc:	2204      	movs	r2, #4
 8002ade:	4013      	ands	r3, r2
 8002ae0:	d00b      	beq.n	8002afa <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	685b      	ldr	r3, [r3, #4]
 8002ae8:	4a3b      	ldr	r2, [pc, #236]	; (8002bd8 <UART_AdvFeatureConfig+0x14c>)
 8002aea:	4013      	ands	r3, r2
 8002aec:	0019      	movs	r1, r3
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	430a      	orrs	r2, r1
 8002af8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002afe:	2208      	movs	r2, #8
 8002b00:	4013      	ands	r3, r2
 8002b02:	d00b      	beq.n	8002b1c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	685b      	ldr	r3, [r3, #4]
 8002b0a:	4a34      	ldr	r2, [pc, #208]	; (8002bdc <UART_AdvFeatureConfig+0x150>)
 8002b0c:	4013      	ands	r3, r2
 8002b0e:	0019      	movs	r1, r3
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	430a      	orrs	r2, r1
 8002b1a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b20:	2210      	movs	r2, #16
 8002b22:	4013      	ands	r3, r2
 8002b24:	d00b      	beq.n	8002b3e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	689b      	ldr	r3, [r3, #8]
 8002b2c:	4a2c      	ldr	r2, [pc, #176]	; (8002be0 <UART_AdvFeatureConfig+0x154>)
 8002b2e:	4013      	ands	r3, r2
 8002b30:	0019      	movs	r1, r3
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	430a      	orrs	r2, r1
 8002b3c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b42:	2220      	movs	r2, #32
 8002b44:	4013      	ands	r3, r2
 8002b46:	d00b      	beq.n	8002b60 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	689b      	ldr	r3, [r3, #8]
 8002b4e:	4a25      	ldr	r2, [pc, #148]	; (8002be4 <UART_AdvFeatureConfig+0x158>)
 8002b50:	4013      	ands	r3, r2
 8002b52:	0019      	movs	r1, r3
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	430a      	orrs	r2, r1
 8002b5e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b64:	2240      	movs	r2, #64	; 0x40
 8002b66:	4013      	ands	r3, r2
 8002b68:	d01d      	beq.n	8002ba6 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	685b      	ldr	r3, [r3, #4]
 8002b70:	4a1d      	ldr	r2, [pc, #116]	; (8002be8 <UART_AdvFeatureConfig+0x15c>)
 8002b72:	4013      	ands	r3, r2
 8002b74:	0019      	movs	r1, r3
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	430a      	orrs	r2, r1
 8002b80:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002b86:	2380      	movs	r3, #128	; 0x80
 8002b88:	035b      	lsls	r3, r3, #13
 8002b8a:	429a      	cmp	r2, r3
 8002b8c:	d10b      	bne.n	8002ba6 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	685b      	ldr	r3, [r3, #4]
 8002b94:	4a15      	ldr	r2, [pc, #84]	; (8002bec <UART_AdvFeatureConfig+0x160>)
 8002b96:	4013      	ands	r3, r2
 8002b98:	0019      	movs	r1, r3
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	430a      	orrs	r2, r1
 8002ba4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002baa:	2280      	movs	r2, #128	; 0x80
 8002bac:	4013      	ands	r3, r2
 8002bae:	d00b      	beq.n	8002bc8 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	685b      	ldr	r3, [r3, #4]
 8002bb6:	4a0e      	ldr	r2, [pc, #56]	; (8002bf0 <UART_AdvFeatureConfig+0x164>)
 8002bb8:	4013      	ands	r3, r2
 8002bba:	0019      	movs	r1, r3
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	430a      	orrs	r2, r1
 8002bc6:	605a      	str	r2, [r3, #4]
  }
}
 8002bc8:	46c0      	nop			; (mov r8, r8)
 8002bca:	46bd      	mov	sp, r7
 8002bcc:	b002      	add	sp, #8
 8002bce:	bd80      	pop	{r7, pc}
 8002bd0:	fffdffff 	.word	0xfffdffff
 8002bd4:	fffeffff 	.word	0xfffeffff
 8002bd8:	fffbffff 	.word	0xfffbffff
 8002bdc:	ffff7fff 	.word	0xffff7fff
 8002be0:	ffffefff 	.word	0xffffefff
 8002be4:	ffffdfff 	.word	0xffffdfff
 8002be8:	ffefffff 	.word	0xffefffff
 8002bec:	ff9fffff 	.word	0xff9fffff
 8002bf0:	fff7ffff 	.word	0xfff7ffff

08002bf4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8002bf4:	b580      	push	{r7, lr}
 8002bf6:	b086      	sub	sp, #24
 8002bf8:	af02      	add	r7, sp, #8
 8002bfa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	2290      	movs	r2, #144	; 0x90
 8002c00:	2100      	movs	r1, #0
 8002c02:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8002c04:	f7fe fa48 	bl	8001098 <HAL_GetTick>
 8002c08:	0003      	movs	r3, r0
 8002c0a:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	2208      	movs	r2, #8
 8002c14:	4013      	ands	r3, r2
 8002c16:	2b08      	cmp	r3, #8
 8002c18:	d10c      	bne.n	8002c34 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	2280      	movs	r2, #128	; 0x80
 8002c1e:	0391      	lsls	r1, r2, #14
 8002c20:	6878      	ldr	r0, [r7, #4]
 8002c22:	4a1a      	ldr	r2, [pc, #104]	; (8002c8c <UART_CheckIdleState+0x98>)
 8002c24:	9200      	str	r2, [sp, #0]
 8002c26:	2200      	movs	r2, #0
 8002c28:	f000 f832 	bl	8002c90 <UART_WaitOnFlagUntilTimeout>
 8002c2c:	1e03      	subs	r3, r0, #0
 8002c2e:	d001      	beq.n	8002c34 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002c30:	2303      	movs	r3, #3
 8002c32:	e026      	b.n	8002c82 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	2204      	movs	r2, #4
 8002c3c:	4013      	ands	r3, r2
 8002c3e:	2b04      	cmp	r3, #4
 8002c40:	d10c      	bne.n	8002c5c <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	2280      	movs	r2, #128	; 0x80
 8002c46:	03d1      	lsls	r1, r2, #15
 8002c48:	6878      	ldr	r0, [r7, #4]
 8002c4a:	4a10      	ldr	r2, [pc, #64]	; (8002c8c <UART_CheckIdleState+0x98>)
 8002c4c:	9200      	str	r2, [sp, #0]
 8002c4e:	2200      	movs	r2, #0
 8002c50:	f000 f81e 	bl	8002c90 <UART_WaitOnFlagUntilTimeout>
 8002c54:	1e03      	subs	r3, r0, #0
 8002c56:	d001      	beq.n	8002c5c <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002c58:	2303      	movs	r3, #3
 8002c5a:	e012      	b.n	8002c82 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	2288      	movs	r2, #136	; 0x88
 8002c60:	2120      	movs	r1, #32
 8002c62:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	228c      	movs	r2, #140	; 0x8c
 8002c68:	2120      	movs	r1, #32
 8002c6a:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	2200      	movs	r2, #0
 8002c70:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	2200      	movs	r2, #0
 8002c76:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	2284      	movs	r2, #132	; 0x84
 8002c7c:	2100      	movs	r1, #0
 8002c7e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002c80:	2300      	movs	r3, #0
}
 8002c82:	0018      	movs	r0, r3
 8002c84:	46bd      	mov	sp, r7
 8002c86:	b004      	add	sp, #16
 8002c88:	bd80      	pop	{r7, pc}
 8002c8a:	46c0      	nop			; (mov r8, r8)
 8002c8c:	01ffffff 	.word	0x01ffffff

08002c90 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8002c90:	b580      	push	{r7, lr}
 8002c92:	b094      	sub	sp, #80	; 0x50
 8002c94:	af00      	add	r7, sp, #0
 8002c96:	60f8      	str	r0, [r7, #12]
 8002c98:	60b9      	str	r1, [r7, #8]
 8002c9a:	603b      	str	r3, [r7, #0]
 8002c9c:	1dfb      	adds	r3, r7, #7
 8002c9e:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002ca0:	e0a7      	b.n	8002df2 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002ca2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002ca4:	3301      	adds	r3, #1
 8002ca6:	d100      	bne.n	8002caa <UART_WaitOnFlagUntilTimeout+0x1a>
 8002ca8:	e0a3      	b.n	8002df2 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002caa:	f7fe f9f5 	bl	8001098 <HAL_GetTick>
 8002cae:	0002      	movs	r2, r0
 8002cb0:	683b      	ldr	r3, [r7, #0]
 8002cb2:	1ad3      	subs	r3, r2, r3
 8002cb4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002cb6:	429a      	cmp	r2, r3
 8002cb8:	d302      	bcc.n	8002cc0 <UART_WaitOnFlagUntilTimeout+0x30>
 8002cba:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d13f      	bne.n	8002d40 <UART_WaitOnFlagUntilTimeout+0xb0>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002cc0:	f3ef 8310 	mrs	r3, PRIMASK
 8002cc4:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 8002cc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8002cc8:	647b      	str	r3, [r7, #68]	; 0x44
 8002cca:	2301      	movs	r3, #1
 8002ccc:	62fb      	str	r3, [r7, #44]	; 0x2c
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002cce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002cd0:	f383 8810 	msr	PRIMASK, r3
}
 8002cd4:	46c0      	nop			; (mov r8, r8)
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	681a      	ldr	r2, [r3, #0]
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	494e      	ldr	r1, [pc, #312]	; (8002e1c <UART_WaitOnFlagUntilTimeout+0x18c>)
 8002ce2:	400a      	ands	r2, r1
 8002ce4:	601a      	str	r2, [r3, #0]
 8002ce6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002ce8:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002cea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002cec:	f383 8810 	msr	PRIMASK, r3
}
 8002cf0:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002cf2:	f3ef 8310 	mrs	r3, PRIMASK
 8002cf6:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 8002cf8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002cfa:	643b      	str	r3, [r7, #64]	; 0x40
 8002cfc:	2301      	movs	r3, #1
 8002cfe:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002d00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d02:	f383 8810 	msr	PRIMASK, r3
}
 8002d06:	46c0      	nop			; (mov r8, r8)
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	689a      	ldr	r2, [r3, #8]
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	2101      	movs	r1, #1
 8002d14:	438a      	bics	r2, r1
 8002d16:	609a      	str	r2, [r3, #8]
 8002d18:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002d1a:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002d1c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002d1e:	f383 8810 	msr	PRIMASK, r3
}
 8002d22:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	2288      	movs	r2, #136	; 0x88
 8002d28:	2120      	movs	r1, #32
 8002d2a:	5099      	str	r1, [r3, r2]
        huart->RxState = HAL_UART_STATE_READY;
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	228c      	movs	r2, #140	; 0x8c
 8002d30:	2120      	movs	r1, #32
 8002d32:	5099      	str	r1, [r3, r2]

        __HAL_UNLOCK(huart);
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	2284      	movs	r2, #132	; 0x84
 8002d38:	2100      	movs	r1, #0
 8002d3a:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8002d3c:	2303      	movs	r3, #3
 8002d3e:	e069      	b.n	8002e14 <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	2204      	movs	r2, #4
 8002d48:	4013      	ands	r3, r2
 8002d4a:	d052      	beq.n	8002df2 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	69da      	ldr	r2, [r3, #28]
 8002d52:	2380      	movs	r3, #128	; 0x80
 8002d54:	011b      	lsls	r3, r3, #4
 8002d56:	401a      	ands	r2, r3
 8002d58:	2380      	movs	r3, #128	; 0x80
 8002d5a:	011b      	lsls	r3, r3, #4
 8002d5c:	429a      	cmp	r2, r3
 8002d5e:	d148      	bne.n	8002df2 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	2280      	movs	r2, #128	; 0x80
 8002d66:	0112      	lsls	r2, r2, #4
 8002d68:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002d6a:	f3ef 8310 	mrs	r3, PRIMASK
 8002d6e:	613b      	str	r3, [r7, #16]
  return(result);
 8002d70:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8002d72:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002d74:	2301      	movs	r3, #1
 8002d76:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002d78:	697b      	ldr	r3, [r7, #20]
 8002d7a:	f383 8810 	msr	PRIMASK, r3
}
 8002d7e:	46c0      	nop			; (mov r8, r8)
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	681a      	ldr	r2, [r3, #0]
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	4924      	ldr	r1, [pc, #144]	; (8002e1c <UART_WaitOnFlagUntilTimeout+0x18c>)
 8002d8c:	400a      	ands	r2, r1
 8002d8e:	601a      	str	r2, [r3, #0]
 8002d90:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002d92:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002d94:	69bb      	ldr	r3, [r7, #24]
 8002d96:	f383 8810 	msr	PRIMASK, r3
}
 8002d9a:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002d9c:	f3ef 8310 	mrs	r3, PRIMASK
 8002da0:	61fb      	str	r3, [r7, #28]
  return(result);
 8002da2:	69fb      	ldr	r3, [r7, #28]
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002da4:	64bb      	str	r3, [r7, #72]	; 0x48
 8002da6:	2301      	movs	r3, #1
 8002da8:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002daa:	6a3b      	ldr	r3, [r7, #32]
 8002dac:	f383 8810 	msr	PRIMASK, r3
}
 8002db0:	46c0      	nop			; (mov r8, r8)
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	689a      	ldr	r2, [r3, #8]
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	2101      	movs	r1, #1
 8002dbe:	438a      	bics	r2, r1
 8002dc0:	609a      	str	r2, [r3, #8]
 8002dc2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002dc4:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002dc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dc8:	f383 8810 	msr	PRIMASK, r3
}
 8002dcc:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	2288      	movs	r2, #136	; 0x88
 8002dd2:	2120      	movs	r1, #32
 8002dd4:	5099      	str	r1, [r3, r2]
          huart->RxState = HAL_UART_STATE_READY;
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	228c      	movs	r2, #140	; 0x8c
 8002dda:	2120      	movs	r1, #32
 8002ddc:	5099      	str	r1, [r3, r2]
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	2290      	movs	r2, #144	; 0x90
 8002de2:	2120      	movs	r1, #32
 8002de4:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	2284      	movs	r2, #132	; 0x84
 8002dea:	2100      	movs	r1, #0
 8002dec:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8002dee:	2303      	movs	r3, #3
 8002df0:	e010      	b.n	8002e14 <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	69db      	ldr	r3, [r3, #28]
 8002df8:	68ba      	ldr	r2, [r7, #8]
 8002dfa:	4013      	ands	r3, r2
 8002dfc:	68ba      	ldr	r2, [r7, #8]
 8002dfe:	1ad3      	subs	r3, r2, r3
 8002e00:	425a      	negs	r2, r3
 8002e02:	4153      	adcs	r3, r2
 8002e04:	b2db      	uxtb	r3, r3
 8002e06:	001a      	movs	r2, r3
 8002e08:	1dfb      	adds	r3, r7, #7
 8002e0a:	781b      	ldrb	r3, [r3, #0]
 8002e0c:	429a      	cmp	r2, r3
 8002e0e:	d100      	bne.n	8002e12 <UART_WaitOnFlagUntilTimeout+0x182>
 8002e10:	e747      	b.n	8002ca2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002e12:	2300      	movs	r3, #0
}
 8002e14:	0018      	movs	r0, r3
 8002e16:	46bd      	mov	sp, r7
 8002e18:	b014      	add	sp, #80	; 0x50
 8002e1a:	bd80      	pop	{r7, pc}
 8002e1c:	fffffe5f 	.word	0xfffffe5f

08002e20 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8002e20:	b580      	push	{r7, lr}
 8002e22:	b084      	sub	sp, #16
 8002e24:	af00      	add	r7, sp, #0
 8002e26:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	2284      	movs	r2, #132	; 0x84
 8002e2c:	5c9b      	ldrb	r3, [r3, r2]
 8002e2e:	2b01      	cmp	r3, #1
 8002e30:	d101      	bne.n	8002e36 <HAL_UARTEx_DisableFifoMode+0x16>
 8002e32:	2302      	movs	r3, #2
 8002e34:	e027      	b.n	8002e86 <HAL_UARTEx_DisableFifoMode+0x66>
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	2284      	movs	r2, #132	; 0x84
 8002e3a:	2101      	movs	r1, #1
 8002e3c:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	2288      	movs	r2, #136	; 0x88
 8002e42:	2124      	movs	r1, #36	; 0x24
 8002e44:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	681a      	ldr	r2, [r3, #0]
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	2101      	movs	r1, #1
 8002e5a:	438a      	bics	r2, r1
 8002e5c:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	4a0b      	ldr	r2, [pc, #44]	; (8002e90 <HAL_UARTEx_DisableFifoMode+0x70>)
 8002e62:	4013      	ands	r3, r2
 8002e64:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	2200      	movs	r2, #0
 8002e6a:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	68fa      	ldr	r2, [r7, #12]
 8002e72:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	2288      	movs	r2, #136	; 0x88
 8002e78:	2120      	movs	r1, #32
 8002e7a:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	2284      	movs	r2, #132	; 0x84
 8002e80:	2100      	movs	r1, #0
 8002e82:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002e84:	2300      	movs	r3, #0
}
 8002e86:	0018      	movs	r0, r3
 8002e88:	46bd      	mov	sp, r7
 8002e8a:	b004      	add	sp, #16
 8002e8c:	bd80      	pop	{r7, pc}
 8002e8e:	46c0      	nop			; (mov r8, r8)
 8002e90:	dfffffff 	.word	0xdfffffff

08002e94 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8002e94:	b580      	push	{r7, lr}
 8002e96:	b084      	sub	sp, #16
 8002e98:	af00      	add	r7, sp, #0
 8002e9a:	6078      	str	r0, [r7, #4]
 8002e9c:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	2284      	movs	r2, #132	; 0x84
 8002ea2:	5c9b      	ldrb	r3, [r3, r2]
 8002ea4:	2b01      	cmp	r3, #1
 8002ea6:	d101      	bne.n	8002eac <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8002ea8:	2302      	movs	r3, #2
 8002eaa:	e02e      	b.n	8002f0a <HAL_UARTEx_SetTxFifoThreshold+0x76>
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	2284      	movs	r2, #132	; 0x84
 8002eb0:	2101      	movs	r1, #1
 8002eb2:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	2288      	movs	r2, #136	; 0x88
 8002eb8:	2124      	movs	r1, #36	; 0x24
 8002eba:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	681a      	ldr	r2, [r3, #0]
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	2101      	movs	r1, #1
 8002ed0:	438a      	bics	r2, r1
 8002ed2:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	689b      	ldr	r3, [r3, #8]
 8002eda:	00db      	lsls	r3, r3, #3
 8002edc:	08d9      	lsrs	r1, r3, #3
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	683a      	ldr	r2, [r7, #0]
 8002ee4:	430a      	orrs	r2, r1
 8002ee6:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	0018      	movs	r0, r3
 8002eec:	f000 f854 	bl	8002f98 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	68fa      	ldr	r2, [r7, #12]
 8002ef6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	2288      	movs	r2, #136	; 0x88
 8002efc:	2120      	movs	r1, #32
 8002efe:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	2284      	movs	r2, #132	; 0x84
 8002f04:	2100      	movs	r1, #0
 8002f06:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002f08:	2300      	movs	r3, #0
}
 8002f0a:	0018      	movs	r0, r3
 8002f0c:	46bd      	mov	sp, r7
 8002f0e:	b004      	add	sp, #16
 8002f10:	bd80      	pop	{r7, pc}
	...

08002f14 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8002f14:	b580      	push	{r7, lr}
 8002f16:	b084      	sub	sp, #16
 8002f18:	af00      	add	r7, sp, #0
 8002f1a:	6078      	str	r0, [r7, #4]
 8002f1c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	2284      	movs	r2, #132	; 0x84
 8002f22:	5c9b      	ldrb	r3, [r3, r2]
 8002f24:	2b01      	cmp	r3, #1
 8002f26:	d101      	bne.n	8002f2c <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8002f28:	2302      	movs	r3, #2
 8002f2a:	e02f      	b.n	8002f8c <HAL_UARTEx_SetRxFifoThreshold+0x78>
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	2284      	movs	r2, #132	; 0x84
 8002f30:	2101      	movs	r1, #1
 8002f32:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	2288      	movs	r2, #136	; 0x88
 8002f38:	2124      	movs	r1, #36	; 0x24
 8002f3a:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	681a      	ldr	r2, [r3, #0]
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	2101      	movs	r1, #1
 8002f50:	438a      	bics	r2, r1
 8002f52:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	689b      	ldr	r3, [r3, #8]
 8002f5a:	4a0e      	ldr	r2, [pc, #56]	; (8002f94 <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 8002f5c:	4013      	ands	r3, r2
 8002f5e:	0019      	movs	r1, r3
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	683a      	ldr	r2, [r7, #0]
 8002f66:	430a      	orrs	r2, r1
 8002f68:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	0018      	movs	r0, r3
 8002f6e:	f000 f813 	bl	8002f98 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	68fa      	ldr	r2, [r7, #12]
 8002f78:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	2288      	movs	r2, #136	; 0x88
 8002f7e:	2120      	movs	r1, #32
 8002f80:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	2284      	movs	r2, #132	; 0x84
 8002f86:	2100      	movs	r1, #0
 8002f88:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002f8a:	2300      	movs	r3, #0
}
 8002f8c:	0018      	movs	r0, r3
 8002f8e:	46bd      	mov	sp, r7
 8002f90:	b004      	add	sp, #16
 8002f92:	bd80      	pop	{r7, pc}
 8002f94:	f1ffffff 	.word	0xf1ffffff

08002f98 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8002f98:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002f9a:	b085      	sub	sp, #20
 8002f9c:	af00      	add	r7, sp, #0
 8002f9e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	d108      	bne.n	8002fba <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	226a      	movs	r2, #106	; 0x6a
 8002fac:	2101      	movs	r1, #1
 8002fae:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = 1U;
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	2268      	movs	r2, #104	; 0x68
 8002fb4:	2101      	movs	r1, #1
 8002fb6:	5299      	strh	r1, [r3, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8002fb8:	e043      	b.n	8003042 <UARTEx_SetNbDataToProcess+0xaa>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8002fba:	260f      	movs	r6, #15
 8002fbc:	19bb      	adds	r3, r7, r6
 8002fbe:	2208      	movs	r2, #8
 8002fc0:	701a      	strb	r2, [r3, #0]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8002fc2:	200e      	movs	r0, #14
 8002fc4:	183b      	adds	r3, r7, r0
 8002fc6:	2208      	movs	r2, #8
 8002fc8:	701a      	strb	r2, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	689b      	ldr	r3, [r3, #8]
 8002fd0:	0e5b      	lsrs	r3, r3, #25
 8002fd2:	b2da      	uxtb	r2, r3
 8002fd4:	240d      	movs	r4, #13
 8002fd6:	193b      	adds	r3, r7, r4
 8002fd8:	2107      	movs	r1, #7
 8002fda:	400a      	ands	r2, r1
 8002fdc:	701a      	strb	r2, [r3, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	689b      	ldr	r3, [r3, #8]
 8002fe4:	0f5b      	lsrs	r3, r3, #29
 8002fe6:	b2da      	uxtb	r2, r3
 8002fe8:	250c      	movs	r5, #12
 8002fea:	197b      	adds	r3, r7, r5
 8002fec:	2107      	movs	r1, #7
 8002fee:	400a      	ands	r2, r1
 8002ff0:	701a      	strb	r2, [r3, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8002ff2:	183b      	adds	r3, r7, r0
 8002ff4:	781b      	ldrb	r3, [r3, #0]
 8002ff6:	197a      	adds	r2, r7, r5
 8002ff8:	7812      	ldrb	r2, [r2, #0]
 8002ffa:	4914      	ldr	r1, [pc, #80]	; (800304c <UARTEx_SetNbDataToProcess+0xb4>)
 8002ffc:	5c8a      	ldrb	r2, [r1, r2]
 8002ffe:	435a      	muls	r2, r3
 8003000:	0010      	movs	r0, r2
                               (uint16_t)denominator[tx_fifo_threshold];
 8003002:	197b      	adds	r3, r7, r5
 8003004:	781b      	ldrb	r3, [r3, #0]
 8003006:	4a12      	ldr	r2, [pc, #72]	; (8003050 <UARTEx_SetNbDataToProcess+0xb8>)
 8003008:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800300a:	0019      	movs	r1, r3
 800300c:	f7fd f90e 	bl	800022c <__divsi3>
 8003010:	0003      	movs	r3, r0
 8003012:	b299      	uxth	r1, r3
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	226a      	movs	r2, #106	; 0x6a
 8003018:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800301a:	19bb      	adds	r3, r7, r6
 800301c:	781b      	ldrb	r3, [r3, #0]
 800301e:	193a      	adds	r2, r7, r4
 8003020:	7812      	ldrb	r2, [r2, #0]
 8003022:	490a      	ldr	r1, [pc, #40]	; (800304c <UARTEx_SetNbDataToProcess+0xb4>)
 8003024:	5c8a      	ldrb	r2, [r1, r2]
 8003026:	435a      	muls	r2, r3
 8003028:	0010      	movs	r0, r2
                               (uint16_t)denominator[rx_fifo_threshold];
 800302a:	193b      	adds	r3, r7, r4
 800302c:	781b      	ldrb	r3, [r3, #0]
 800302e:	4a08      	ldr	r2, [pc, #32]	; (8003050 <UARTEx_SetNbDataToProcess+0xb8>)
 8003030:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8003032:	0019      	movs	r1, r3
 8003034:	f7fd f8fa 	bl	800022c <__divsi3>
 8003038:	0003      	movs	r3, r0
 800303a:	b299      	uxth	r1, r3
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	2268      	movs	r2, #104	; 0x68
 8003040:	5299      	strh	r1, [r3, r2]
}
 8003042:	46c0      	nop			; (mov r8, r8)
 8003044:	46bd      	mov	sp, r7
 8003046:	b005      	add	sp, #20
 8003048:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800304a:	46c0      	nop			; (mov r8, r8)
 800304c:	080041d0 	.word	0x080041d0
 8003050:	080041d8 	.word	0x080041d8

08003054 <__errno>:
 8003054:	4b01      	ldr	r3, [pc, #4]	; (800305c <__errno+0x8>)
 8003056:	6818      	ldr	r0, [r3, #0]
 8003058:	4770      	bx	lr
 800305a:	46c0      	nop			; (mov r8, r8)
 800305c:	2000000c 	.word	0x2000000c

08003060 <__libc_init_array>:
 8003060:	b570      	push	{r4, r5, r6, lr}
 8003062:	2600      	movs	r6, #0
 8003064:	4d0c      	ldr	r5, [pc, #48]	; (8003098 <__libc_init_array+0x38>)
 8003066:	4c0d      	ldr	r4, [pc, #52]	; (800309c <__libc_init_array+0x3c>)
 8003068:	1b64      	subs	r4, r4, r5
 800306a:	10a4      	asrs	r4, r4, #2
 800306c:	42a6      	cmp	r6, r4
 800306e:	d109      	bne.n	8003084 <__libc_init_array+0x24>
 8003070:	2600      	movs	r6, #0
 8003072:	f001 f83b 	bl	80040ec <_init>
 8003076:	4d0a      	ldr	r5, [pc, #40]	; (80030a0 <__libc_init_array+0x40>)
 8003078:	4c0a      	ldr	r4, [pc, #40]	; (80030a4 <__libc_init_array+0x44>)
 800307a:	1b64      	subs	r4, r4, r5
 800307c:	10a4      	asrs	r4, r4, #2
 800307e:	42a6      	cmp	r6, r4
 8003080:	d105      	bne.n	800308e <__libc_init_array+0x2e>
 8003082:	bd70      	pop	{r4, r5, r6, pc}
 8003084:	00b3      	lsls	r3, r6, #2
 8003086:	58eb      	ldr	r3, [r5, r3]
 8003088:	4798      	blx	r3
 800308a:	3601      	adds	r6, #1
 800308c:	e7ee      	b.n	800306c <__libc_init_array+0xc>
 800308e:	00b3      	lsls	r3, r6, #2
 8003090:	58eb      	ldr	r3, [r5, r3]
 8003092:	4798      	blx	r3
 8003094:	3601      	adds	r6, #1
 8003096:	e7f2      	b.n	800307e <__libc_init_array+0x1e>
 8003098:	08004280 	.word	0x08004280
 800309c:	08004280 	.word	0x08004280
 80030a0:	08004280 	.word	0x08004280
 80030a4:	08004284 	.word	0x08004284

080030a8 <memset>:
 80030a8:	0003      	movs	r3, r0
 80030aa:	1882      	adds	r2, r0, r2
 80030ac:	4293      	cmp	r3, r2
 80030ae:	d100      	bne.n	80030b2 <memset+0xa>
 80030b0:	4770      	bx	lr
 80030b2:	7019      	strb	r1, [r3, #0]
 80030b4:	3301      	adds	r3, #1
 80030b6:	e7f9      	b.n	80030ac <memset+0x4>

080030b8 <iprintf>:
 80030b8:	b40f      	push	{r0, r1, r2, r3}
 80030ba:	4b0b      	ldr	r3, [pc, #44]	; (80030e8 <iprintf+0x30>)
 80030bc:	b513      	push	{r0, r1, r4, lr}
 80030be:	681c      	ldr	r4, [r3, #0]
 80030c0:	2c00      	cmp	r4, #0
 80030c2:	d005      	beq.n	80030d0 <iprintf+0x18>
 80030c4:	69a3      	ldr	r3, [r4, #24]
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d102      	bne.n	80030d0 <iprintf+0x18>
 80030ca:	0020      	movs	r0, r4
 80030cc:	f000 fa86 	bl	80035dc <__sinit>
 80030d0:	ab05      	add	r3, sp, #20
 80030d2:	0020      	movs	r0, r4
 80030d4:	9a04      	ldr	r2, [sp, #16]
 80030d6:	68a1      	ldr	r1, [r4, #8]
 80030d8:	9301      	str	r3, [sp, #4]
 80030da:	f000 fc5f 	bl	800399c <_vfiprintf_r>
 80030de:	bc16      	pop	{r1, r2, r4}
 80030e0:	bc08      	pop	{r3}
 80030e2:	b004      	add	sp, #16
 80030e4:	4718      	bx	r3
 80030e6:	46c0      	nop			; (mov r8, r8)
 80030e8:	2000000c 	.word	0x2000000c

080030ec <_puts_r>:
 80030ec:	b570      	push	{r4, r5, r6, lr}
 80030ee:	0005      	movs	r5, r0
 80030f0:	000e      	movs	r6, r1
 80030f2:	2800      	cmp	r0, #0
 80030f4:	d004      	beq.n	8003100 <_puts_r+0x14>
 80030f6:	6983      	ldr	r3, [r0, #24]
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	d101      	bne.n	8003100 <_puts_r+0x14>
 80030fc:	f000 fa6e 	bl	80035dc <__sinit>
 8003100:	69ab      	ldr	r3, [r5, #24]
 8003102:	68ac      	ldr	r4, [r5, #8]
 8003104:	2b00      	cmp	r3, #0
 8003106:	d102      	bne.n	800310e <_puts_r+0x22>
 8003108:	0028      	movs	r0, r5
 800310a:	f000 fa67 	bl	80035dc <__sinit>
 800310e:	4b2d      	ldr	r3, [pc, #180]	; (80031c4 <_puts_r+0xd8>)
 8003110:	429c      	cmp	r4, r3
 8003112:	d122      	bne.n	800315a <_puts_r+0x6e>
 8003114:	686c      	ldr	r4, [r5, #4]
 8003116:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003118:	07db      	lsls	r3, r3, #31
 800311a:	d405      	bmi.n	8003128 <_puts_r+0x3c>
 800311c:	89a3      	ldrh	r3, [r4, #12]
 800311e:	059b      	lsls	r3, r3, #22
 8003120:	d402      	bmi.n	8003128 <_puts_r+0x3c>
 8003122:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003124:	f000 fafb 	bl	800371e <__retarget_lock_acquire_recursive>
 8003128:	89a3      	ldrh	r3, [r4, #12]
 800312a:	071b      	lsls	r3, r3, #28
 800312c:	d502      	bpl.n	8003134 <_puts_r+0x48>
 800312e:	6923      	ldr	r3, [r4, #16]
 8003130:	2b00      	cmp	r3, #0
 8003132:	d129      	bne.n	8003188 <_puts_r+0x9c>
 8003134:	0021      	movs	r1, r4
 8003136:	0028      	movs	r0, r5
 8003138:	f000 f8aa 	bl	8003290 <__swsetup_r>
 800313c:	2800      	cmp	r0, #0
 800313e:	d023      	beq.n	8003188 <_puts_r+0x9c>
 8003140:	2501      	movs	r5, #1
 8003142:	426d      	negs	r5, r5
 8003144:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003146:	07db      	lsls	r3, r3, #31
 8003148:	d405      	bmi.n	8003156 <_puts_r+0x6a>
 800314a:	89a3      	ldrh	r3, [r4, #12]
 800314c:	059b      	lsls	r3, r3, #22
 800314e:	d402      	bmi.n	8003156 <_puts_r+0x6a>
 8003150:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003152:	f000 fae5 	bl	8003720 <__retarget_lock_release_recursive>
 8003156:	0028      	movs	r0, r5
 8003158:	bd70      	pop	{r4, r5, r6, pc}
 800315a:	4b1b      	ldr	r3, [pc, #108]	; (80031c8 <_puts_r+0xdc>)
 800315c:	429c      	cmp	r4, r3
 800315e:	d101      	bne.n	8003164 <_puts_r+0x78>
 8003160:	68ac      	ldr	r4, [r5, #8]
 8003162:	e7d8      	b.n	8003116 <_puts_r+0x2a>
 8003164:	4b19      	ldr	r3, [pc, #100]	; (80031cc <_puts_r+0xe0>)
 8003166:	429c      	cmp	r4, r3
 8003168:	d1d5      	bne.n	8003116 <_puts_r+0x2a>
 800316a:	68ec      	ldr	r4, [r5, #12]
 800316c:	e7d3      	b.n	8003116 <_puts_r+0x2a>
 800316e:	3601      	adds	r6, #1
 8003170:	60a3      	str	r3, [r4, #8]
 8003172:	2b00      	cmp	r3, #0
 8003174:	da04      	bge.n	8003180 <_puts_r+0x94>
 8003176:	69a2      	ldr	r2, [r4, #24]
 8003178:	429a      	cmp	r2, r3
 800317a:	dc16      	bgt.n	80031aa <_puts_r+0xbe>
 800317c:	290a      	cmp	r1, #10
 800317e:	d014      	beq.n	80031aa <_puts_r+0xbe>
 8003180:	6823      	ldr	r3, [r4, #0]
 8003182:	1c5a      	adds	r2, r3, #1
 8003184:	6022      	str	r2, [r4, #0]
 8003186:	7019      	strb	r1, [r3, #0]
 8003188:	68a3      	ldr	r3, [r4, #8]
 800318a:	7831      	ldrb	r1, [r6, #0]
 800318c:	3b01      	subs	r3, #1
 800318e:	2900      	cmp	r1, #0
 8003190:	d1ed      	bne.n	800316e <_puts_r+0x82>
 8003192:	60a3      	str	r3, [r4, #8]
 8003194:	2b00      	cmp	r3, #0
 8003196:	da0f      	bge.n	80031b8 <_puts_r+0xcc>
 8003198:	0028      	movs	r0, r5
 800319a:	0022      	movs	r2, r4
 800319c:	310a      	adds	r1, #10
 800319e:	f000 f821 	bl	80031e4 <__swbuf_r>
 80031a2:	250a      	movs	r5, #10
 80031a4:	1c43      	adds	r3, r0, #1
 80031a6:	d1cd      	bne.n	8003144 <_puts_r+0x58>
 80031a8:	e7ca      	b.n	8003140 <_puts_r+0x54>
 80031aa:	0022      	movs	r2, r4
 80031ac:	0028      	movs	r0, r5
 80031ae:	f000 f819 	bl	80031e4 <__swbuf_r>
 80031b2:	1c43      	adds	r3, r0, #1
 80031b4:	d1e8      	bne.n	8003188 <_puts_r+0x9c>
 80031b6:	e7c3      	b.n	8003140 <_puts_r+0x54>
 80031b8:	250a      	movs	r5, #10
 80031ba:	6823      	ldr	r3, [r4, #0]
 80031bc:	1c5a      	adds	r2, r3, #1
 80031be:	6022      	str	r2, [r4, #0]
 80031c0:	701d      	strb	r5, [r3, #0]
 80031c2:	e7bf      	b.n	8003144 <_puts_r+0x58>
 80031c4:	08004204 	.word	0x08004204
 80031c8:	08004224 	.word	0x08004224
 80031cc:	080041e4 	.word	0x080041e4

080031d0 <puts>:
 80031d0:	b510      	push	{r4, lr}
 80031d2:	4b03      	ldr	r3, [pc, #12]	; (80031e0 <puts+0x10>)
 80031d4:	0001      	movs	r1, r0
 80031d6:	6818      	ldr	r0, [r3, #0]
 80031d8:	f7ff ff88 	bl	80030ec <_puts_r>
 80031dc:	bd10      	pop	{r4, pc}
 80031de:	46c0      	nop			; (mov r8, r8)
 80031e0:	2000000c 	.word	0x2000000c

080031e4 <__swbuf_r>:
 80031e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80031e6:	0005      	movs	r5, r0
 80031e8:	000e      	movs	r6, r1
 80031ea:	0014      	movs	r4, r2
 80031ec:	2800      	cmp	r0, #0
 80031ee:	d004      	beq.n	80031fa <__swbuf_r+0x16>
 80031f0:	6983      	ldr	r3, [r0, #24]
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d101      	bne.n	80031fa <__swbuf_r+0x16>
 80031f6:	f000 f9f1 	bl	80035dc <__sinit>
 80031fa:	4b22      	ldr	r3, [pc, #136]	; (8003284 <__swbuf_r+0xa0>)
 80031fc:	429c      	cmp	r4, r3
 80031fe:	d12e      	bne.n	800325e <__swbuf_r+0x7a>
 8003200:	686c      	ldr	r4, [r5, #4]
 8003202:	69a3      	ldr	r3, [r4, #24]
 8003204:	60a3      	str	r3, [r4, #8]
 8003206:	89a3      	ldrh	r3, [r4, #12]
 8003208:	071b      	lsls	r3, r3, #28
 800320a:	d532      	bpl.n	8003272 <__swbuf_r+0x8e>
 800320c:	6923      	ldr	r3, [r4, #16]
 800320e:	2b00      	cmp	r3, #0
 8003210:	d02f      	beq.n	8003272 <__swbuf_r+0x8e>
 8003212:	6823      	ldr	r3, [r4, #0]
 8003214:	6922      	ldr	r2, [r4, #16]
 8003216:	b2f7      	uxtb	r7, r6
 8003218:	1a98      	subs	r0, r3, r2
 800321a:	6963      	ldr	r3, [r4, #20]
 800321c:	b2f6      	uxtb	r6, r6
 800321e:	4283      	cmp	r3, r0
 8003220:	dc05      	bgt.n	800322e <__swbuf_r+0x4a>
 8003222:	0021      	movs	r1, r4
 8003224:	0028      	movs	r0, r5
 8003226:	f000 f937 	bl	8003498 <_fflush_r>
 800322a:	2800      	cmp	r0, #0
 800322c:	d127      	bne.n	800327e <__swbuf_r+0x9a>
 800322e:	68a3      	ldr	r3, [r4, #8]
 8003230:	3001      	adds	r0, #1
 8003232:	3b01      	subs	r3, #1
 8003234:	60a3      	str	r3, [r4, #8]
 8003236:	6823      	ldr	r3, [r4, #0]
 8003238:	1c5a      	adds	r2, r3, #1
 800323a:	6022      	str	r2, [r4, #0]
 800323c:	701f      	strb	r7, [r3, #0]
 800323e:	6963      	ldr	r3, [r4, #20]
 8003240:	4283      	cmp	r3, r0
 8003242:	d004      	beq.n	800324e <__swbuf_r+0x6a>
 8003244:	89a3      	ldrh	r3, [r4, #12]
 8003246:	07db      	lsls	r3, r3, #31
 8003248:	d507      	bpl.n	800325a <__swbuf_r+0x76>
 800324a:	2e0a      	cmp	r6, #10
 800324c:	d105      	bne.n	800325a <__swbuf_r+0x76>
 800324e:	0021      	movs	r1, r4
 8003250:	0028      	movs	r0, r5
 8003252:	f000 f921 	bl	8003498 <_fflush_r>
 8003256:	2800      	cmp	r0, #0
 8003258:	d111      	bne.n	800327e <__swbuf_r+0x9a>
 800325a:	0030      	movs	r0, r6
 800325c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800325e:	4b0a      	ldr	r3, [pc, #40]	; (8003288 <__swbuf_r+0xa4>)
 8003260:	429c      	cmp	r4, r3
 8003262:	d101      	bne.n	8003268 <__swbuf_r+0x84>
 8003264:	68ac      	ldr	r4, [r5, #8]
 8003266:	e7cc      	b.n	8003202 <__swbuf_r+0x1e>
 8003268:	4b08      	ldr	r3, [pc, #32]	; (800328c <__swbuf_r+0xa8>)
 800326a:	429c      	cmp	r4, r3
 800326c:	d1c9      	bne.n	8003202 <__swbuf_r+0x1e>
 800326e:	68ec      	ldr	r4, [r5, #12]
 8003270:	e7c7      	b.n	8003202 <__swbuf_r+0x1e>
 8003272:	0021      	movs	r1, r4
 8003274:	0028      	movs	r0, r5
 8003276:	f000 f80b 	bl	8003290 <__swsetup_r>
 800327a:	2800      	cmp	r0, #0
 800327c:	d0c9      	beq.n	8003212 <__swbuf_r+0x2e>
 800327e:	2601      	movs	r6, #1
 8003280:	4276      	negs	r6, r6
 8003282:	e7ea      	b.n	800325a <__swbuf_r+0x76>
 8003284:	08004204 	.word	0x08004204
 8003288:	08004224 	.word	0x08004224
 800328c:	080041e4 	.word	0x080041e4

08003290 <__swsetup_r>:
 8003290:	4b37      	ldr	r3, [pc, #220]	; (8003370 <__swsetup_r+0xe0>)
 8003292:	b570      	push	{r4, r5, r6, lr}
 8003294:	681d      	ldr	r5, [r3, #0]
 8003296:	0006      	movs	r6, r0
 8003298:	000c      	movs	r4, r1
 800329a:	2d00      	cmp	r5, #0
 800329c:	d005      	beq.n	80032aa <__swsetup_r+0x1a>
 800329e:	69ab      	ldr	r3, [r5, #24]
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	d102      	bne.n	80032aa <__swsetup_r+0x1a>
 80032a4:	0028      	movs	r0, r5
 80032a6:	f000 f999 	bl	80035dc <__sinit>
 80032aa:	4b32      	ldr	r3, [pc, #200]	; (8003374 <__swsetup_r+0xe4>)
 80032ac:	429c      	cmp	r4, r3
 80032ae:	d10f      	bne.n	80032d0 <__swsetup_r+0x40>
 80032b0:	686c      	ldr	r4, [r5, #4]
 80032b2:	230c      	movs	r3, #12
 80032b4:	5ee2      	ldrsh	r2, [r4, r3]
 80032b6:	b293      	uxth	r3, r2
 80032b8:	0711      	lsls	r1, r2, #28
 80032ba:	d42d      	bmi.n	8003318 <__swsetup_r+0x88>
 80032bc:	06d9      	lsls	r1, r3, #27
 80032be:	d411      	bmi.n	80032e4 <__swsetup_r+0x54>
 80032c0:	2309      	movs	r3, #9
 80032c2:	2001      	movs	r0, #1
 80032c4:	6033      	str	r3, [r6, #0]
 80032c6:	3337      	adds	r3, #55	; 0x37
 80032c8:	4313      	orrs	r3, r2
 80032ca:	81a3      	strh	r3, [r4, #12]
 80032cc:	4240      	negs	r0, r0
 80032ce:	bd70      	pop	{r4, r5, r6, pc}
 80032d0:	4b29      	ldr	r3, [pc, #164]	; (8003378 <__swsetup_r+0xe8>)
 80032d2:	429c      	cmp	r4, r3
 80032d4:	d101      	bne.n	80032da <__swsetup_r+0x4a>
 80032d6:	68ac      	ldr	r4, [r5, #8]
 80032d8:	e7eb      	b.n	80032b2 <__swsetup_r+0x22>
 80032da:	4b28      	ldr	r3, [pc, #160]	; (800337c <__swsetup_r+0xec>)
 80032dc:	429c      	cmp	r4, r3
 80032de:	d1e8      	bne.n	80032b2 <__swsetup_r+0x22>
 80032e0:	68ec      	ldr	r4, [r5, #12]
 80032e2:	e7e6      	b.n	80032b2 <__swsetup_r+0x22>
 80032e4:	075b      	lsls	r3, r3, #29
 80032e6:	d513      	bpl.n	8003310 <__swsetup_r+0x80>
 80032e8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80032ea:	2900      	cmp	r1, #0
 80032ec:	d008      	beq.n	8003300 <__swsetup_r+0x70>
 80032ee:	0023      	movs	r3, r4
 80032f0:	3344      	adds	r3, #68	; 0x44
 80032f2:	4299      	cmp	r1, r3
 80032f4:	d002      	beq.n	80032fc <__swsetup_r+0x6c>
 80032f6:	0030      	movs	r0, r6
 80032f8:	f000 fa80 	bl	80037fc <_free_r>
 80032fc:	2300      	movs	r3, #0
 80032fe:	6363      	str	r3, [r4, #52]	; 0x34
 8003300:	2224      	movs	r2, #36	; 0x24
 8003302:	89a3      	ldrh	r3, [r4, #12]
 8003304:	4393      	bics	r3, r2
 8003306:	81a3      	strh	r3, [r4, #12]
 8003308:	2300      	movs	r3, #0
 800330a:	6063      	str	r3, [r4, #4]
 800330c:	6923      	ldr	r3, [r4, #16]
 800330e:	6023      	str	r3, [r4, #0]
 8003310:	2308      	movs	r3, #8
 8003312:	89a2      	ldrh	r2, [r4, #12]
 8003314:	4313      	orrs	r3, r2
 8003316:	81a3      	strh	r3, [r4, #12]
 8003318:	6923      	ldr	r3, [r4, #16]
 800331a:	2b00      	cmp	r3, #0
 800331c:	d10b      	bne.n	8003336 <__swsetup_r+0xa6>
 800331e:	21a0      	movs	r1, #160	; 0xa0
 8003320:	2280      	movs	r2, #128	; 0x80
 8003322:	89a3      	ldrh	r3, [r4, #12]
 8003324:	0089      	lsls	r1, r1, #2
 8003326:	0092      	lsls	r2, r2, #2
 8003328:	400b      	ands	r3, r1
 800332a:	4293      	cmp	r3, r2
 800332c:	d003      	beq.n	8003336 <__swsetup_r+0xa6>
 800332e:	0021      	movs	r1, r4
 8003330:	0030      	movs	r0, r6
 8003332:	f000 fa1f 	bl	8003774 <__smakebuf_r>
 8003336:	220c      	movs	r2, #12
 8003338:	5ea3      	ldrsh	r3, [r4, r2]
 800333a:	2001      	movs	r0, #1
 800333c:	001a      	movs	r2, r3
 800333e:	b299      	uxth	r1, r3
 8003340:	4002      	ands	r2, r0
 8003342:	4203      	tst	r3, r0
 8003344:	d00f      	beq.n	8003366 <__swsetup_r+0xd6>
 8003346:	2200      	movs	r2, #0
 8003348:	60a2      	str	r2, [r4, #8]
 800334a:	6962      	ldr	r2, [r4, #20]
 800334c:	4252      	negs	r2, r2
 800334e:	61a2      	str	r2, [r4, #24]
 8003350:	2000      	movs	r0, #0
 8003352:	6922      	ldr	r2, [r4, #16]
 8003354:	4282      	cmp	r2, r0
 8003356:	d1ba      	bne.n	80032ce <__swsetup_r+0x3e>
 8003358:	060a      	lsls	r2, r1, #24
 800335a:	d5b8      	bpl.n	80032ce <__swsetup_r+0x3e>
 800335c:	2240      	movs	r2, #64	; 0x40
 800335e:	4313      	orrs	r3, r2
 8003360:	81a3      	strh	r3, [r4, #12]
 8003362:	3801      	subs	r0, #1
 8003364:	e7b3      	b.n	80032ce <__swsetup_r+0x3e>
 8003366:	0788      	lsls	r0, r1, #30
 8003368:	d400      	bmi.n	800336c <__swsetup_r+0xdc>
 800336a:	6962      	ldr	r2, [r4, #20]
 800336c:	60a2      	str	r2, [r4, #8]
 800336e:	e7ef      	b.n	8003350 <__swsetup_r+0xc0>
 8003370:	2000000c 	.word	0x2000000c
 8003374:	08004204 	.word	0x08004204
 8003378:	08004224 	.word	0x08004224
 800337c:	080041e4 	.word	0x080041e4

08003380 <__sflush_r>:
 8003380:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003382:	898b      	ldrh	r3, [r1, #12]
 8003384:	0005      	movs	r5, r0
 8003386:	000c      	movs	r4, r1
 8003388:	071a      	lsls	r2, r3, #28
 800338a:	d45f      	bmi.n	800344c <__sflush_r+0xcc>
 800338c:	684a      	ldr	r2, [r1, #4]
 800338e:	2a00      	cmp	r2, #0
 8003390:	dc04      	bgt.n	800339c <__sflush_r+0x1c>
 8003392:	6c0a      	ldr	r2, [r1, #64]	; 0x40
 8003394:	2a00      	cmp	r2, #0
 8003396:	dc01      	bgt.n	800339c <__sflush_r+0x1c>
 8003398:	2000      	movs	r0, #0
 800339a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800339c:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 800339e:	2f00      	cmp	r7, #0
 80033a0:	d0fa      	beq.n	8003398 <__sflush_r+0x18>
 80033a2:	2200      	movs	r2, #0
 80033a4:	2180      	movs	r1, #128	; 0x80
 80033a6:	682e      	ldr	r6, [r5, #0]
 80033a8:	602a      	str	r2, [r5, #0]
 80033aa:	001a      	movs	r2, r3
 80033ac:	0149      	lsls	r1, r1, #5
 80033ae:	400a      	ands	r2, r1
 80033b0:	420b      	tst	r3, r1
 80033b2:	d034      	beq.n	800341e <__sflush_r+0x9e>
 80033b4:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80033b6:	89a3      	ldrh	r3, [r4, #12]
 80033b8:	075b      	lsls	r3, r3, #29
 80033ba:	d506      	bpl.n	80033ca <__sflush_r+0x4a>
 80033bc:	6863      	ldr	r3, [r4, #4]
 80033be:	1ac0      	subs	r0, r0, r3
 80033c0:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d001      	beq.n	80033ca <__sflush_r+0x4a>
 80033c6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80033c8:	1ac0      	subs	r0, r0, r3
 80033ca:	0002      	movs	r2, r0
 80033cc:	6a21      	ldr	r1, [r4, #32]
 80033ce:	2300      	movs	r3, #0
 80033d0:	0028      	movs	r0, r5
 80033d2:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 80033d4:	47b8      	blx	r7
 80033d6:	89a1      	ldrh	r1, [r4, #12]
 80033d8:	1c43      	adds	r3, r0, #1
 80033da:	d106      	bne.n	80033ea <__sflush_r+0x6a>
 80033dc:	682b      	ldr	r3, [r5, #0]
 80033de:	2b1d      	cmp	r3, #29
 80033e0:	d831      	bhi.n	8003446 <__sflush_r+0xc6>
 80033e2:	4a2c      	ldr	r2, [pc, #176]	; (8003494 <__sflush_r+0x114>)
 80033e4:	40da      	lsrs	r2, r3
 80033e6:	07d3      	lsls	r3, r2, #31
 80033e8:	d52d      	bpl.n	8003446 <__sflush_r+0xc6>
 80033ea:	2300      	movs	r3, #0
 80033ec:	6063      	str	r3, [r4, #4]
 80033ee:	6923      	ldr	r3, [r4, #16]
 80033f0:	6023      	str	r3, [r4, #0]
 80033f2:	04cb      	lsls	r3, r1, #19
 80033f4:	d505      	bpl.n	8003402 <__sflush_r+0x82>
 80033f6:	1c43      	adds	r3, r0, #1
 80033f8:	d102      	bne.n	8003400 <__sflush_r+0x80>
 80033fa:	682b      	ldr	r3, [r5, #0]
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	d100      	bne.n	8003402 <__sflush_r+0x82>
 8003400:	6560      	str	r0, [r4, #84]	; 0x54
 8003402:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003404:	602e      	str	r6, [r5, #0]
 8003406:	2900      	cmp	r1, #0
 8003408:	d0c6      	beq.n	8003398 <__sflush_r+0x18>
 800340a:	0023      	movs	r3, r4
 800340c:	3344      	adds	r3, #68	; 0x44
 800340e:	4299      	cmp	r1, r3
 8003410:	d002      	beq.n	8003418 <__sflush_r+0x98>
 8003412:	0028      	movs	r0, r5
 8003414:	f000 f9f2 	bl	80037fc <_free_r>
 8003418:	2000      	movs	r0, #0
 800341a:	6360      	str	r0, [r4, #52]	; 0x34
 800341c:	e7bd      	b.n	800339a <__sflush_r+0x1a>
 800341e:	2301      	movs	r3, #1
 8003420:	0028      	movs	r0, r5
 8003422:	6a21      	ldr	r1, [r4, #32]
 8003424:	47b8      	blx	r7
 8003426:	1c43      	adds	r3, r0, #1
 8003428:	d1c5      	bne.n	80033b6 <__sflush_r+0x36>
 800342a:	682b      	ldr	r3, [r5, #0]
 800342c:	2b00      	cmp	r3, #0
 800342e:	d0c2      	beq.n	80033b6 <__sflush_r+0x36>
 8003430:	2b1d      	cmp	r3, #29
 8003432:	d001      	beq.n	8003438 <__sflush_r+0xb8>
 8003434:	2b16      	cmp	r3, #22
 8003436:	d101      	bne.n	800343c <__sflush_r+0xbc>
 8003438:	602e      	str	r6, [r5, #0]
 800343a:	e7ad      	b.n	8003398 <__sflush_r+0x18>
 800343c:	2340      	movs	r3, #64	; 0x40
 800343e:	89a2      	ldrh	r2, [r4, #12]
 8003440:	4313      	orrs	r3, r2
 8003442:	81a3      	strh	r3, [r4, #12]
 8003444:	e7a9      	b.n	800339a <__sflush_r+0x1a>
 8003446:	2340      	movs	r3, #64	; 0x40
 8003448:	430b      	orrs	r3, r1
 800344a:	e7fa      	b.n	8003442 <__sflush_r+0xc2>
 800344c:	690f      	ldr	r7, [r1, #16]
 800344e:	2f00      	cmp	r7, #0
 8003450:	d0a2      	beq.n	8003398 <__sflush_r+0x18>
 8003452:	680a      	ldr	r2, [r1, #0]
 8003454:	600f      	str	r7, [r1, #0]
 8003456:	1bd2      	subs	r2, r2, r7
 8003458:	9201      	str	r2, [sp, #4]
 800345a:	2200      	movs	r2, #0
 800345c:	079b      	lsls	r3, r3, #30
 800345e:	d100      	bne.n	8003462 <__sflush_r+0xe2>
 8003460:	694a      	ldr	r2, [r1, #20]
 8003462:	60a2      	str	r2, [r4, #8]
 8003464:	9b01      	ldr	r3, [sp, #4]
 8003466:	2b00      	cmp	r3, #0
 8003468:	dc00      	bgt.n	800346c <__sflush_r+0xec>
 800346a:	e795      	b.n	8003398 <__sflush_r+0x18>
 800346c:	003a      	movs	r2, r7
 800346e:	0028      	movs	r0, r5
 8003470:	9b01      	ldr	r3, [sp, #4]
 8003472:	6a21      	ldr	r1, [r4, #32]
 8003474:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8003476:	47b0      	blx	r6
 8003478:	2800      	cmp	r0, #0
 800347a:	dc06      	bgt.n	800348a <__sflush_r+0x10a>
 800347c:	2340      	movs	r3, #64	; 0x40
 800347e:	2001      	movs	r0, #1
 8003480:	89a2      	ldrh	r2, [r4, #12]
 8003482:	4240      	negs	r0, r0
 8003484:	4313      	orrs	r3, r2
 8003486:	81a3      	strh	r3, [r4, #12]
 8003488:	e787      	b.n	800339a <__sflush_r+0x1a>
 800348a:	9b01      	ldr	r3, [sp, #4]
 800348c:	183f      	adds	r7, r7, r0
 800348e:	1a1b      	subs	r3, r3, r0
 8003490:	9301      	str	r3, [sp, #4]
 8003492:	e7e7      	b.n	8003464 <__sflush_r+0xe4>
 8003494:	20400001 	.word	0x20400001

08003498 <_fflush_r>:
 8003498:	690b      	ldr	r3, [r1, #16]
 800349a:	b570      	push	{r4, r5, r6, lr}
 800349c:	0005      	movs	r5, r0
 800349e:	000c      	movs	r4, r1
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	d102      	bne.n	80034aa <_fflush_r+0x12>
 80034a4:	2500      	movs	r5, #0
 80034a6:	0028      	movs	r0, r5
 80034a8:	bd70      	pop	{r4, r5, r6, pc}
 80034aa:	2800      	cmp	r0, #0
 80034ac:	d004      	beq.n	80034b8 <_fflush_r+0x20>
 80034ae:	6983      	ldr	r3, [r0, #24]
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	d101      	bne.n	80034b8 <_fflush_r+0x20>
 80034b4:	f000 f892 	bl	80035dc <__sinit>
 80034b8:	4b14      	ldr	r3, [pc, #80]	; (800350c <_fflush_r+0x74>)
 80034ba:	429c      	cmp	r4, r3
 80034bc:	d11b      	bne.n	80034f6 <_fflush_r+0x5e>
 80034be:	686c      	ldr	r4, [r5, #4]
 80034c0:	220c      	movs	r2, #12
 80034c2:	5ea3      	ldrsh	r3, [r4, r2]
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	d0ed      	beq.n	80034a4 <_fflush_r+0xc>
 80034c8:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80034ca:	07d2      	lsls	r2, r2, #31
 80034cc:	d404      	bmi.n	80034d8 <_fflush_r+0x40>
 80034ce:	059b      	lsls	r3, r3, #22
 80034d0:	d402      	bmi.n	80034d8 <_fflush_r+0x40>
 80034d2:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80034d4:	f000 f923 	bl	800371e <__retarget_lock_acquire_recursive>
 80034d8:	0028      	movs	r0, r5
 80034da:	0021      	movs	r1, r4
 80034dc:	f7ff ff50 	bl	8003380 <__sflush_r>
 80034e0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80034e2:	0005      	movs	r5, r0
 80034e4:	07db      	lsls	r3, r3, #31
 80034e6:	d4de      	bmi.n	80034a6 <_fflush_r+0xe>
 80034e8:	89a3      	ldrh	r3, [r4, #12]
 80034ea:	059b      	lsls	r3, r3, #22
 80034ec:	d4db      	bmi.n	80034a6 <_fflush_r+0xe>
 80034ee:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80034f0:	f000 f916 	bl	8003720 <__retarget_lock_release_recursive>
 80034f4:	e7d7      	b.n	80034a6 <_fflush_r+0xe>
 80034f6:	4b06      	ldr	r3, [pc, #24]	; (8003510 <_fflush_r+0x78>)
 80034f8:	429c      	cmp	r4, r3
 80034fa:	d101      	bne.n	8003500 <_fflush_r+0x68>
 80034fc:	68ac      	ldr	r4, [r5, #8]
 80034fe:	e7df      	b.n	80034c0 <_fflush_r+0x28>
 8003500:	4b04      	ldr	r3, [pc, #16]	; (8003514 <_fflush_r+0x7c>)
 8003502:	429c      	cmp	r4, r3
 8003504:	d1dc      	bne.n	80034c0 <_fflush_r+0x28>
 8003506:	68ec      	ldr	r4, [r5, #12]
 8003508:	e7da      	b.n	80034c0 <_fflush_r+0x28>
 800350a:	46c0      	nop			; (mov r8, r8)
 800350c:	08004204 	.word	0x08004204
 8003510:	08004224 	.word	0x08004224
 8003514:	080041e4 	.word	0x080041e4

08003518 <std>:
 8003518:	2300      	movs	r3, #0
 800351a:	b510      	push	{r4, lr}
 800351c:	0004      	movs	r4, r0
 800351e:	6003      	str	r3, [r0, #0]
 8003520:	6043      	str	r3, [r0, #4]
 8003522:	6083      	str	r3, [r0, #8]
 8003524:	8181      	strh	r1, [r0, #12]
 8003526:	6643      	str	r3, [r0, #100]	; 0x64
 8003528:	0019      	movs	r1, r3
 800352a:	81c2      	strh	r2, [r0, #14]
 800352c:	6103      	str	r3, [r0, #16]
 800352e:	6143      	str	r3, [r0, #20]
 8003530:	6183      	str	r3, [r0, #24]
 8003532:	2208      	movs	r2, #8
 8003534:	305c      	adds	r0, #92	; 0x5c
 8003536:	f7ff fdb7 	bl	80030a8 <memset>
 800353a:	4b05      	ldr	r3, [pc, #20]	; (8003550 <std+0x38>)
 800353c:	6263      	str	r3, [r4, #36]	; 0x24
 800353e:	4b05      	ldr	r3, [pc, #20]	; (8003554 <std+0x3c>)
 8003540:	6224      	str	r4, [r4, #32]
 8003542:	62a3      	str	r3, [r4, #40]	; 0x28
 8003544:	4b04      	ldr	r3, [pc, #16]	; (8003558 <std+0x40>)
 8003546:	62e3      	str	r3, [r4, #44]	; 0x2c
 8003548:	4b04      	ldr	r3, [pc, #16]	; (800355c <std+0x44>)
 800354a:	6323      	str	r3, [r4, #48]	; 0x30
 800354c:	bd10      	pop	{r4, pc}
 800354e:	46c0      	nop			; (mov r8, r8)
 8003550:	08003f39 	.word	0x08003f39
 8003554:	08003f61 	.word	0x08003f61
 8003558:	08003f99 	.word	0x08003f99
 800355c:	08003fc5 	.word	0x08003fc5

08003560 <_cleanup_r>:
 8003560:	b510      	push	{r4, lr}
 8003562:	4902      	ldr	r1, [pc, #8]	; (800356c <_cleanup_r+0xc>)
 8003564:	f000 f8ba 	bl	80036dc <_fwalk_reent>
 8003568:	bd10      	pop	{r4, pc}
 800356a:	46c0      	nop			; (mov r8, r8)
 800356c:	08003499 	.word	0x08003499

08003570 <__sfmoreglue>:
 8003570:	b570      	push	{r4, r5, r6, lr}
 8003572:	2568      	movs	r5, #104	; 0x68
 8003574:	1e4a      	subs	r2, r1, #1
 8003576:	4355      	muls	r5, r2
 8003578:	000e      	movs	r6, r1
 800357a:	0029      	movs	r1, r5
 800357c:	3174      	adds	r1, #116	; 0x74
 800357e:	f000 f987 	bl	8003890 <_malloc_r>
 8003582:	1e04      	subs	r4, r0, #0
 8003584:	d008      	beq.n	8003598 <__sfmoreglue+0x28>
 8003586:	2100      	movs	r1, #0
 8003588:	002a      	movs	r2, r5
 800358a:	6001      	str	r1, [r0, #0]
 800358c:	6046      	str	r6, [r0, #4]
 800358e:	300c      	adds	r0, #12
 8003590:	60a0      	str	r0, [r4, #8]
 8003592:	3268      	adds	r2, #104	; 0x68
 8003594:	f7ff fd88 	bl	80030a8 <memset>
 8003598:	0020      	movs	r0, r4
 800359a:	bd70      	pop	{r4, r5, r6, pc}

0800359c <__sfp_lock_acquire>:
 800359c:	b510      	push	{r4, lr}
 800359e:	4802      	ldr	r0, [pc, #8]	; (80035a8 <__sfp_lock_acquire+0xc>)
 80035a0:	f000 f8bd 	bl	800371e <__retarget_lock_acquire_recursive>
 80035a4:	bd10      	pop	{r4, pc}
 80035a6:	46c0      	nop			; (mov r8, r8)
 80035a8:	20000138 	.word	0x20000138

080035ac <__sfp_lock_release>:
 80035ac:	b510      	push	{r4, lr}
 80035ae:	4802      	ldr	r0, [pc, #8]	; (80035b8 <__sfp_lock_release+0xc>)
 80035b0:	f000 f8b6 	bl	8003720 <__retarget_lock_release_recursive>
 80035b4:	bd10      	pop	{r4, pc}
 80035b6:	46c0      	nop			; (mov r8, r8)
 80035b8:	20000138 	.word	0x20000138

080035bc <__sinit_lock_acquire>:
 80035bc:	b510      	push	{r4, lr}
 80035be:	4802      	ldr	r0, [pc, #8]	; (80035c8 <__sinit_lock_acquire+0xc>)
 80035c0:	f000 f8ad 	bl	800371e <__retarget_lock_acquire_recursive>
 80035c4:	bd10      	pop	{r4, pc}
 80035c6:	46c0      	nop			; (mov r8, r8)
 80035c8:	20000133 	.word	0x20000133

080035cc <__sinit_lock_release>:
 80035cc:	b510      	push	{r4, lr}
 80035ce:	4802      	ldr	r0, [pc, #8]	; (80035d8 <__sinit_lock_release+0xc>)
 80035d0:	f000 f8a6 	bl	8003720 <__retarget_lock_release_recursive>
 80035d4:	bd10      	pop	{r4, pc}
 80035d6:	46c0      	nop			; (mov r8, r8)
 80035d8:	20000133 	.word	0x20000133

080035dc <__sinit>:
 80035dc:	b513      	push	{r0, r1, r4, lr}
 80035de:	0004      	movs	r4, r0
 80035e0:	f7ff ffec 	bl	80035bc <__sinit_lock_acquire>
 80035e4:	69a3      	ldr	r3, [r4, #24]
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d002      	beq.n	80035f0 <__sinit+0x14>
 80035ea:	f7ff ffef 	bl	80035cc <__sinit_lock_release>
 80035ee:	bd13      	pop	{r0, r1, r4, pc}
 80035f0:	64a3      	str	r3, [r4, #72]	; 0x48
 80035f2:	64e3      	str	r3, [r4, #76]	; 0x4c
 80035f4:	6523      	str	r3, [r4, #80]	; 0x50
 80035f6:	4b13      	ldr	r3, [pc, #76]	; (8003644 <__sinit+0x68>)
 80035f8:	4a13      	ldr	r2, [pc, #76]	; (8003648 <__sinit+0x6c>)
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	62a2      	str	r2, [r4, #40]	; 0x28
 80035fe:	9301      	str	r3, [sp, #4]
 8003600:	42a3      	cmp	r3, r4
 8003602:	d101      	bne.n	8003608 <__sinit+0x2c>
 8003604:	2301      	movs	r3, #1
 8003606:	61a3      	str	r3, [r4, #24]
 8003608:	0020      	movs	r0, r4
 800360a:	f000 f81f 	bl	800364c <__sfp>
 800360e:	6060      	str	r0, [r4, #4]
 8003610:	0020      	movs	r0, r4
 8003612:	f000 f81b 	bl	800364c <__sfp>
 8003616:	60a0      	str	r0, [r4, #8]
 8003618:	0020      	movs	r0, r4
 800361a:	f000 f817 	bl	800364c <__sfp>
 800361e:	2200      	movs	r2, #0
 8003620:	2104      	movs	r1, #4
 8003622:	60e0      	str	r0, [r4, #12]
 8003624:	6860      	ldr	r0, [r4, #4]
 8003626:	f7ff ff77 	bl	8003518 <std>
 800362a:	2201      	movs	r2, #1
 800362c:	2109      	movs	r1, #9
 800362e:	68a0      	ldr	r0, [r4, #8]
 8003630:	f7ff ff72 	bl	8003518 <std>
 8003634:	2202      	movs	r2, #2
 8003636:	2112      	movs	r1, #18
 8003638:	68e0      	ldr	r0, [r4, #12]
 800363a:	f7ff ff6d 	bl	8003518 <std>
 800363e:	2301      	movs	r3, #1
 8003640:	61a3      	str	r3, [r4, #24]
 8003642:	e7d2      	b.n	80035ea <__sinit+0xe>
 8003644:	080041e0 	.word	0x080041e0
 8003648:	08003561 	.word	0x08003561

0800364c <__sfp>:
 800364c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800364e:	0007      	movs	r7, r0
 8003650:	f7ff ffa4 	bl	800359c <__sfp_lock_acquire>
 8003654:	4b1f      	ldr	r3, [pc, #124]	; (80036d4 <__sfp+0x88>)
 8003656:	681e      	ldr	r6, [r3, #0]
 8003658:	69b3      	ldr	r3, [r6, #24]
 800365a:	2b00      	cmp	r3, #0
 800365c:	d102      	bne.n	8003664 <__sfp+0x18>
 800365e:	0030      	movs	r0, r6
 8003660:	f7ff ffbc 	bl	80035dc <__sinit>
 8003664:	3648      	adds	r6, #72	; 0x48
 8003666:	68b4      	ldr	r4, [r6, #8]
 8003668:	6873      	ldr	r3, [r6, #4]
 800366a:	3b01      	subs	r3, #1
 800366c:	d504      	bpl.n	8003678 <__sfp+0x2c>
 800366e:	6833      	ldr	r3, [r6, #0]
 8003670:	2b00      	cmp	r3, #0
 8003672:	d022      	beq.n	80036ba <__sfp+0x6e>
 8003674:	6836      	ldr	r6, [r6, #0]
 8003676:	e7f6      	b.n	8003666 <__sfp+0x1a>
 8003678:	220c      	movs	r2, #12
 800367a:	5ea5      	ldrsh	r5, [r4, r2]
 800367c:	2d00      	cmp	r5, #0
 800367e:	d11a      	bne.n	80036b6 <__sfp+0x6a>
 8003680:	0020      	movs	r0, r4
 8003682:	4b15      	ldr	r3, [pc, #84]	; (80036d8 <__sfp+0x8c>)
 8003684:	3058      	adds	r0, #88	; 0x58
 8003686:	60e3      	str	r3, [r4, #12]
 8003688:	6665      	str	r5, [r4, #100]	; 0x64
 800368a:	f000 f847 	bl	800371c <__retarget_lock_init_recursive>
 800368e:	f7ff ff8d 	bl	80035ac <__sfp_lock_release>
 8003692:	0020      	movs	r0, r4
 8003694:	2208      	movs	r2, #8
 8003696:	0029      	movs	r1, r5
 8003698:	6025      	str	r5, [r4, #0]
 800369a:	60a5      	str	r5, [r4, #8]
 800369c:	6065      	str	r5, [r4, #4]
 800369e:	6125      	str	r5, [r4, #16]
 80036a0:	6165      	str	r5, [r4, #20]
 80036a2:	61a5      	str	r5, [r4, #24]
 80036a4:	305c      	adds	r0, #92	; 0x5c
 80036a6:	f7ff fcff 	bl	80030a8 <memset>
 80036aa:	6365      	str	r5, [r4, #52]	; 0x34
 80036ac:	63a5      	str	r5, [r4, #56]	; 0x38
 80036ae:	64a5      	str	r5, [r4, #72]	; 0x48
 80036b0:	64e5      	str	r5, [r4, #76]	; 0x4c
 80036b2:	0020      	movs	r0, r4
 80036b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80036b6:	3468      	adds	r4, #104	; 0x68
 80036b8:	e7d7      	b.n	800366a <__sfp+0x1e>
 80036ba:	2104      	movs	r1, #4
 80036bc:	0038      	movs	r0, r7
 80036be:	f7ff ff57 	bl	8003570 <__sfmoreglue>
 80036c2:	1e04      	subs	r4, r0, #0
 80036c4:	6030      	str	r0, [r6, #0]
 80036c6:	d1d5      	bne.n	8003674 <__sfp+0x28>
 80036c8:	f7ff ff70 	bl	80035ac <__sfp_lock_release>
 80036cc:	230c      	movs	r3, #12
 80036ce:	603b      	str	r3, [r7, #0]
 80036d0:	e7ef      	b.n	80036b2 <__sfp+0x66>
 80036d2:	46c0      	nop			; (mov r8, r8)
 80036d4:	080041e0 	.word	0x080041e0
 80036d8:	ffff0001 	.word	0xffff0001

080036dc <_fwalk_reent>:
 80036dc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80036de:	0004      	movs	r4, r0
 80036e0:	0006      	movs	r6, r0
 80036e2:	2700      	movs	r7, #0
 80036e4:	9101      	str	r1, [sp, #4]
 80036e6:	3448      	adds	r4, #72	; 0x48
 80036e8:	6863      	ldr	r3, [r4, #4]
 80036ea:	68a5      	ldr	r5, [r4, #8]
 80036ec:	9300      	str	r3, [sp, #0]
 80036ee:	9b00      	ldr	r3, [sp, #0]
 80036f0:	3b01      	subs	r3, #1
 80036f2:	9300      	str	r3, [sp, #0]
 80036f4:	d504      	bpl.n	8003700 <_fwalk_reent+0x24>
 80036f6:	6824      	ldr	r4, [r4, #0]
 80036f8:	2c00      	cmp	r4, #0
 80036fa:	d1f5      	bne.n	80036e8 <_fwalk_reent+0xc>
 80036fc:	0038      	movs	r0, r7
 80036fe:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8003700:	89ab      	ldrh	r3, [r5, #12]
 8003702:	2b01      	cmp	r3, #1
 8003704:	d908      	bls.n	8003718 <_fwalk_reent+0x3c>
 8003706:	220e      	movs	r2, #14
 8003708:	5eab      	ldrsh	r3, [r5, r2]
 800370a:	3301      	adds	r3, #1
 800370c:	d004      	beq.n	8003718 <_fwalk_reent+0x3c>
 800370e:	0029      	movs	r1, r5
 8003710:	0030      	movs	r0, r6
 8003712:	9b01      	ldr	r3, [sp, #4]
 8003714:	4798      	blx	r3
 8003716:	4307      	orrs	r7, r0
 8003718:	3568      	adds	r5, #104	; 0x68
 800371a:	e7e8      	b.n	80036ee <_fwalk_reent+0x12>

0800371c <__retarget_lock_init_recursive>:
 800371c:	4770      	bx	lr

0800371e <__retarget_lock_acquire_recursive>:
 800371e:	4770      	bx	lr

08003720 <__retarget_lock_release_recursive>:
 8003720:	4770      	bx	lr
	...

08003724 <__swhatbuf_r>:
 8003724:	b570      	push	{r4, r5, r6, lr}
 8003726:	000e      	movs	r6, r1
 8003728:	001d      	movs	r5, r3
 800372a:	230e      	movs	r3, #14
 800372c:	5ec9      	ldrsh	r1, [r1, r3]
 800372e:	0014      	movs	r4, r2
 8003730:	b096      	sub	sp, #88	; 0x58
 8003732:	2900      	cmp	r1, #0
 8003734:	da07      	bge.n	8003746 <__swhatbuf_r+0x22>
 8003736:	2300      	movs	r3, #0
 8003738:	602b      	str	r3, [r5, #0]
 800373a:	89b3      	ldrh	r3, [r6, #12]
 800373c:	061b      	lsls	r3, r3, #24
 800373e:	d411      	bmi.n	8003764 <__swhatbuf_r+0x40>
 8003740:	2380      	movs	r3, #128	; 0x80
 8003742:	00db      	lsls	r3, r3, #3
 8003744:	e00f      	b.n	8003766 <__swhatbuf_r+0x42>
 8003746:	466a      	mov	r2, sp
 8003748:	f000 fc68 	bl	800401c <_fstat_r>
 800374c:	2800      	cmp	r0, #0
 800374e:	dbf2      	blt.n	8003736 <__swhatbuf_r+0x12>
 8003750:	23f0      	movs	r3, #240	; 0xf0
 8003752:	9901      	ldr	r1, [sp, #4]
 8003754:	021b      	lsls	r3, r3, #8
 8003756:	4019      	ands	r1, r3
 8003758:	4b05      	ldr	r3, [pc, #20]	; (8003770 <__swhatbuf_r+0x4c>)
 800375a:	18c9      	adds	r1, r1, r3
 800375c:	424b      	negs	r3, r1
 800375e:	4159      	adcs	r1, r3
 8003760:	6029      	str	r1, [r5, #0]
 8003762:	e7ed      	b.n	8003740 <__swhatbuf_r+0x1c>
 8003764:	2340      	movs	r3, #64	; 0x40
 8003766:	2000      	movs	r0, #0
 8003768:	6023      	str	r3, [r4, #0]
 800376a:	b016      	add	sp, #88	; 0x58
 800376c:	bd70      	pop	{r4, r5, r6, pc}
 800376e:	46c0      	nop			; (mov r8, r8)
 8003770:	ffffe000 	.word	0xffffe000

08003774 <__smakebuf_r>:
 8003774:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003776:	2602      	movs	r6, #2
 8003778:	898b      	ldrh	r3, [r1, #12]
 800377a:	0005      	movs	r5, r0
 800377c:	000c      	movs	r4, r1
 800377e:	4233      	tst	r3, r6
 8003780:	d006      	beq.n	8003790 <__smakebuf_r+0x1c>
 8003782:	0023      	movs	r3, r4
 8003784:	3347      	adds	r3, #71	; 0x47
 8003786:	6023      	str	r3, [r4, #0]
 8003788:	6123      	str	r3, [r4, #16]
 800378a:	2301      	movs	r3, #1
 800378c:	6163      	str	r3, [r4, #20]
 800378e:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 8003790:	466a      	mov	r2, sp
 8003792:	ab01      	add	r3, sp, #4
 8003794:	f7ff ffc6 	bl	8003724 <__swhatbuf_r>
 8003798:	9900      	ldr	r1, [sp, #0]
 800379a:	0007      	movs	r7, r0
 800379c:	0028      	movs	r0, r5
 800379e:	f000 f877 	bl	8003890 <_malloc_r>
 80037a2:	2800      	cmp	r0, #0
 80037a4:	d108      	bne.n	80037b8 <__smakebuf_r+0x44>
 80037a6:	220c      	movs	r2, #12
 80037a8:	5ea3      	ldrsh	r3, [r4, r2]
 80037aa:	059a      	lsls	r2, r3, #22
 80037ac:	d4ef      	bmi.n	800378e <__smakebuf_r+0x1a>
 80037ae:	2203      	movs	r2, #3
 80037b0:	4393      	bics	r3, r2
 80037b2:	431e      	orrs	r6, r3
 80037b4:	81a6      	strh	r6, [r4, #12]
 80037b6:	e7e4      	b.n	8003782 <__smakebuf_r+0xe>
 80037b8:	4b0f      	ldr	r3, [pc, #60]	; (80037f8 <__smakebuf_r+0x84>)
 80037ba:	62ab      	str	r3, [r5, #40]	; 0x28
 80037bc:	2380      	movs	r3, #128	; 0x80
 80037be:	89a2      	ldrh	r2, [r4, #12]
 80037c0:	6020      	str	r0, [r4, #0]
 80037c2:	4313      	orrs	r3, r2
 80037c4:	81a3      	strh	r3, [r4, #12]
 80037c6:	9b00      	ldr	r3, [sp, #0]
 80037c8:	6120      	str	r0, [r4, #16]
 80037ca:	6163      	str	r3, [r4, #20]
 80037cc:	9b01      	ldr	r3, [sp, #4]
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d00d      	beq.n	80037ee <__smakebuf_r+0x7a>
 80037d2:	0028      	movs	r0, r5
 80037d4:	230e      	movs	r3, #14
 80037d6:	5ee1      	ldrsh	r1, [r4, r3]
 80037d8:	f000 fc32 	bl	8004040 <_isatty_r>
 80037dc:	2800      	cmp	r0, #0
 80037de:	d006      	beq.n	80037ee <__smakebuf_r+0x7a>
 80037e0:	2203      	movs	r2, #3
 80037e2:	89a3      	ldrh	r3, [r4, #12]
 80037e4:	4393      	bics	r3, r2
 80037e6:	001a      	movs	r2, r3
 80037e8:	2301      	movs	r3, #1
 80037ea:	4313      	orrs	r3, r2
 80037ec:	81a3      	strh	r3, [r4, #12]
 80037ee:	89a0      	ldrh	r0, [r4, #12]
 80037f0:	4307      	orrs	r7, r0
 80037f2:	81a7      	strh	r7, [r4, #12]
 80037f4:	e7cb      	b.n	800378e <__smakebuf_r+0x1a>
 80037f6:	46c0      	nop			; (mov r8, r8)
 80037f8:	08003561 	.word	0x08003561

080037fc <_free_r>:
 80037fc:	b570      	push	{r4, r5, r6, lr}
 80037fe:	0005      	movs	r5, r0
 8003800:	2900      	cmp	r1, #0
 8003802:	d010      	beq.n	8003826 <_free_r+0x2a>
 8003804:	1f0c      	subs	r4, r1, #4
 8003806:	6823      	ldr	r3, [r4, #0]
 8003808:	2b00      	cmp	r3, #0
 800380a:	da00      	bge.n	800380e <_free_r+0x12>
 800380c:	18e4      	adds	r4, r4, r3
 800380e:	0028      	movs	r0, r5
 8003810:	f000 fc48 	bl	80040a4 <__malloc_lock>
 8003814:	4a1d      	ldr	r2, [pc, #116]	; (800388c <_free_r+0x90>)
 8003816:	6813      	ldr	r3, [r2, #0]
 8003818:	2b00      	cmp	r3, #0
 800381a:	d105      	bne.n	8003828 <_free_r+0x2c>
 800381c:	6063      	str	r3, [r4, #4]
 800381e:	6014      	str	r4, [r2, #0]
 8003820:	0028      	movs	r0, r5
 8003822:	f000 fc47 	bl	80040b4 <__malloc_unlock>
 8003826:	bd70      	pop	{r4, r5, r6, pc}
 8003828:	42a3      	cmp	r3, r4
 800382a:	d908      	bls.n	800383e <_free_r+0x42>
 800382c:	6821      	ldr	r1, [r4, #0]
 800382e:	1860      	adds	r0, r4, r1
 8003830:	4283      	cmp	r3, r0
 8003832:	d1f3      	bne.n	800381c <_free_r+0x20>
 8003834:	6818      	ldr	r0, [r3, #0]
 8003836:	685b      	ldr	r3, [r3, #4]
 8003838:	1841      	adds	r1, r0, r1
 800383a:	6021      	str	r1, [r4, #0]
 800383c:	e7ee      	b.n	800381c <_free_r+0x20>
 800383e:	001a      	movs	r2, r3
 8003840:	685b      	ldr	r3, [r3, #4]
 8003842:	2b00      	cmp	r3, #0
 8003844:	d001      	beq.n	800384a <_free_r+0x4e>
 8003846:	42a3      	cmp	r3, r4
 8003848:	d9f9      	bls.n	800383e <_free_r+0x42>
 800384a:	6811      	ldr	r1, [r2, #0]
 800384c:	1850      	adds	r0, r2, r1
 800384e:	42a0      	cmp	r0, r4
 8003850:	d10b      	bne.n	800386a <_free_r+0x6e>
 8003852:	6820      	ldr	r0, [r4, #0]
 8003854:	1809      	adds	r1, r1, r0
 8003856:	1850      	adds	r0, r2, r1
 8003858:	6011      	str	r1, [r2, #0]
 800385a:	4283      	cmp	r3, r0
 800385c:	d1e0      	bne.n	8003820 <_free_r+0x24>
 800385e:	6818      	ldr	r0, [r3, #0]
 8003860:	685b      	ldr	r3, [r3, #4]
 8003862:	1841      	adds	r1, r0, r1
 8003864:	6011      	str	r1, [r2, #0]
 8003866:	6053      	str	r3, [r2, #4]
 8003868:	e7da      	b.n	8003820 <_free_r+0x24>
 800386a:	42a0      	cmp	r0, r4
 800386c:	d902      	bls.n	8003874 <_free_r+0x78>
 800386e:	230c      	movs	r3, #12
 8003870:	602b      	str	r3, [r5, #0]
 8003872:	e7d5      	b.n	8003820 <_free_r+0x24>
 8003874:	6821      	ldr	r1, [r4, #0]
 8003876:	1860      	adds	r0, r4, r1
 8003878:	4283      	cmp	r3, r0
 800387a:	d103      	bne.n	8003884 <_free_r+0x88>
 800387c:	6818      	ldr	r0, [r3, #0]
 800387e:	685b      	ldr	r3, [r3, #4]
 8003880:	1841      	adds	r1, r0, r1
 8003882:	6021      	str	r1, [r4, #0]
 8003884:	6063      	str	r3, [r4, #4]
 8003886:	6054      	str	r4, [r2, #4]
 8003888:	e7ca      	b.n	8003820 <_free_r+0x24>
 800388a:	46c0      	nop			; (mov r8, r8)
 800388c:	20000090 	.word	0x20000090

08003890 <_malloc_r>:
 8003890:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003892:	2303      	movs	r3, #3
 8003894:	1ccd      	adds	r5, r1, #3
 8003896:	439d      	bics	r5, r3
 8003898:	3508      	adds	r5, #8
 800389a:	0006      	movs	r6, r0
 800389c:	2d0c      	cmp	r5, #12
 800389e:	d21f      	bcs.n	80038e0 <_malloc_r+0x50>
 80038a0:	250c      	movs	r5, #12
 80038a2:	42a9      	cmp	r1, r5
 80038a4:	d81e      	bhi.n	80038e4 <_malloc_r+0x54>
 80038a6:	0030      	movs	r0, r6
 80038a8:	f000 fbfc 	bl	80040a4 <__malloc_lock>
 80038ac:	4925      	ldr	r1, [pc, #148]	; (8003944 <_malloc_r+0xb4>)
 80038ae:	680a      	ldr	r2, [r1, #0]
 80038b0:	0014      	movs	r4, r2
 80038b2:	2c00      	cmp	r4, #0
 80038b4:	d11a      	bne.n	80038ec <_malloc_r+0x5c>
 80038b6:	4f24      	ldr	r7, [pc, #144]	; (8003948 <_malloc_r+0xb8>)
 80038b8:	683b      	ldr	r3, [r7, #0]
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d104      	bne.n	80038c8 <_malloc_r+0x38>
 80038be:	0021      	movs	r1, r4
 80038c0:	0030      	movs	r0, r6
 80038c2:	f000 fb27 	bl	8003f14 <_sbrk_r>
 80038c6:	6038      	str	r0, [r7, #0]
 80038c8:	0029      	movs	r1, r5
 80038ca:	0030      	movs	r0, r6
 80038cc:	f000 fb22 	bl	8003f14 <_sbrk_r>
 80038d0:	1c43      	adds	r3, r0, #1
 80038d2:	d12b      	bne.n	800392c <_malloc_r+0x9c>
 80038d4:	230c      	movs	r3, #12
 80038d6:	0030      	movs	r0, r6
 80038d8:	6033      	str	r3, [r6, #0]
 80038da:	f000 fbeb 	bl	80040b4 <__malloc_unlock>
 80038de:	e003      	b.n	80038e8 <_malloc_r+0x58>
 80038e0:	2d00      	cmp	r5, #0
 80038e2:	dade      	bge.n	80038a2 <_malloc_r+0x12>
 80038e4:	230c      	movs	r3, #12
 80038e6:	6033      	str	r3, [r6, #0]
 80038e8:	2000      	movs	r0, #0
 80038ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80038ec:	6823      	ldr	r3, [r4, #0]
 80038ee:	1b5b      	subs	r3, r3, r5
 80038f0:	d419      	bmi.n	8003926 <_malloc_r+0x96>
 80038f2:	2b0b      	cmp	r3, #11
 80038f4:	d903      	bls.n	80038fe <_malloc_r+0x6e>
 80038f6:	6023      	str	r3, [r4, #0]
 80038f8:	18e4      	adds	r4, r4, r3
 80038fa:	6025      	str	r5, [r4, #0]
 80038fc:	e003      	b.n	8003906 <_malloc_r+0x76>
 80038fe:	6863      	ldr	r3, [r4, #4]
 8003900:	42a2      	cmp	r2, r4
 8003902:	d10e      	bne.n	8003922 <_malloc_r+0x92>
 8003904:	600b      	str	r3, [r1, #0]
 8003906:	0030      	movs	r0, r6
 8003908:	f000 fbd4 	bl	80040b4 <__malloc_unlock>
 800390c:	0020      	movs	r0, r4
 800390e:	2207      	movs	r2, #7
 8003910:	300b      	adds	r0, #11
 8003912:	1d23      	adds	r3, r4, #4
 8003914:	4390      	bics	r0, r2
 8003916:	1ac2      	subs	r2, r0, r3
 8003918:	4298      	cmp	r0, r3
 800391a:	d0e6      	beq.n	80038ea <_malloc_r+0x5a>
 800391c:	1a1b      	subs	r3, r3, r0
 800391e:	50a3      	str	r3, [r4, r2]
 8003920:	e7e3      	b.n	80038ea <_malloc_r+0x5a>
 8003922:	6053      	str	r3, [r2, #4]
 8003924:	e7ef      	b.n	8003906 <_malloc_r+0x76>
 8003926:	0022      	movs	r2, r4
 8003928:	6864      	ldr	r4, [r4, #4]
 800392a:	e7c2      	b.n	80038b2 <_malloc_r+0x22>
 800392c:	2303      	movs	r3, #3
 800392e:	1cc4      	adds	r4, r0, #3
 8003930:	439c      	bics	r4, r3
 8003932:	42a0      	cmp	r0, r4
 8003934:	d0e1      	beq.n	80038fa <_malloc_r+0x6a>
 8003936:	1a21      	subs	r1, r4, r0
 8003938:	0030      	movs	r0, r6
 800393a:	f000 faeb 	bl	8003f14 <_sbrk_r>
 800393e:	1c43      	adds	r3, r0, #1
 8003940:	d1db      	bne.n	80038fa <_malloc_r+0x6a>
 8003942:	e7c7      	b.n	80038d4 <_malloc_r+0x44>
 8003944:	20000090 	.word	0x20000090
 8003948:	20000094 	.word	0x20000094

0800394c <__sfputc_r>:
 800394c:	6893      	ldr	r3, [r2, #8]
 800394e:	b510      	push	{r4, lr}
 8003950:	3b01      	subs	r3, #1
 8003952:	6093      	str	r3, [r2, #8]
 8003954:	2b00      	cmp	r3, #0
 8003956:	da04      	bge.n	8003962 <__sfputc_r+0x16>
 8003958:	6994      	ldr	r4, [r2, #24]
 800395a:	42a3      	cmp	r3, r4
 800395c:	db07      	blt.n	800396e <__sfputc_r+0x22>
 800395e:	290a      	cmp	r1, #10
 8003960:	d005      	beq.n	800396e <__sfputc_r+0x22>
 8003962:	6813      	ldr	r3, [r2, #0]
 8003964:	1c58      	adds	r0, r3, #1
 8003966:	6010      	str	r0, [r2, #0]
 8003968:	7019      	strb	r1, [r3, #0]
 800396a:	0008      	movs	r0, r1
 800396c:	bd10      	pop	{r4, pc}
 800396e:	f7ff fc39 	bl	80031e4 <__swbuf_r>
 8003972:	0001      	movs	r1, r0
 8003974:	e7f9      	b.n	800396a <__sfputc_r+0x1e>

08003976 <__sfputs_r>:
 8003976:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003978:	0006      	movs	r6, r0
 800397a:	000f      	movs	r7, r1
 800397c:	0014      	movs	r4, r2
 800397e:	18d5      	adds	r5, r2, r3
 8003980:	42ac      	cmp	r4, r5
 8003982:	d101      	bne.n	8003988 <__sfputs_r+0x12>
 8003984:	2000      	movs	r0, #0
 8003986:	e007      	b.n	8003998 <__sfputs_r+0x22>
 8003988:	7821      	ldrb	r1, [r4, #0]
 800398a:	003a      	movs	r2, r7
 800398c:	0030      	movs	r0, r6
 800398e:	f7ff ffdd 	bl	800394c <__sfputc_r>
 8003992:	3401      	adds	r4, #1
 8003994:	1c43      	adds	r3, r0, #1
 8003996:	d1f3      	bne.n	8003980 <__sfputs_r+0xa>
 8003998:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800399c <_vfiprintf_r>:
 800399c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800399e:	b0a1      	sub	sp, #132	; 0x84
 80039a0:	0006      	movs	r6, r0
 80039a2:	000c      	movs	r4, r1
 80039a4:	001f      	movs	r7, r3
 80039a6:	9203      	str	r2, [sp, #12]
 80039a8:	2800      	cmp	r0, #0
 80039aa:	d004      	beq.n	80039b6 <_vfiprintf_r+0x1a>
 80039ac:	6983      	ldr	r3, [r0, #24]
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d101      	bne.n	80039b6 <_vfiprintf_r+0x1a>
 80039b2:	f7ff fe13 	bl	80035dc <__sinit>
 80039b6:	4b8e      	ldr	r3, [pc, #568]	; (8003bf0 <_vfiprintf_r+0x254>)
 80039b8:	429c      	cmp	r4, r3
 80039ba:	d11c      	bne.n	80039f6 <_vfiprintf_r+0x5a>
 80039bc:	6874      	ldr	r4, [r6, #4]
 80039be:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80039c0:	07db      	lsls	r3, r3, #31
 80039c2:	d405      	bmi.n	80039d0 <_vfiprintf_r+0x34>
 80039c4:	89a3      	ldrh	r3, [r4, #12]
 80039c6:	059b      	lsls	r3, r3, #22
 80039c8:	d402      	bmi.n	80039d0 <_vfiprintf_r+0x34>
 80039ca:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80039cc:	f7ff fea7 	bl	800371e <__retarget_lock_acquire_recursive>
 80039d0:	89a3      	ldrh	r3, [r4, #12]
 80039d2:	071b      	lsls	r3, r3, #28
 80039d4:	d502      	bpl.n	80039dc <_vfiprintf_r+0x40>
 80039d6:	6923      	ldr	r3, [r4, #16]
 80039d8:	2b00      	cmp	r3, #0
 80039da:	d11d      	bne.n	8003a18 <_vfiprintf_r+0x7c>
 80039dc:	0021      	movs	r1, r4
 80039de:	0030      	movs	r0, r6
 80039e0:	f7ff fc56 	bl	8003290 <__swsetup_r>
 80039e4:	2800      	cmp	r0, #0
 80039e6:	d017      	beq.n	8003a18 <_vfiprintf_r+0x7c>
 80039e8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80039ea:	07db      	lsls	r3, r3, #31
 80039ec:	d50d      	bpl.n	8003a0a <_vfiprintf_r+0x6e>
 80039ee:	2001      	movs	r0, #1
 80039f0:	4240      	negs	r0, r0
 80039f2:	b021      	add	sp, #132	; 0x84
 80039f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80039f6:	4b7f      	ldr	r3, [pc, #508]	; (8003bf4 <_vfiprintf_r+0x258>)
 80039f8:	429c      	cmp	r4, r3
 80039fa:	d101      	bne.n	8003a00 <_vfiprintf_r+0x64>
 80039fc:	68b4      	ldr	r4, [r6, #8]
 80039fe:	e7de      	b.n	80039be <_vfiprintf_r+0x22>
 8003a00:	4b7d      	ldr	r3, [pc, #500]	; (8003bf8 <_vfiprintf_r+0x25c>)
 8003a02:	429c      	cmp	r4, r3
 8003a04:	d1db      	bne.n	80039be <_vfiprintf_r+0x22>
 8003a06:	68f4      	ldr	r4, [r6, #12]
 8003a08:	e7d9      	b.n	80039be <_vfiprintf_r+0x22>
 8003a0a:	89a3      	ldrh	r3, [r4, #12]
 8003a0c:	059b      	lsls	r3, r3, #22
 8003a0e:	d4ee      	bmi.n	80039ee <_vfiprintf_r+0x52>
 8003a10:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003a12:	f7ff fe85 	bl	8003720 <__retarget_lock_release_recursive>
 8003a16:	e7ea      	b.n	80039ee <_vfiprintf_r+0x52>
 8003a18:	2300      	movs	r3, #0
 8003a1a:	ad08      	add	r5, sp, #32
 8003a1c:	616b      	str	r3, [r5, #20]
 8003a1e:	3320      	adds	r3, #32
 8003a20:	766b      	strb	r3, [r5, #25]
 8003a22:	3310      	adds	r3, #16
 8003a24:	76ab      	strb	r3, [r5, #26]
 8003a26:	9707      	str	r7, [sp, #28]
 8003a28:	9f03      	ldr	r7, [sp, #12]
 8003a2a:	783b      	ldrb	r3, [r7, #0]
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	d001      	beq.n	8003a34 <_vfiprintf_r+0x98>
 8003a30:	2b25      	cmp	r3, #37	; 0x25
 8003a32:	d14e      	bne.n	8003ad2 <_vfiprintf_r+0x136>
 8003a34:	9b03      	ldr	r3, [sp, #12]
 8003a36:	1afb      	subs	r3, r7, r3
 8003a38:	9305      	str	r3, [sp, #20]
 8003a3a:	9b03      	ldr	r3, [sp, #12]
 8003a3c:	429f      	cmp	r7, r3
 8003a3e:	d00d      	beq.n	8003a5c <_vfiprintf_r+0xc0>
 8003a40:	9b05      	ldr	r3, [sp, #20]
 8003a42:	0021      	movs	r1, r4
 8003a44:	0030      	movs	r0, r6
 8003a46:	9a03      	ldr	r2, [sp, #12]
 8003a48:	f7ff ff95 	bl	8003976 <__sfputs_r>
 8003a4c:	1c43      	adds	r3, r0, #1
 8003a4e:	d100      	bne.n	8003a52 <_vfiprintf_r+0xb6>
 8003a50:	e0b5      	b.n	8003bbe <_vfiprintf_r+0x222>
 8003a52:	696a      	ldr	r2, [r5, #20]
 8003a54:	9b05      	ldr	r3, [sp, #20]
 8003a56:	4694      	mov	ip, r2
 8003a58:	4463      	add	r3, ip
 8003a5a:	616b      	str	r3, [r5, #20]
 8003a5c:	783b      	ldrb	r3, [r7, #0]
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d100      	bne.n	8003a64 <_vfiprintf_r+0xc8>
 8003a62:	e0ac      	b.n	8003bbe <_vfiprintf_r+0x222>
 8003a64:	2201      	movs	r2, #1
 8003a66:	1c7b      	adds	r3, r7, #1
 8003a68:	9303      	str	r3, [sp, #12]
 8003a6a:	2300      	movs	r3, #0
 8003a6c:	4252      	negs	r2, r2
 8003a6e:	606a      	str	r2, [r5, #4]
 8003a70:	a904      	add	r1, sp, #16
 8003a72:	3254      	adds	r2, #84	; 0x54
 8003a74:	1852      	adds	r2, r2, r1
 8003a76:	602b      	str	r3, [r5, #0]
 8003a78:	60eb      	str	r3, [r5, #12]
 8003a7a:	60ab      	str	r3, [r5, #8]
 8003a7c:	7013      	strb	r3, [r2, #0]
 8003a7e:	65ab      	str	r3, [r5, #88]	; 0x58
 8003a80:	9b03      	ldr	r3, [sp, #12]
 8003a82:	2205      	movs	r2, #5
 8003a84:	7819      	ldrb	r1, [r3, #0]
 8003a86:	485d      	ldr	r0, [pc, #372]	; (8003bfc <_vfiprintf_r+0x260>)
 8003a88:	f000 fb00 	bl	800408c <memchr>
 8003a8c:	9b03      	ldr	r3, [sp, #12]
 8003a8e:	1c5f      	adds	r7, r3, #1
 8003a90:	2800      	cmp	r0, #0
 8003a92:	d120      	bne.n	8003ad6 <_vfiprintf_r+0x13a>
 8003a94:	682a      	ldr	r2, [r5, #0]
 8003a96:	06d3      	lsls	r3, r2, #27
 8003a98:	d504      	bpl.n	8003aa4 <_vfiprintf_r+0x108>
 8003a9a:	2353      	movs	r3, #83	; 0x53
 8003a9c:	a904      	add	r1, sp, #16
 8003a9e:	185b      	adds	r3, r3, r1
 8003aa0:	2120      	movs	r1, #32
 8003aa2:	7019      	strb	r1, [r3, #0]
 8003aa4:	0713      	lsls	r3, r2, #28
 8003aa6:	d504      	bpl.n	8003ab2 <_vfiprintf_r+0x116>
 8003aa8:	2353      	movs	r3, #83	; 0x53
 8003aaa:	a904      	add	r1, sp, #16
 8003aac:	185b      	adds	r3, r3, r1
 8003aae:	212b      	movs	r1, #43	; 0x2b
 8003ab0:	7019      	strb	r1, [r3, #0]
 8003ab2:	9b03      	ldr	r3, [sp, #12]
 8003ab4:	781b      	ldrb	r3, [r3, #0]
 8003ab6:	2b2a      	cmp	r3, #42	; 0x2a
 8003ab8:	d016      	beq.n	8003ae8 <_vfiprintf_r+0x14c>
 8003aba:	2100      	movs	r1, #0
 8003abc:	68eb      	ldr	r3, [r5, #12]
 8003abe:	9f03      	ldr	r7, [sp, #12]
 8003ac0:	783a      	ldrb	r2, [r7, #0]
 8003ac2:	1c78      	adds	r0, r7, #1
 8003ac4:	3a30      	subs	r2, #48	; 0x30
 8003ac6:	4684      	mov	ip, r0
 8003ac8:	2a09      	cmp	r2, #9
 8003aca:	d94f      	bls.n	8003b6c <_vfiprintf_r+0x1d0>
 8003acc:	2900      	cmp	r1, #0
 8003ace:	d111      	bne.n	8003af4 <_vfiprintf_r+0x158>
 8003ad0:	e017      	b.n	8003b02 <_vfiprintf_r+0x166>
 8003ad2:	3701      	adds	r7, #1
 8003ad4:	e7a9      	b.n	8003a2a <_vfiprintf_r+0x8e>
 8003ad6:	4b49      	ldr	r3, [pc, #292]	; (8003bfc <_vfiprintf_r+0x260>)
 8003ad8:	682a      	ldr	r2, [r5, #0]
 8003ada:	1ac0      	subs	r0, r0, r3
 8003adc:	2301      	movs	r3, #1
 8003ade:	4083      	lsls	r3, r0
 8003ae0:	4313      	orrs	r3, r2
 8003ae2:	602b      	str	r3, [r5, #0]
 8003ae4:	9703      	str	r7, [sp, #12]
 8003ae6:	e7cb      	b.n	8003a80 <_vfiprintf_r+0xe4>
 8003ae8:	9b07      	ldr	r3, [sp, #28]
 8003aea:	1d19      	adds	r1, r3, #4
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	9107      	str	r1, [sp, #28]
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	db01      	blt.n	8003af8 <_vfiprintf_r+0x15c>
 8003af4:	930b      	str	r3, [sp, #44]	; 0x2c
 8003af6:	e004      	b.n	8003b02 <_vfiprintf_r+0x166>
 8003af8:	425b      	negs	r3, r3
 8003afa:	60eb      	str	r3, [r5, #12]
 8003afc:	2302      	movs	r3, #2
 8003afe:	4313      	orrs	r3, r2
 8003b00:	602b      	str	r3, [r5, #0]
 8003b02:	783b      	ldrb	r3, [r7, #0]
 8003b04:	2b2e      	cmp	r3, #46	; 0x2e
 8003b06:	d10a      	bne.n	8003b1e <_vfiprintf_r+0x182>
 8003b08:	787b      	ldrb	r3, [r7, #1]
 8003b0a:	2b2a      	cmp	r3, #42	; 0x2a
 8003b0c:	d137      	bne.n	8003b7e <_vfiprintf_r+0x1e2>
 8003b0e:	9b07      	ldr	r3, [sp, #28]
 8003b10:	3702      	adds	r7, #2
 8003b12:	1d1a      	adds	r2, r3, #4
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	9207      	str	r2, [sp, #28]
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	db2d      	blt.n	8003b78 <_vfiprintf_r+0x1dc>
 8003b1c:	9309      	str	r3, [sp, #36]	; 0x24
 8003b1e:	2203      	movs	r2, #3
 8003b20:	7839      	ldrb	r1, [r7, #0]
 8003b22:	4837      	ldr	r0, [pc, #220]	; (8003c00 <_vfiprintf_r+0x264>)
 8003b24:	f000 fab2 	bl	800408c <memchr>
 8003b28:	2800      	cmp	r0, #0
 8003b2a:	d007      	beq.n	8003b3c <_vfiprintf_r+0x1a0>
 8003b2c:	4b34      	ldr	r3, [pc, #208]	; (8003c00 <_vfiprintf_r+0x264>)
 8003b2e:	682a      	ldr	r2, [r5, #0]
 8003b30:	1ac0      	subs	r0, r0, r3
 8003b32:	2340      	movs	r3, #64	; 0x40
 8003b34:	4083      	lsls	r3, r0
 8003b36:	4313      	orrs	r3, r2
 8003b38:	3701      	adds	r7, #1
 8003b3a:	602b      	str	r3, [r5, #0]
 8003b3c:	7839      	ldrb	r1, [r7, #0]
 8003b3e:	1c7b      	adds	r3, r7, #1
 8003b40:	2206      	movs	r2, #6
 8003b42:	4830      	ldr	r0, [pc, #192]	; (8003c04 <_vfiprintf_r+0x268>)
 8003b44:	9303      	str	r3, [sp, #12]
 8003b46:	7629      	strb	r1, [r5, #24]
 8003b48:	f000 faa0 	bl	800408c <memchr>
 8003b4c:	2800      	cmp	r0, #0
 8003b4e:	d045      	beq.n	8003bdc <_vfiprintf_r+0x240>
 8003b50:	4b2d      	ldr	r3, [pc, #180]	; (8003c08 <_vfiprintf_r+0x26c>)
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d127      	bne.n	8003ba6 <_vfiprintf_r+0x20a>
 8003b56:	2207      	movs	r2, #7
 8003b58:	9b07      	ldr	r3, [sp, #28]
 8003b5a:	3307      	adds	r3, #7
 8003b5c:	4393      	bics	r3, r2
 8003b5e:	3308      	adds	r3, #8
 8003b60:	9307      	str	r3, [sp, #28]
 8003b62:	696b      	ldr	r3, [r5, #20]
 8003b64:	9a04      	ldr	r2, [sp, #16]
 8003b66:	189b      	adds	r3, r3, r2
 8003b68:	616b      	str	r3, [r5, #20]
 8003b6a:	e75d      	b.n	8003a28 <_vfiprintf_r+0x8c>
 8003b6c:	210a      	movs	r1, #10
 8003b6e:	434b      	muls	r3, r1
 8003b70:	4667      	mov	r7, ip
 8003b72:	189b      	adds	r3, r3, r2
 8003b74:	3909      	subs	r1, #9
 8003b76:	e7a3      	b.n	8003ac0 <_vfiprintf_r+0x124>
 8003b78:	2301      	movs	r3, #1
 8003b7a:	425b      	negs	r3, r3
 8003b7c:	e7ce      	b.n	8003b1c <_vfiprintf_r+0x180>
 8003b7e:	2300      	movs	r3, #0
 8003b80:	001a      	movs	r2, r3
 8003b82:	3701      	adds	r7, #1
 8003b84:	606b      	str	r3, [r5, #4]
 8003b86:	7839      	ldrb	r1, [r7, #0]
 8003b88:	1c78      	adds	r0, r7, #1
 8003b8a:	3930      	subs	r1, #48	; 0x30
 8003b8c:	4684      	mov	ip, r0
 8003b8e:	2909      	cmp	r1, #9
 8003b90:	d903      	bls.n	8003b9a <_vfiprintf_r+0x1fe>
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d0c3      	beq.n	8003b1e <_vfiprintf_r+0x182>
 8003b96:	9209      	str	r2, [sp, #36]	; 0x24
 8003b98:	e7c1      	b.n	8003b1e <_vfiprintf_r+0x182>
 8003b9a:	230a      	movs	r3, #10
 8003b9c:	435a      	muls	r2, r3
 8003b9e:	4667      	mov	r7, ip
 8003ba0:	1852      	adds	r2, r2, r1
 8003ba2:	3b09      	subs	r3, #9
 8003ba4:	e7ef      	b.n	8003b86 <_vfiprintf_r+0x1ea>
 8003ba6:	ab07      	add	r3, sp, #28
 8003ba8:	9300      	str	r3, [sp, #0]
 8003baa:	0022      	movs	r2, r4
 8003bac:	0029      	movs	r1, r5
 8003bae:	0030      	movs	r0, r6
 8003bb0:	4b16      	ldr	r3, [pc, #88]	; (8003c0c <_vfiprintf_r+0x270>)
 8003bb2:	e000      	b.n	8003bb6 <_vfiprintf_r+0x21a>
 8003bb4:	bf00      	nop
 8003bb6:	9004      	str	r0, [sp, #16]
 8003bb8:	9b04      	ldr	r3, [sp, #16]
 8003bba:	3301      	adds	r3, #1
 8003bbc:	d1d1      	bne.n	8003b62 <_vfiprintf_r+0x1c6>
 8003bbe:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003bc0:	07db      	lsls	r3, r3, #31
 8003bc2:	d405      	bmi.n	8003bd0 <_vfiprintf_r+0x234>
 8003bc4:	89a3      	ldrh	r3, [r4, #12]
 8003bc6:	059b      	lsls	r3, r3, #22
 8003bc8:	d402      	bmi.n	8003bd0 <_vfiprintf_r+0x234>
 8003bca:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003bcc:	f7ff fda8 	bl	8003720 <__retarget_lock_release_recursive>
 8003bd0:	89a3      	ldrh	r3, [r4, #12]
 8003bd2:	065b      	lsls	r3, r3, #25
 8003bd4:	d500      	bpl.n	8003bd8 <_vfiprintf_r+0x23c>
 8003bd6:	e70a      	b.n	80039ee <_vfiprintf_r+0x52>
 8003bd8:	980d      	ldr	r0, [sp, #52]	; 0x34
 8003bda:	e70a      	b.n	80039f2 <_vfiprintf_r+0x56>
 8003bdc:	ab07      	add	r3, sp, #28
 8003bde:	9300      	str	r3, [sp, #0]
 8003be0:	0022      	movs	r2, r4
 8003be2:	0029      	movs	r1, r5
 8003be4:	0030      	movs	r0, r6
 8003be6:	4b09      	ldr	r3, [pc, #36]	; (8003c0c <_vfiprintf_r+0x270>)
 8003be8:	f000 f882 	bl	8003cf0 <_printf_i>
 8003bec:	e7e3      	b.n	8003bb6 <_vfiprintf_r+0x21a>
 8003bee:	46c0      	nop			; (mov r8, r8)
 8003bf0:	08004204 	.word	0x08004204
 8003bf4:	08004224 	.word	0x08004224
 8003bf8:	080041e4 	.word	0x080041e4
 8003bfc:	08004244 	.word	0x08004244
 8003c00:	0800424a 	.word	0x0800424a
 8003c04:	0800424e 	.word	0x0800424e
 8003c08:	00000000 	.word	0x00000000
 8003c0c:	08003977 	.word	0x08003977

08003c10 <_printf_common>:
 8003c10:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003c12:	0015      	movs	r5, r2
 8003c14:	9301      	str	r3, [sp, #4]
 8003c16:	688a      	ldr	r2, [r1, #8]
 8003c18:	690b      	ldr	r3, [r1, #16]
 8003c1a:	000c      	movs	r4, r1
 8003c1c:	9000      	str	r0, [sp, #0]
 8003c1e:	4293      	cmp	r3, r2
 8003c20:	da00      	bge.n	8003c24 <_printf_common+0x14>
 8003c22:	0013      	movs	r3, r2
 8003c24:	0022      	movs	r2, r4
 8003c26:	602b      	str	r3, [r5, #0]
 8003c28:	3243      	adds	r2, #67	; 0x43
 8003c2a:	7812      	ldrb	r2, [r2, #0]
 8003c2c:	2a00      	cmp	r2, #0
 8003c2e:	d001      	beq.n	8003c34 <_printf_common+0x24>
 8003c30:	3301      	adds	r3, #1
 8003c32:	602b      	str	r3, [r5, #0]
 8003c34:	6823      	ldr	r3, [r4, #0]
 8003c36:	069b      	lsls	r3, r3, #26
 8003c38:	d502      	bpl.n	8003c40 <_printf_common+0x30>
 8003c3a:	682b      	ldr	r3, [r5, #0]
 8003c3c:	3302      	adds	r3, #2
 8003c3e:	602b      	str	r3, [r5, #0]
 8003c40:	6822      	ldr	r2, [r4, #0]
 8003c42:	2306      	movs	r3, #6
 8003c44:	0017      	movs	r7, r2
 8003c46:	401f      	ands	r7, r3
 8003c48:	421a      	tst	r2, r3
 8003c4a:	d027      	beq.n	8003c9c <_printf_common+0x8c>
 8003c4c:	0023      	movs	r3, r4
 8003c4e:	3343      	adds	r3, #67	; 0x43
 8003c50:	781b      	ldrb	r3, [r3, #0]
 8003c52:	1e5a      	subs	r2, r3, #1
 8003c54:	4193      	sbcs	r3, r2
 8003c56:	6822      	ldr	r2, [r4, #0]
 8003c58:	0692      	lsls	r2, r2, #26
 8003c5a:	d430      	bmi.n	8003cbe <_printf_common+0xae>
 8003c5c:	0022      	movs	r2, r4
 8003c5e:	9901      	ldr	r1, [sp, #4]
 8003c60:	9800      	ldr	r0, [sp, #0]
 8003c62:	9e08      	ldr	r6, [sp, #32]
 8003c64:	3243      	adds	r2, #67	; 0x43
 8003c66:	47b0      	blx	r6
 8003c68:	1c43      	adds	r3, r0, #1
 8003c6a:	d025      	beq.n	8003cb8 <_printf_common+0xa8>
 8003c6c:	2306      	movs	r3, #6
 8003c6e:	6820      	ldr	r0, [r4, #0]
 8003c70:	682a      	ldr	r2, [r5, #0]
 8003c72:	68e1      	ldr	r1, [r4, #12]
 8003c74:	2500      	movs	r5, #0
 8003c76:	4003      	ands	r3, r0
 8003c78:	2b04      	cmp	r3, #4
 8003c7a:	d103      	bne.n	8003c84 <_printf_common+0x74>
 8003c7c:	1a8d      	subs	r5, r1, r2
 8003c7e:	43eb      	mvns	r3, r5
 8003c80:	17db      	asrs	r3, r3, #31
 8003c82:	401d      	ands	r5, r3
 8003c84:	68a3      	ldr	r3, [r4, #8]
 8003c86:	6922      	ldr	r2, [r4, #16]
 8003c88:	4293      	cmp	r3, r2
 8003c8a:	dd01      	ble.n	8003c90 <_printf_common+0x80>
 8003c8c:	1a9b      	subs	r3, r3, r2
 8003c8e:	18ed      	adds	r5, r5, r3
 8003c90:	2700      	movs	r7, #0
 8003c92:	42bd      	cmp	r5, r7
 8003c94:	d120      	bne.n	8003cd8 <_printf_common+0xc8>
 8003c96:	2000      	movs	r0, #0
 8003c98:	e010      	b.n	8003cbc <_printf_common+0xac>
 8003c9a:	3701      	adds	r7, #1
 8003c9c:	68e3      	ldr	r3, [r4, #12]
 8003c9e:	682a      	ldr	r2, [r5, #0]
 8003ca0:	1a9b      	subs	r3, r3, r2
 8003ca2:	42bb      	cmp	r3, r7
 8003ca4:	ddd2      	ble.n	8003c4c <_printf_common+0x3c>
 8003ca6:	0022      	movs	r2, r4
 8003ca8:	2301      	movs	r3, #1
 8003caa:	9901      	ldr	r1, [sp, #4]
 8003cac:	9800      	ldr	r0, [sp, #0]
 8003cae:	9e08      	ldr	r6, [sp, #32]
 8003cb0:	3219      	adds	r2, #25
 8003cb2:	47b0      	blx	r6
 8003cb4:	1c43      	adds	r3, r0, #1
 8003cb6:	d1f0      	bne.n	8003c9a <_printf_common+0x8a>
 8003cb8:	2001      	movs	r0, #1
 8003cba:	4240      	negs	r0, r0
 8003cbc:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8003cbe:	2030      	movs	r0, #48	; 0x30
 8003cc0:	18e1      	adds	r1, r4, r3
 8003cc2:	3143      	adds	r1, #67	; 0x43
 8003cc4:	7008      	strb	r0, [r1, #0]
 8003cc6:	0021      	movs	r1, r4
 8003cc8:	1c5a      	adds	r2, r3, #1
 8003cca:	3145      	adds	r1, #69	; 0x45
 8003ccc:	7809      	ldrb	r1, [r1, #0]
 8003cce:	18a2      	adds	r2, r4, r2
 8003cd0:	3243      	adds	r2, #67	; 0x43
 8003cd2:	3302      	adds	r3, #2
 8003cd4:	7011      	strb	r1, [r2, #0]
 8003cd6:	e7c1      	b.n	8003c5c <_printf_common+0x4c>
 8003cd8:	0022      	movs	r2, r4
 8003cda:	2301      	movs	r3, #1
 8003cdc:	9901      	ldr	r1, [sp, #4]
 8003cde:	9800      	ldr	r0, [sp, #0]
 8003ce0:	9e08      	ldr	r6, [sp, #32]
 8003ce2:	321a      	adds	r2, #26
 8003ce4:	47b0      	blx	r6
 8003ce6:	1c43      	adds	r3, r0, #1
 8003ce8:	d0e6      	beq.n	8003cb8 <_printf_common+0xa8>
 8003cea:	3701      	adds	r7, #1
 8003cec:	e7d1      	b.n	8003c92 <_printf_common+0x82>
	...

08003cf0 <_printf_i>:
 8003cf0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003cf2:	b08b      	sub	sp, #44	; 0x2c
 8003cf4:	9206      	str	r2, [sp, #24]
 8003cf6:	000a      	movs	r2, r1
 8003cf8:	3243      	adds	r2, #67	; 0x43
 8003cfa:	9307      	str	r3, [sp, #28]
 8003cfc:	9005      	str	r0, [sp, #20]
 8003cfe:	9204      	str	r2, [sp, #16]
 8003d00:	7e0a      	ldrb	r2, [r1, #24]
 8003d02:	000c      	movs	r4, r1
 8003d04:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8003d06:	2a78      	cmp	r2, #120	; 0x78
 8003d08:	d806      	bhi.n	8003d18 <_printf_i+0x28>
 8003d0a:	2a62      	cmp	r2, #98	; 0x62
 8003d0c:	d808      	bhi.n	8003d20 <_printf_i+0x30>
 8003d0e:	2a00      	cmp	r2, #0
 8003d10:	d100      	bne.n	8003d14 <_printf_i+0x24>
 8003d12:	e0c0      	b.n	8003e96 <_printf_i+0x1a6>
 8003d14:	2a58      	cmp	r2, #88	; 0x58
 8003d16:	d052      	beq.n	8003dbe <_printf_i+0xce>
 8003d18:	0026      	movs	r6, r4
 8003d1a:	3642      	adds	r6, #66	; 0x42
 8003d1c:	7032      	strb	r2, [r6, #0]
 8003d1e:	e022      	b.n	8003d66 <_printf_i+0x76>
 8003d20:	0010      	movs	r0, r2
 8003d22:	3863      	subs	r0, #99	; 0x63
 8003d24:	2815      	cmp	r0, #21
 8003d26:	d8f7      	bhi.n	8003d18 <_printf_i+0x28>
 8003d28:	f7fc f9ec 	bl	8000104 <__gnu_thumb1_case_shi>
 8003d2c:	001f0016 	.word	0x001f0016
 8003d30:	fff6fff6 	.word	0xfff6fff6
 8003d34:	fff6fff6 	.word	0xfff6fff6
 8003d38:	fff6001f 	.word	0xfff6001f
 8003d3c:	fff6fff6 	.word	0xfff6fff6
 8003d40:	00a8fff6 	.word	0x00a8fff6
 8003d44:	009a0036 	.word	0x009a0036
 8003d48:	fff6fff6 	.word	0xfff6fff6
 8003d4c:	fff600b9 	.word	0xfff600b9
 8003d50:	fff60036 	.word	0xfff60036
 8003d54:	009efff6 	.word	0x009efff6
 8003d58:	0026      	movs	r6, r4
 8003d5a:	681a      	ldr	r2, [r3, #0]
 8003d5c:	3642      	adds	r6, #66	; 0x42
 8003d5e:	1d11      	adds	r1, r2, #4
 8003d60:	6019      	str	r1, [r3, #0]
 8003d62:	6813      	ldr	r3, [r2, #0]
 8003d64:	7033      	strb	r3, [r6, #0]
 8003d66:	2301      	movs	r3, #1
 8003d68:	e0a7      	b.n	8003eba <_printf_i+0x1ca>
 8003d6a:	6808      	ldr	r0, [r1, #0]
 8003d6c:	6819      	ldr	r1, [r3, #0]
 8003d6e:	1d0a      	adds	r2, r1, #4
 8003d70:	0605      	lsls	r5, r0, #24
 8003d72:	d50b      	bpl.n	8003d8c <_printf_i+0x9c>
 8003d74:	680d      	ldr	r5, [r1, #0]
 8003d76:	601a      	str	r2, [r3, #0]
 8003d78:	2d00      	cmp	r5, #0
 8003d7a:	da03      	bge.n	8003d84 <_printf_i+0x94>
 8003d7c:	232d      	movs	r3, #45	; 0x2d
 8003d7e:	9a04      	ldr	r2, [sp, #16]
 8003d80:	426d      	negs	r5, r5
 8003d82:	7013      	strb	r3, [r2, #0]
 8003d84:	4b61      	ldr	r3, [pc, #388]	; (8003f0c <_printf_i+0x21c>)
 8003d86:	270a      	movs	r7, #10
 8003d88:	9303      	str	r3, [sp, #12]
 8003d8a:	e032      	b.n	8003df2 <_printf_i+0x102>
 8003d8c:	680d      	ldr	r5, [r1, #0]
 8003d8e:	601a      	str	r2, [r3, #0]
 8003d90:	0641      	lsls	r1, r0, #25
 8003d92:	d5f1      	bpl.n	8003d78 <_printf_i+0x88>
 8003d94:	b22d      	sxth	r5, r5
 8003d96:	e7ef      	b.n	8003d78 <_printf_i+0x88>
 8003d98:	680d      	ldr	r5, [r1, #0]
 8003d9a:	6819      	ldr	r1, [r3, #0]
 8003d9c:	1d08      	adds	r0, r1, #4
 8003d9e:	6018      	str	r0, [r3, #0]
 8003da0:	062e      	lsls	r6, r5, #24
 8003da2:	d501      	bpl.n	8003da8 <_printf_i+0xb8>
 8003da4:	680d      	ldr	r5, [r1, #0]
 8003da6:	e003      	b.n	8003db0 <_printf_i+0xc0>
 8003da8:	066d      	lsls	r5, r5, #25
 8003daa:	d5fb      	bpl.n	8003da4 <_printf_i+0xb4>
 8003dac:	680d      	ldr	r5, [r1, #0]
 8003dae:	b2ad      	uxth	r5, r5
 8003db0:	4b56      	ldr	r3, [pc, #344]	; (8003f0c <_printf_i+0x21c>)
 8003db2:	270a      	movs	r7, #10
 8003db4:	9303      	str	r3, [sp, #12]
 8003db6:	2a6f      	cmp	r2, #111	; 0x6f
 8003db8:	d117      	bne.n	8003dea <_printf_i+0xfa>
 8003dba:	2708      	movs	r7, #8
 8003dbc:	e015      	b.n	8003dea <_printf_i+0xfa>
 8003dbe:	3145      	adds	r1, #69	; 0x45
 8003dc0:	700a      	strb	r2, [r1, #0]
 8003dc2:	4a52      	ldr	r2, [pc, #328]	; (8003f0c <_printf_i+0x21c>)
 8003dc4:	9203      	str	r2, [sp, #12]
 8003dc6:	681a      	ldr	r2, [r3, #0]
 8003dc8:	6821      	ldr	r1, [r4, #0]
 8003dca:	ca20      	ldmia	r2!, {r5}
 8003dcc:	601a      	str	r2, [r3, #0]
 8003dce:	0608      	lsls	r0, r1, #24
 8003dd0:	d550      	bpl.n	8003e74 <_printf_i+0x184>
 8003dd2:	07cb      	lsls	r3, r1, #31
 8003dd4:	d502      	bpl.n	8003ddc <_printf_i+0xec>
 8003dd6:	2320      	movs	r3, #32
 8003dd8:	4319      	orrs	r1, r3
 8003dda:	6021      	str	r1, [r4, #0]
 8003ddc:	2710      	movs	r7, #16
 8003dde:	2d00      	cmp	r5, #0
 8003de0:	d103      	bne.n	8003dea <_printf_i+0xfa>
 8003de2:	2320      	movs	r3, #32
 8003de4:	6822      	ldr	r2, [r4, #0]
 8003de6:	439a      	bics	r2, r3
 8003de8:	6022      	str	r2, [r4, #0]
 8003dea:	0023      	movs	r3, r4
 8003dec:	2200      	movs	r2, #0
 8003dee:	3343      	adds	r3, #67	; 0x43
 8003df0:	701a      	strb	r2, [r3, #0]
 8003df2:	6863      	ldr	r3, [r4, #4]
 8003df4:	60a3      	str	r3, [r4, #8]
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	db03      	blt.n	8003e02 <_printf_i+0x112>
 8003dfa:	2204      	movs	r2, #4
 8003dfc:	6821      	ldr	r1, [r4, #0]
 8003dfe:	4391      	bics	r1, r2
 8003e00:	6021      	str	r1, [r4, #0]
 8003e02:	2d00      	cmp	r5, #0
 8003e04:	d102      	bne.n	8003e0c <_printf_i+0x11c>
 8003e06:	9e04      	ldr	r6, [sp, #16]
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	d00c      	beq.n	8003e26 <_printf_i+0x136>
 8003e0c:	9e04      	ldr	r6, [sp, #16]
 8003e0e:	0028      	movs	r0, r5
 8003e10:	0039      	movs	r1, r7
 8003e12:	f7fc fa07 	bl	8000224 <__aeabi_uidivmod>
 8003e16:	9b03      	ldr	r3, [sp, #12]
 8003e18:	3e01      	subs	r6, #1
 8003e1a:	5c5b      	ldrb	r3, [r3, r1]
 8003e1c:	7033      	strb	r3, [r6, #0]
 8003e1e:	002b      	movs	r3, r5
 8003e20:	0005      	movs	r5, r0
 8003e22:	429f      	cmp	r7, r3
 8003e24:	d9f3      	bls.n	8003e0e <_printf_i+0x11e>
 8003e26:	2f08      	cmp	r7, #8
 8003e28:	d109      	bne.n	8003e3e <_printf_i+0x14e>
 8003e2a:	6823      	ldr	r3, [r4, #0]
 8003e2c:	07db      	lsls	r3, r3, #31
 8003e2e:	d506      	bpl.n	8003e3e <_printf_i+0x14e>
 8003e30:	6863      	ldr	r3, [r4, #4]
 8003e32:	6922      	ldr	r2, [r4, #16]
 8003e34:	4293      	cmp	r3, r2
 8003e36:	dc02      	bgt.n	8003e3e <_printf_i+0x14e>
 8003e38:	2330      	movs	r3, #48	; 0x30
 8003e3a:	3e01      	subs	r6, #1
 8003e3c:	7033      	strb	r3, [r6, #0]
 8003e3e:	9b04      	ldr	r3, [sp, #16]
 8003e40:	1b9b      	subs	r3, r3, r6
 8003e42:	6123      	str	r3, [r4, #16]
 8003e44:	9b07      	ldr	r3, [sp, #28]
 8003e46:	0021      	movs	r1, r4
 8003e48:	9300      	str	r3, [sp, #0]
 8003e4a:	9805      	ldr	r0, [sp, #20]
 8003e4c:	9b06      	ldr	r3, [sp, #24]
 8003e4e:	aa09      	add	r2, sp, #36	; 0x24
 8003e50:	f7ff fede 	bl	8003c10 <_printf_common>
 8003e54:	1c43      	adds	r3, r0, #1
 8003e56:	d135      	bne.n	8003ec4 <_printf_i+0x1d4>
 8003e58:	2001      	movs	r0, #1
 8003e5a:	4240      	negs	r0, r0
 8003e5c:	b00b      	add	sp, #44	; 0x2c
 8003e5e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003e60:	2220      	movs	r2, #32
 8003e62:	6809      	ldr	r1, [r1, #0]
 8003e64:	430a      	orrs	r2, r1
 8003e66:	6022      	str	r2, [r4, #0]
 8003e68:	0022      	movs	r2, r4
 8003e6a:	2178      	movs	r1, #120	; 0x78
 8003e6c:	3245      	adds	r2, #69	; 0x45
 8003e6e:	7011      	strb	r1, [r2, #0]
 8003e70:	4a27      	ldr	r2, [pc, #156]	; (8003f10 <_printf_i+0x220>)
 8003e72:	e7a7      	b.n	8003dc4 <_printf_i+0xd4>
 8003e74:	0648      	lsls	r0, r1, #25
 8003e76:	d5ac      	bpl.n	8003dd2 <_printf_i+0xe2>
 8003e78:	b2ad      	uxth	r5, r5
 8003e7a:	e7aa      	b.n	8003dd2 <_printf_i+0xe2>
 8003e7c:	681a      	ldr	r2, [r3, #0]
 8003e7e:	680d      	ldr	r5, [r1, #0]
 8003e80:	1d10      	adds	r0, r2, #4
 8003e82:	6949      	ldr	r1, [r1, #20]
 8003e84:	6018      	str	r0, [r3, #0]
 8003e86:	6813      	ldr	r3, [r2, #0]
 8003e88:	062e      	lsls	r6, r5, #24
 8003e8a:	d501      	bpl.n	8003e90 <_printf_i+0x1a0>
 8003e8c:	6019      	str	r1, [r3, #0]
 8003e8e:	e002      	b.n	8003e96 <_printf_i+0x1a6>
 8003e90:	066d      	lsls	r5, r5, #25
 8003e92:	d5fb      	bpl.n	8003e8c <_printf_i+0x19c>
 8003e94:	8019      	strh	r1, [r3, #0]
 8003e96:	2300      	movs	r3, #0
 8003e98:	9e04      	ldr	r6, [sp, #16]
 8003e9a:	6123      	str	r3, [r4, #16]
 8003e9c:	e7d2      	b.n	8003e44 <_printf_i+0x154>
 8003e9e:	681a      	ldr	r2, [r3, #0]
 8003ea0:	1d11      	adds	r1, r2, #4
 8003ea2:	6019      	str	r1, [r3, #0]
 8003ea4:	6816      	ldr	r6, [r2, #0]
 8003ea6:	2100      	movs	r1, #0
 8003ea8:	0030      	movs	r0, r6
 8003eaa:	6862      	ldr	r2, [r4, #4]
 8003eac:	f000 f8ee 	bl	800408c <memchr>
 8003eb0:	2800      	cmp	r0, #0
 8003eb2:	d001      	beq.n	8003eb8 <_printf_i+0x1c8>
 8003eb4:	1b80      	subs	r0, r0, r6
 8003eb6:	6060      	str	r0, [r4, #4]
 8003eb8:	6863      	ldr	r3, [r4, #4]
 8003eba:	6123      	str	r3, [r4, #16]
 8003ebc:	2300      	movs	r3, #0
 8003ebe:	9a04      	ldr	r2, [sp, #16]
 8003ec0:	7013      	strb	r3, [r2, #0]
 8003ec2:	e7bf      	b.n	8003e44 <_printf_i+0x154>
 8003ec4:	6923      	ldr	r3, [r4, #16]
 8003ec6:	0032      	movs	r2, r6
 8003ec8:	9906      	ldr	r1, [sp, #24]
 8003eca:	9805      	ldr	r0, [sp, #20]
 8003ecc:	9d07      	ldr	r5, [sp, #28]
 8003ece:	47a8      	blx	r5
 8003ed0:	1c43      	adds	r3, r0, #1
 8003ed2:	d0c1      	beq.n	8003e58 <_printf_i+0x168>
 8003ed4:	6823      	ldr	r3, [r4, #0]
 8003ed6:	079b      	lsls	r3, r3, #30
 8003ed8:	d415      	bmi.n	8003f06 <_printf_i+0x216>
 8003eda:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003edc:	68e0      	ldr	r0, [r4, #12]
 8003ede:	4298      	cmp	r0, r3
 8003ee0:	dabc      	bge.n	8003e5c <_printf_i+0x16c>
 8003ee2:	0018      	movs	r0, r3
 8003ee4:	e7ba      	b.n	8003e5c <_printf_i+0x16c>
 8003ee6:	0022      	movs	r2, r4
 8003ee8:	2301      	movs	r3, #1
 8003eea:	9906      	ldr	r1, [sp, #24]
 8003eec:	9805      	ldr	r0, [sp, #20]
 8003eee:	9e07      	ldr	r6, [sp, #28]
 8003ef0:	3219      	adds	r2, #25
 8003ef2:	47b0      	blx	r6
 8003ef4:	1c43      	adds	r3, r0, #1
 8003ef6:	d0af      	beq.n	8003e58 <_printf_i+0x168>
 8003ef8:	3501      	adds	r5, #1
 8003efa:	68e3      	ldr	r3, [r4, #12]
 8003efc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003efe:	1a9b      	subs	r3, r3, r2
 8003f00:	42ab      	cmp	r3, r5
 8003f02:	dcf0      	bgt.n	8003ee6 <_printf_i+0x1f6>
 8003f04:	e7e9      	b.n	8003eda <_printf_i+0x1ea>
 8003f06:	2500      	movs	r5, #0
 8003f08:	e7f7      	b.n	8003efa <_printf_i+0x20a>
 8003f0a:	46c0      	nop			; (mov r8, r8)
 8003f0c:	08004255 	.word	0x08004255
 8003f10:	08004266 	.word	0x08004266

08003f14 <_sbrk_r>:
 8003f14:	2300      	movs	r3, #0
 8003f16:	b570      	push	{r4, r5, r6, lr}
 8003f18:	4d06      	ldr	r5, [pc, #24]	; (8003f34 <_sbrk_r+0x20>)
 8003f1a:	0004      	movs	r4, r0
 8003f1c:	0008      	movs	r0, r1
 8003f1e:	602b      	str	r3, [r5, #0]
 8003f20:	f7fc ffd8 	bl	8000ed4 <_sbrk>
 8003f24:	1c43      	adds	r3, r0, #1
 8003f26:	d103      	bne.n	8003f30 <_sbrk_r+0x1c>
 8003f28:	682b      	ldr	r3, [r5, #0]
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	d000      	beq.n	8003f30 <_sbrk_r+0x1c>
 8003f2e:	6023      	str	r3, [r4, #0]
 8003f30:	bd70      	pop	{r4, r5, r6, pc}
 8003f32:	46c0      	nop			; (mov r8, r8)
 8003f34:	2000013c 	.word	0x2000013c

08003f38 <__sread>:
 8003f38:	b570      	push	{r4, r5, r6, lr}
 8003f3a:	000c      	movs	r4, r1
 8003f3c:	250e      	movs	r5, #14
 8003f3e:	5f49      	ldrsh	r1, [r1, r5]
 8003f40:	f000 f8c0 	bl	80040c4 <_read_r>
 8003f44:	2800      	cmp	r0, #0
 8003f46:	db03      	blt.n	8003f50 <__sread+0x18>
 8003f48:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8003f4a:	181b      	adds	r3, r3, r0
 8003f4c:	6563      	str	r3, [r4, #84]	; 0x54
 8003f4e:	bd70      	pop	{r4, r5, r6, pc}
 8003f50:	89a3      	ldrh	r3, [r4, #12]
 8003f52:	4a02      	ldr	r2, [pc, #8]	; (8003f5c <__sread+0x24>)
 8003f54:	4013      	ands	r3, r2
 8003f56:	81a3      	strh	r3, [r4, #12]
 8003f58:	e7f9      	b.n	8003f4e <__sread+0x16>
 8003f5a:	46c0      	nop			; (mov r8, r8)
 8003f5c:	ffffefff 	.word	0xffffefff

08003f60 <__swrite>:
 8003f60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003f62:	001f      	movs	r7, r3
 8003f64:	898b      	ldrh	r3, [r1, #12]
 8003f66:	0005      	movs	r5, r0
 8003f68:	000c      	movs	r4, r1
 8003f6a:	0016      	movs	r6, r2
 8003f6c:	05db      	lsls	r3, r3, #23
 8003f6e:	d505      	bpl.n	8003f7c <__swrite+0x1c>
 8003f70:	230e      	movs	r3, #14
 8003f72:	5ec9      	ldrsh	r1, [r1, r3]
 8003f74:	2200      	movs	r2, #0
 8003f76:	2302      	movs	r3, #2
 8003f78:	f000 f874 	bl	8004064 <_lseek_r>
 8003f7c:	89a3      	ldrh	r3, [r4, #12]
 8003f7e:	4a05      	ldr	r2, [pc, #20]	; (8003f94 <__swrite+0x34>)
 8003f80:	0028      	movs	r0, r5
 8003f82:	4013      	ands	r3, r2
 8003f84:	81a3      	strh	r3, [r4, #12]
 8003f86:	0032      	movs	r2, r6
 8003f88:	230e      	movs	r3, #14
 8003f8a:	5ee1      	ldrsh	r1, [r4, r3]
 8003f8c:	003b      	movs	r3, r7
 8003f8e:	f000 f81f 	bl	8003fd0 <_write_r>
 8003f92:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003f94:	ffffefff 	.word	0xffffefff

08003f98 <__sseek>:
 8003f98:	b570      	push	{r4, r5, r6, lr}
 8003f9a:	000c      	movs	r4, r1
 8003f9c:	250e      	movs	r5, #14
 8003f9e:	5f49      	ldrsh	r1, [r1, r5]
 8003fa0:	f000 f860 	bl	8004064 <_lseek_r>
 8003fa4:	89a3      	ldrh	r3, [r4, #12]
 8003fa6:	1c42      	adds	r2, r0, #1
 8003fa8:	d103      	bne.n	8003fb2 <__sseek+0x1a>
 8003faa:	4a05      	ldr	r2, [pc, #20]	; (8003fc0 <__sseek+0x28>)
 8003fac:	4013      	ands	r3, r2
 8003fae:	81a3      	strh	r3, [r4, #12]
 8003fb0:	bd70      	pop	{r4, r5, r6, pc}
 8003fb2:	2280      	movs	r2, #128	; 0x80
 8003fb4:	0152      	lsls	r2, r2, #5
 8003fb6:	4313      	orrs	r3, r2
 8003fb8:	81a3      	strh	r3, [r4, #12]
 8003fba:	6560      	str	r0, [r4, #84]	; 0x54
 8003fbc:	e7f8      	b.n	8003fb0 <__sseek+0x18>
 8003fbe:	46c0      	nop			; (mov r8, r8)
 8003fc0:	ffffefff 	.word	0xffffefff

08003fc4 <__sclose>:
 8003fc4:	b510      	push	{r4, lr}
 8003fc6:	230e      	movs	r3, #14
 8003fc8:	5ec9      	ldrsh	r1, [r1, r3]
 8003fca:	f000 f815 	bl	8003ff8 <_close_r>
 8003fce:	bd10      	pop	{r4, pc}

08003fd0 <_write_r>:
 8003fd0:	b570      	push	{r4, r5, r6, lr}
 8003fd2:	0004      	movs	r4, r0
 8003fd4:	0008      	movs	r0, r1
 8003fd6:	0011      	movs	r1, r2
 8003fd8:	001a      	movs	r2, r3
 8003fda:	2300      	movs	r3, #0
 8003fdc:	4d05      	ldr	r5, [pc, #20]	; (8003ff4 <_write_r+0x24>)
 8003fde:	602b      	str	r3, [r5, #0]
 8003fe0:	f7fc ff30 	bl	8000e44 <_write>
 8003fe4:	1c43      	adds	r3, r0, #1
 8003fe6:	d103      	bne.n	8003ff0 <_write_r+0x20>
 8003fe8:	682b      	ldr	r3, [r5, #0]
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d000      	beq.n	8003ff0 <_write_r+0x20>
 8003fee:	6023      	str	r3, [r4, #0]
 8003ff0:	bd70      	pop	{r4, r5, r6, pc}
 8003ff2:	46c0      	nop			; (mov r8, r8)
 8003ff4:	2000013c 	.word	0x2000013c

08003ff8 <_close_r>:
 8003ff8:	2300      	movs	r3, #0
 8003ffa:	b570      	push	{r4, r5, r6, lr}
 8003ffc:	4d06      	ldr	r5, [pc, #24]	; (8004018 <_close_r+0x20>)
 8003ffe:	0004      	movs	r4, r0
 8004000:	0008      	movs	r0, r1
 8004002:	602b      	str	r3, [r5, #0]
 8004004:	f7fc ff3a 	bl	8000e7c <_close>
 8004008:	1c43      	adds	r3, r0, #1
 800400a:	d103      	bne.n	8004014 <_close_r+0x1c>
 800400c:	682b      	ldr	r3, [r5, #0]
 800400e:	2b00      	cmp	r3, #0
 8004010:	d000      	beq.n	8004014 <_close_r+0x1c>
 8004012:	6023      	str	r3, [r4, #0]
 8004014:	bd70      	pop	{r4, r5, r6, pc}
 8004016:	46c0      	nop			; (mov r8, r8)
 8004018:	2000013c 	.word	0x2000013c

0800401c <_fstat_r>:
 800401c:	2300      	movs	r3, #0
 800401e:	b570      	push	{r4, r5, r6, lr}
 8004020:	4d06      	ldr	r5, [pc, #24]	; (800403c <_fstat_r+0x20>)
 8004022:	0004      	movs	r4, r0
 8004024:	0008      	movs	r0, r1
 8004026:	0011      	movs	r1, r2
 8004028:	602b      	str	r3, [r5, #0]
 800402a:	f7fc ff31 	bl	8000e90 <_fstat>
 800402e:	1c43      	adds	r3, r0, #1
 8004030:	d103      	bne.n	800403a <_fstat_r+0x1e>
 8004032:	682b      	ldr	r3, [r5, #0]
 8004034:	2b00      	cmp	r3, #0
 8004036:	d000      	beq.n	800403a <_fstat_r+0x1e>
 8004038:	6023      	str	r3, [r4, #0]
 800403a:	bd70      	pop	{r4, r5, r6, pc}
 800403c:	2000013c 	.word	0x2000013c

08004040 <_isatty_r>:
 8004040:	2300      	movs	r3, #0
 8004042:	b570      	push	{r4, r5, r6, lr}
 8004044:	4d06      	ldr	r5, [pc, #24]	; (8004060 <_isatty_r+0x20>)
 8004046:	0004      	movs	r4, r0
 8004048:	0008      	movs	r0, r1
 800404a:	602b      	str	r3, [r5, #0]
 800404c:	f7fc ff2e 	bl	8000eac <_isatty>
 8004050:	1c43      	adds	r3, r0, #1
 8004052:	d103      	bne.n	800405c <_isatty_r+0x1c>
 8004054:	682b      	ldr	r3, [r5, #0]
 8004056:	2b00      	cmp	r3, #0
 8004058:	d000      	beq.n	800405c <_isatty_r+0x1c>
 800405a:	6023      	str	r3, [r4, #0]
 800405c:	bd70      	pop	{r4, r5, r6, pc}
 800405e:	46c0      	nop			; (mov r8, r8)
 8004060:	2000013c 	.word	0x2000013c

08004064 <_lseek_r>:
 8004064:	b570      	push	{r4, r5, r6, lr}
 8004066:	0004      	movs	r4, r0
 8004068:	0008      	movs	r0, r1
 800406a:	0011      	movs	r1, r2
 800406c:	001a      	movs	r2, r3
 800406e:	2300      	movs	r3, #0
 8004070:	4d05      	ldr	r5, [pc, #20]	; (8004088 <_lseek_r+0x24>)
 8004072:	602b      	str	r3, [r5, #0]
 8004074:	f7fc ff23 	bl	8000ebe <_lseek>
 8004078:	1c43      	adds	r3, r0, #1
 800407a:	d103      	bne.n	8004084 <_lseek_r+0x20>
 800407c:	682b      	ldr	r3, [r5, #0]
 800407e:	2b00      	cmp	r3, #0
 8004080:	d000      	beq.n	8004084 <_lseek_r+0x20>
 8004082:	6023      	str	r3, [r4, #0]
 8004084:	bd70      	pop	{r4, r5, r6, pc}
 8004086:	46c0      	nop			; (mov r8, r8)
 8004088:	2000013c 	.word	0x2000013c

0800408c <memchr>:
 800408c:	b2c9      	uxtb	r1, r1
 800408e:	1882      	adds	r2, r0, r2
 8004090:	4290      	cmp	r0, r2
 8004092:	d101      	bne.n	8004098 <memchr+0xc>
 8004094:	2000      	movs	r0, #0
 8004096:	4770      	bx	lr
 8004098:	7803      	ldrb	r3, [r0, #0]
 800409a:	428b      	cmp	r3, r1
 800409c:	d0fb      	beq.n	8004096 <memchr+0xa>
 800409e:	3001      	adds	r0, #1
 80040a0:	e7f6      	b.n	8004090 <memchr+0x4>
	...

080040a4 <__malloc_lock>:
 80040a4:	b510      	push	{r4, lr}
 80040a6:	4802      	ldr	r0, [pc, #8]	; (80040b0 <__malloc_lock+0xc>)
 80040a8:	f7ff fb39 	bl	800371e <__retarget_lock_acquire_recursive>
 80040ac:	bd10      	pop	{r4, pc}
 80040ae:	46c0      	nop			; (mov r8, r8)
 80040b0:	20000134 	.word	0x20000134

080040b4 <__malloc_unlock>:
 80040b4:	b510      	push	{r4, lr}
 80040b6:	4802      	ldr	r0, [pc, #8]	; (80040c0 <__malloc_unlock+0xc>)
 80040b8:	f7ff fb32 	bl	8003720 <__retarget_lock_release_recursive>
 80040bc:	bd10      	pop	{r4, pc}
 80040be:	46c0      	nop			; (mov r8, r8)
 80040c0:	20000134 	.word	0x20000134

080040c4 <_read_r>:
 80040c4:	b570      	push	{r4, r5, r6, lr}
 80040c6:	0004      	movs	r4, r0
 80040c8:	0008      	movs	r0, r1
 80040ca:	0011      	movs	r1, r2
 80040cc:	001a      	movs	r2, r3
 80040ce:	2300      	movs	r3, #0
 80040d0:	4d05      	ldr	r5, [pc, #20]	; (80040e8 <_read_r+0x24>)
 80040d2:	602b      	str	r3, [r5, #0]
 80040d4:	f7fc fe99 	bl	8000e0a <_read>
 80040d8:	1c43      	adds	r3, r0, #1
 80040da:	d103      	bne.n	80040e4 <_read_r+0x20>
 80040dc:	682b      	ldr	r3, [r5, #0]
 80040de:	2b00      	cmp	r3, #0
 80040e0:	d000      	beq.n	80040e4 <_read_r+0x20>
 80040e2:	6023      	str	r3, [r4, #0]
 80040e4:	bd70      	pop	{r4, r5, r6, pc}
 80040e6:	46c0      	nop			; (mov r8, r8)
 80040e8:	2000013c 	.word	0x2000013c

080040ec <_init>:
 80040ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80040ee:	46c0      	nop			; (mov r8, r8)
 80040f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80040f2:	bc08      	pop	{r3}
 80040f4:	469e      	mov	lr, r3
 80040f6:	4770      	bx	lr

080040f8 <_fini>:
 80040f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80040fa:	46c0      	nop			; (mov r8, r8)
 80040fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80040fe:	bc08      	pop	{r3}
 8004100:	469e      	mov	lr, r3
 8004102:	4770      	bx	lr
